In archive libArduino.a:

HardwareSerial.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000ac8  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  1 .data         00000024  00000000  00000000  00000afc  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
  2 .bss          0000025c  00000000  00000000  00000b20  2**0
                  ALLOC
  3 .stab         00000d38  00000000  00000000  00000b20  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      0000118e  00000000  00000000  00001858  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .ctors        00000002  00000000  00000000  000029e6  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA

Disassembly of section .text:

00000000 <_Z10store_charhP11ring_buffer>:
#endif
#if defined(UBRR3H)
  ring_buffer rx_buffer3  =  { { 0 }, 0, 0 };
#endif

inline void store_char(unsigned char c, ring_buffer *rx_buffer)
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <_Z10store_charhP11ring_buffer+0x6>
   6:	0f 92       	push	r0
   8:	0f 92       	push	r0
   a:	cd b7       	in	r28, 0x3d	; 61
   c:	de b7       	in	r29, 0x3e	; 62
   e:	8b 83       	std	Y+3, r24	; 0x03
  10:	7d 83       	std	Y+5, r23	; 0x05
  12:	6c 83       	std	Y+4, r22	; 0x04
{
  int i = (unsigned int)(rx_buffer->head + 1) % RX_BUFFER_SIZE;
  14:	8c 81       	ldd	r24, Y+4	; 0x04
  16:	9d 81       	ldd	r25, Y+5	; 0x05
  18:	fc 01       	movw	r30, r24
  1a:	e0 58       	subi	r30, 0x80	; 128
  1c:	ff 4f       	sbci	r31, 0xFF	; 255
  1e:	80 81       	ld	r24, Z
  20:	91 81       	ldd	r25, Z+1	; 0x01
  22:	01 96       	adiw	r24, 0x01	; 1
  24:	8f 77       	andi	r24, 0x7F	; 127
  26:	90 70       	andi	r25, 0x00	; 0
  28:	9a 83       	std	Y+2, r25	; 0x02
  2a:	89 83       	std	Y+1, r24	; 0x01

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if (i != rx_buffer->tail) {
  2c:	8c 81       	ldd	r24, Y+4	; 0x04
  2e:	9d 81       	ldd	r25, Y+5	; 0x05
  30:	fc 01       	movw	r30, r24
  32:	ee 57       	subi	r30, 0x7E	; 126
  34:	ff 4f       	sbci	r31, 0xFF	; 255
  36:	20 81       	ld	r18, Z
  38:	31 81       	ldd	r19, Z+1	; 0x01
  3a:	89 81       	ldd	r24, Y+1	; 0x01
  3c:	9a 81       	ldd	r25, Y+2	; 0x02
  3e:	28 17       	cp	r18, r24
  40:	39 07       	cpc	r19, r25
  42:	01 f0       	breq	.+0      	; 0x44 <_Z10store_charhP11ring_buffer+0x44>
    rx_buffer->buffer[rx_buffer->head] = c;
  44:	8c 81       	ldd	r24, Y+4	; 0x04
  46:	9d 81       	ldd	r25, Y+5	; 0x05
  48:	fc 01       	movw	r30, r24
  4a:	e0 58       	subi	r30, 0x80	; 128
  4c:	ff 4f       	sbci	r31, 0xFF	; 255
  4e:	20 81       	ld	r18, Z
  50:	31 81       	ldd	r19, Z+1	; 0x01
  52:	8c 81       	ldd	r24, Y+4	; 0x04
  54:	9d 81       	ldd	r25, Y+5	; 0x05
  56:	fc 01       	movw	r30, r24
  58:	e2 0f       	add	r30, r18
  5a:	f3 1f       	adc	r31, r19
  5c:	8b 81       	ldd	r24, Y+3	; 0x03
  5e:	80 83       	st	Z, r24
    rx_buffer->head = i;
  60:	8c 81       	ldd	r24, Y+4	; 0x04
  62:	9d 81       	ldd	r25, Y+5	; 0x05
  64:	fc 01       	movw	r30, r24
  66:	e0 58       	subi	r30, 0x80	; 128
  68:	ff 4f       	sbci	r31, 0xFF	; 255
  6a:	89 81       	ldd	r24, Y+1	; 0x01
  6c:	9a 81       	ldd	r25, Y+2	; 0x02
  6e:	91 83       	std	Z+1, r25	; 0x01
  70:	80 83       	st	Z, r24
  }
}
  72:	0f 90       	pop	r0
  74:	0f 90       	pop	r0
  76:	0f 90       	pop	r0
  78:	0f 90       	pop	r0
  7a:	0f 90       	pop	r0
  7c:	cf 91       	pop	r28
  7e:	df 91       	pop	r29
  80:	08 95       	ret

00000082 <__vector_25>:
    #error UDR not defined
  #endif
    store_char(c, &rx_buffer);
  }
#elif defined(SIG_USART0_RECV) && defined(UDR0)
  SIGNAL(SIG_USART0_RECV)
  82:	1f 92       	push	r1
  84:	0f 92       	push	r0
  86:	0f b6       	in	r0, 0x3f	; 63
  88:	0f 92       	push	r0
  8a:	00 90 5b 00 	lds	r0, 0x005B
  8e:	0f 92       	push	r0
  90:	11 24       	eor	r1, r1
  92:	2f 93       	push	r18
  94:	3f 93       	push	r19
  96:	4f 93       	push	r20
  98:	5f 93       	push	r21
  9a:	6f 93       	push	r22
  9c:	7f 93       	push	r23
  9e:	8f 93       	push	r24
  a0:	9f 93       	push	r25
  a2:	af 93       	push	r26
  a4:	bf 93       	push	r27
  a6:	ef 93       	push	r30
  a8:	ff 93       	push	r31
  aa:	df 93       	push	r29
  ac:	cf 93       	push	r28
  ae:	0f 92       	push	r0
  b0:	cd b7       	in	r28, 0x3d	; 61
  b2:	de b7       	in	r29, 0x3e	; 62
  {
    unsigned char c  =  UDR0;
  b4:	e6 ec       	ldi	r30, 0xC6	; 198
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	80 81       	ld	r24, Z
  ba:	89 83       	std	Y+1, r24	; 0x01
    store_char(c, &rx_buffer);
  bc:	20 e0       	ldi	r18, 0x00	; 0
  be:	30 e0       	ldi	r19, 0x00	; 0
  c0:	89 81       	ldd	r24, Y+1	; 0x01
  c2:	b9 01       	movw	r22, r18
  c4:	0e 94 00 00 	call	0	; 0x0 <_Z10store_charhP11ring_buffer>
  }
  c8:	0f 90       	pop	r0
  ca:	cf 91       	pop	r28
  cc:	df 91       	pop	r29
  ce:	ff 91       	pop	r31
  d0:	ef 91       	pop	r30
  d2:	bf 91       	pop	r27
  d4:	af 91       	pop	r26
  d6:	9f 91       	pop	r25
  d8:	8f 91       	pop	r24
  da:	7f 91       	pop	r23
  dc:	6f 91       	pop	r22
  de:	5f 91       	pop	r21
  e0:	4f 91       	pop	r20
  e2:	3f 91       	pop	r19
  e4:	2f 91       	pop	r18
  e6:	0f 90       	pop	r0
  e8:	00 92 5b 00 	sts	0x005B, r0
  ec:	0f 90       	pop	r0
  ee:	0f be       	out	0x3f, r0	; 63
  f0:	0f 90       	pop	r0
  f2:	1f 90       	pop	r1
  f4:	18 95       	reti

000000f6 <__vector_36>:
#endif

//#if defined(SIG_USART1_RECV)
#if defined(USART1_RX_vect)
  //SIGNAL(SIG_USART1_RECV)
  SIGNAL(USART1_RX_vect)
  f6:	1f 92       	push	r1
  f8:	0f 92       	push	r0
  fa:	0f b6       	in	r0, 0x3f	; 63
  fc:	0f 92       	push	r0
  fe:	00 90 5b 00 	lds	r0, 0x005B
 102:	0f 92       	push	r0
 104:	11 24       	eor	r1, r1
 106:	2f 93       	push	r18
 108:	3f 93       	push	r19
 10a:	4f 93       	push	r20
 10c:	5f 93       	push	r21
 10e:	6f 93       	push	r22
 110:	7f 93       	push	r23
 112:	8f 93       	push	r24
 114:	9f 93       	push	r25
 116:	af 93       	push	r26
 118:	bf 93       	push	r27
 11a:	ef 93       	push	r30
 11c:	ff 93       	push	r31
 11e:	df 93       	push	r29
 120:	cf 93       	push	r28
 122:	0f 92       	push	r0
 124:	cd b7       	in	r28, 0x3d	; 61
 126:	de b7       	in	r29, 0x3e	; 62
  {
    unsigned char c = UDR1;
 128:	ee ec       	ldi	r30, 0xCE	; 206
 12a:	f0 e0       	ldi	r31, 0x00	; 0
 12c:	80 81       	ld	r24, Z
 12e:	89 83       	std	Y+1, r24	; 0x01
    store_char(c, &rx_buffer1);
 130:	20 e0       	ldi	r18, 0x00	; 0
 132:	30 e0       	ldi	r19, 0x00	; 0
 134:	89 81       	ldd	r24, Y+1	; 0x01
 136:	b9 01       	movw	r22, r18
 138:	0e 94 00 00 	call	0	; 0x0 <_Z10store_charhP11ring_buffer>
  }
 13c:	0f 90       	pop	r0
 13e:	cf 91       	pop	r28
 140:	df 91       	pop	r29
 142:	ff 91       	pop	r31
 144:	ef 91       	pop	r30
 146:	bf 91       	pop	r27
 148:	af 91       	pop	r26
 14a:	9f 91       	pop	r25
 14c:	8f 91       	pop	r24
 14e:	7f 91       	pop	r23
 150:	6f 91       	pop	r22
 152:	5f 91       	pop	r21
 154:	4f 91       	pop	r20
 156:	3f 91       	pop	r19
 158:	2f 91       	pop	r18
 15a:	0f 90       	pop	r0
 15c:	00 92 5b 00 	sts	0x005B, r0
 160:	0f 90       	pop	r0
 162:	0f be       	out	0x3f, r0	; 63
 164:	0f 90       	pop	r0
 166:	1f 90       	pop	r1
 168:	18 95       	reti

0000016a <__vector_51>:
#elif defined(SIG_USART1_RECV)
  #error SIG_USART1_RECV
#endif

#if defined(USART2_RX_vect) && defined(UDR2)
  SIGNAL(USART2_RX_vect)
 16a:	1f 92       	push	r1
 16c:	0f 92       	push	r0
 16e:	0f b6       	in	r0, 0x3f	; 63
 170:	0f 92       	push	r0
 172:	00 90 5b 00 	lds	r0, 0x005B
 176:	0f 92       	push	r0
 178:	11 24       	eor	r1, r1
 17a:	2f 93       	push	r18
 17c:	3f 93       	push	r19
 17e:	4f 93       	push	r20
 180:	5f 93       	push	r21
 182:	6f 93       	push	r22
 184:	7f 93       	push	r23
 186:	8f 93       	push	r24
 188:	9f 93       	push	r25
 18a:	af 93       	push	r26
 18c:	bf 93       	push	r27
 18e:	ef 93       	push	r30
 190:	ff 93       	push	r31
 192:	df 93       	push	r29
 194:	cf 93       	push	r28
 196:	0f 92       	push	r0
 198:	cd b7       	in	r28, 0x3d	; 61
 19a:	de b7       	in	r29, 0x3e	; 62
  {
    unsigned char c = UDR2;
 19c:	e6 ed       	ldi	r30, 0xD6	; 214
 19e:	f0 e0       	ldi	r31, 0x00	; 0
 1a0:	80 81       	ld	r24, Z
 1a2:	89 83       	std	Y+1, r24	; 0x01
    store_char(c, &rx_buffer2);
 1a4:	20 e0       	ldi	r18, 0x00	; 0
 1a6:	30 e0       	ldi	r19, 0x00	; 0
 1a8:	89 81       	ldd	r24, Y+1	; 0x01
 1aa:	b9 01       	movw	r22, r18
 1ac:	0e 94 00 00 	call	0	; 0x0 <_Z10store_charhP11ring_buffer>
  }
 1b0:	0f 90       	pop	r0
 1b2:	cf 91       	pop	r28
 1b4:	df 91       	pop	r29
 1b6:	ff 91       	pop	r31
 1b8:	ef 91       	pop	r30
 1ba:	bf 91       	pop	r27
 1bc:	af 91       	pop	r26
 1be:	9f 91       	pop	r25
 1c0:	8f 91       	pop	r24
 1c2:	7f 91       	pop	r23
 1c4:	6f 91       	pop	r22
 1c6:	5f 91       	pop	r21
 1c8:	4f 91       	pop	r20
 1ca:	3f 91       	pop	r19
 1cc:	2f 91       	pop	r18
 1ce:	0f 90       	pop	r0
 1d0:	00 92 5b 00 	sts	0x005B, r0
 1d4:	0f 90       	pop	r0
 1d6:	0f be       	out	0x3f, r0	; 63
 1d8:	0f 90       	pop	r0
 1da:	1f 90       	pop	r1
 1dc:	18 95       	reti

000001de <__vector_54>:
#elif defined(SIG_USART2_RECV)
  #error SIG_USART2_RECV
#endif

#if defined(USART3_RX_vect) && defined(UDR3)
  SIGNAL(USART3_RX_vect)
 1de:	1f 92       	push	r1
 1e0:	0f 92       	push	r0
 1e2:	0f b6       	in	r0, 0x3f	; 63
 1e4:	0f 92       	push	r0
 1e6:	00 90 5b 00 	lds	r0, 0x005B
 1ea:	0f 92       	push	r0
 1ec:	11 24       	eor	r1, r1
 1ee:	2f 93       	push	r18
 1f0:	3f 93       	push	r19
 1f2:	4f 93       	push	r20
 1f4:	5f 93       	push	r21
 1f6:	6f 93       	push	r22
 1f8:	7f 93       	push	r23
 1fa:	8f 93       	push	r24
 1fc:	9f 93       	push	r25
 1fe:	af 93       	push	r26
 200:	bf 93       	push	r27
 202:	ef 93       	push	r30
 204:	ff 93       	push	r31
 206:	df 93       	push	r29
 208:	cf 93       	push	r28
 20a:	0f 92       	push	r0
 20c:	cd b7       	in	r28, 0x3d	; 61
 20e:	de b7       	in	r29, 0x3e	; 62
  {
    unsigned char c = UDR3;
 210:	e6 e3       	ldi	r30, 0x36	; 54
 212:	f1 e0       	ldi	r31, 0x01	; 1
 214:	80 81       	ld	r24, Z
 216:	89 83       	std	Y+1, r24	; 0x01
    store_char(c, &rx_buffer3);
 218:	20 e0       	ldi	r18, 0x00	; 0
 21a:	30 e0       	ldi	r19, 0x00	; 0
 21c:	89 81       	ldd	r24, Y+1	; 0x01
 21e:	b9 01       	movw	r22, r18
 220:	0e 94 00 00 	call	0	; 0x0 <_Z10store_charhP11ring_buffer>
  }
 224:	0f 90       	pop	r0
 226:	cf 91       	pop	r28
 228:	df 91       	pop	r29
 22a:	ff 91       	pop	r31
 22c:	ef 91       	pop	r30
 22e:	bf 91       	pop	r27
 230:	af 91       	pop	r26
 232:	9f 91       	pop	r25
 234:	8f 91       	pop	r24
 236:	7f 91       	pop	r23
 238:	6f 91       	pop	r22
 23a:	5f 91       	pop	r21
 23c:	4f 91       	pop	r20
 23e:	3f 91       	pop	r19
 240:	2f 91       	pop	r18
 242:	0f 90       	pop	r0
 244:	00 92 5b 00 	sts	0x005B, r0
 248:	0f 90       	pop	r0
 24a:	0f be       	out	0x3f, r0	; 63
 24c:	0f 90       	pop	r0
 24e:	1f 90       	pop	r1
 250:	18 95       	reti

00000252 <_ZN5PrintC2Ev>:
#define OCT 8
#define BIN 2
#define BYTE 0

class Print
{
 252:	df 93       	push	r29
 254:	cf 93       	push	r28
 256:	0f 92       	push	r0
 258:	0f 92       	push	r0
 25a:	cd b7       	in	r28, 0x3d	; 61
 25c:	de b7       	in	r29, 0x3e	; 62
 25e:	9a 83       	std	Y+2, r25	; 0x02
 260:	89 83       	std	Y+1, r24	; 0x01
 262:	e9 81       	ldd	r30, Y+1	; 0x01
 264:	fa 81       	ldd	r31, Y+2	; 0x02
 266:	80 e0       	ldi	r24, 0x00	; 0
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	91 83       	std	Z+1, r25	; 0x01
 26c:	80 83       	st	Z, r24
 26e:	0f 90       	pop	r0
 270:	0f 90       	pop	r0
 272:	cf 91       	pop	r28
 274:	df 91       	pop	r29
 276:	08 95       	ret

00000278 <_ZN6StreamC2Ev>:

#include <inttypes.h>
#include "Print.h"

class Stream : public Print
{
 278:	df 93       	push	r29
 27a:	cf 93       	push	r28
 27c:	0f 92       	push	r0
 27e:	0f 92       	push	r0
 280:	cd b7       	in	r28, 0x3d	; 61
 282:	de b7       	in	r29, 0x3e	; 62
 284:	9a 83       	std	Y+2, r25	; 0x02
 286:	89 83       	std	Y+1, r24	; 0x01
 288:	89 81       	ldd	r24, Y+1	; 0x01
 28a:	9a 81       	ldd	r25, Y+2	; 0x02
 28c:	0e 94 00 00 	call	0	; 0x0 <_Z10store_charhP11ring_buffer>
 290:	e9 81       	ldd	r30, Y+1	; 0x01
 292:	fa 81       	ldd	r31, Y+2	; 0x02
 294:	80 e0       	ldi	r24, 0x00	; 0
 296:	90 e0       	ldi	r25, 0x00	; 0
 298:	91 83       	std	Z+1, r25	; 0x01
 29a:	80 83       	st	Z, r24
 29c:	0f 90       	pop	r0
 29e:	0f 90       	pop	r0
 2a0:	cf 91       	pop	r28
 2a2:	df 91       	pop	r29
 2a4:	08 95       	ret

000002a6 <_ZN14HardwareSerialC2EP11ring_bufferPVhS3_S3_S3_S3_hhhhh>:

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udre, uint8_t u2x)
 2a6:	8f 92       	push	r8
 2a8:	af 92       	push	r10
 2aa:	cf 92       	push	r12
 2ac:	df 92       	push	r13
 2ae:	ef 92       	push	r14
 2b0:	ff 92       	push	r15
 2b2:	0f 93       	push	r16
 2b4:	1f 93       	push	r17
 2b6:	df 93       	push	r29
 2b8:	cf 93       	push	r28
 2ba:	cd b7       	in	r28, 0x3d	; 61
 2bc:	de b7       	in	r29, 0x3e	; 62
 2be:	60 97       	sbiw	r28, 0x10	; 16
 2c0:	0f b6       	in	r0, 0x3f	; 63
 2c2:	f8 94       	cli
 2c4:	de bf       	out	0x3e, r29	; 62
 2c6:	0f be       	out	0x3f, r0	; 63
 2c8:	cd bf       	out	0x3d, r28	; 61
 2ca:	9a 83       	std	Y+2, r25	; 0x02
 2cc:	89 83       	std	Y+1, r24	; 0x01
 2ce:	7c 83       	std	Y+4, r23	; 0x04
 2d0:	6b 83       	std	Y+3, r22	; 0x03
 2d2:	5e 83       	std	Y+6, r21	; 0x06
 2d4:	4d 83       	std	Y+5, r20	; 0x05
 2d6:	38 87       	std	Y+8, r19	; 0x08
 2d8:	2f 83       	std	Y+7, r18	; 0x07
 2da:	1a 87       	std	Y+10, r17	; 0x0a
 2dc:	09 87       	std	Y+9, r16	; 0x09
 2de:	fc 86       	std	Y+12, r15	; 0x0c
 2e0:	eb 86       	std	Y+11, r14	; 0x0b
 2e2:	de 86       	std	Y+14, r13	; 0x0e
 2e4:	cd 86       	std	Y+13, r12	; 0x0d
 2e6:	af 86       	std	Y+15, r10	; 0x0f
 2e8:	88 8a       	std	Y+16, r8	; 0x10
 2ea:	89 81       	ldd	r24, Y+1	; 0x01
 2ec:	9a 81       	ldd	r25, Y+2	; 0x02
 2ee:	0e 94 00 00 	call	0	; 0x0 <_Z10store_charhP11ring_buffer>
 2f2:	e9 81       	ldd	r30, Y+1	; 0x01
 2f4:	fa 81       	ldd	r31, Y+2	; 0x02
 2f6:	80 e0       	ldi	r24, 0x00	; 0
 2f8:	90 e0       	ldi	r25, 0x00	; 0
 2fa:	91 83       	std	Z+1, r25	; 0x01
 2fc:	80 83       	st	Z, r24
{
  _rx_buffer = rx_buffer;
 2fe:	e9 81       	ldd	r30, Y+1	; 0x01
 300:	fa 81       	ldd	r31, Y+2	; 0x02
 302:	8b 81       	ldd	r24, Y+3	; 0x03
 304:	9c 81       	ldd	r25, Y+4	; 0x04
 306:	93 83       	std	Z+3, r25	; 0x03
 308:	82 83       	std	Z+2, r24	; 0x02
  _ubrrh = ubrrh;
 30a:	e9 81       	ldd	r30, Y+1	; 0x01
 30c:	fa 81       	ldd	r31, Y+2	; 0x02
 30e:	8d 81       	ldd	r24, Y+5	; 0x05
 310:	9e 81       	ldd	r25, Y+6	; 0x06
 312:	95 83       	std	Z+5, r25	; 0x05
 314:	84 83       	std	Z+4, r24	; 0x04
  _ubrrl = ubrrl;
 316:	e9 81       	ldd	r30, Y+1	; 0x01
 318:	fa 81       	ldd	r31, Y+2	; 0x02
 31a:	8f 81       	ldd	r24, Y+7	; 0x07
 31c:	98 85       	ldd	r25, Y+8	; 0x08
 31e:	97 83       	std	Z+7, r25	; 0x07
 320:	86 83       	std	Z+6, r24	; 0x06
  _ucsra = ucsra;
 322:	e9 81       	ldd	r30, Y+1	; 0x01
 324:	fa 81       	ldd	r31, Y+2	; 0x02
 326:	89 85       	ldd	r24, Y+9	; 0x09
 328:	9a 85       	ldd	r25, Y+10	; 0x0a
 32a:	91 87       	std	Z+9, r25	; 0x09
 32c:	80 87       	std	Z+8, r24	; 0x08
  _ucsrb = ucsrb;
 32e:	e9 81       	ldd	r30, Y+1	; 0x01
 330:	fa 81       	ldd	r31, Y+2	; 0x02
 332:	8b 85       	ldd	r24, Y+11	; 0x0b
 334:	9c 85       	ldd	r25, Y+12	; 0x0c
 336:	93 87       	std	Z+11, r25	; 0x0b
 338:	82 87       	std	Z+10, r24	; 0x0a
  _udr = udr;
 33a:	e9 81       	ldd	r30, Y+1	; 0x01
 33c:	fa 81       	ldd	r31, Y+2	; 0x02
 33e:	8d 85       	ldd	r24, Y+13	; 0x0d
 340:	9e 85       	ldd	r25, Y+14	; 0x0e
 342:	95 87       	std	Z+13, r25	; 0x0d
 344:	84 87       	std	Z+12, r24	; 0x0c
  _rxen = rxen;
 346:	e9 81       	ldd	r30, Y+1	; 0x01
 348:	fa 81       	ldd	r31, Y+2	; 0x02
 34a:	8f 85       	ldd	r24, Y+15	; 0x0f
 34c:	86 87       	std	Z+14, r24	; 0x0e
  _txen = txen;
 34e:	e9 81       	ldd	r30, Y+1	; 0x01
 350:	fa 81       	ldd	r31, Y+2	; 0x02
 352:	88 89       	ldd	r24, Y+16	; 0x10
 354:	87 87       	std	Z+15, r24	; 0x0f
  _rxcie = rxcie;
 356:	e9 81       	ldd	r30, Y+1	; 0x01
 358:	fa 81       	ldd	r31, Y+2	; 0x02
 35a:	8e 8d       	ldd	r24, Y+30	; 0x1e
 35c:	80 8b       	std	Z+16, r24	; 0x10
  _udre = udre;
 35e:	e9 81       	ldd	r30, Y+1	; 0x01
 360:	fa 81       	ldd	r31, Y+2	; 0x02
 362:	8f 8d       	ldd	r24, Y+31	; 0x1f
 364:	81 8b       	std	Z+17, r24	; 0x11
  _u2x = u2x;
 366:	e9 81       	ldd	r30, Y+1	; 0x01
 368:	fa 81       	ldd	r31, Y+2	; 0x02
 36a:	88 a1       	ldd	r24, Y+32	; 0x20
 36c:	82 8b       	std	Z+18, r24	; 0x12
}
 36e:	60 96       	adiw	r28, 0x10	; 16
 370:	0f b6       	in	r0, 0x3f	; 63
 372:	f8 94       	cli
 374:	de bf       	out	0x3e, r29	; 62
 376:	0f be       	out	0x3f, r0	; 63
 378:	cd bf       	out	0x3d, r28	; 61
 37a:	cf 91       	pop	r28
 37c:	df 91       	pop	r29
 37e:	1f 91       	pop	r17
 380:	0f 91       	pop	r16
 382:	ff 90       	pop	r15
 384:	ef 90       	pop	r14
 386:	df 90       	pop	r13
 388:	cf 90       	pop	r12
 38a:	af 90       	pop	r10
 38c:	8f 90       	pop	r8
 38e:	08 95       	ret

00000390 <_ZN14HardwareSerialC1EP11ring_bufferPVhS3_S3_S3_S3_hhhhh>:

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udre, uint8_t u2x)
 390:	8f 92       	push	r8
 392:	af 92       	push	r10
 394:	cf 92       	push	r12
 396:	df 92       	push	r13
 398:	ef 92       	push	r14
 39a:	ff 92       	push	r15
 39c:	0f 93       	push	r16
 39e:	1f 93       	push	r17
 3a0:	df 93       	push	r29
 3a2:	cf 93       	push	r28
 3a4:	cd b7       	in	r28, 0x3d	; 61
 3a6:	de b7       	in	r29, 0x3e	; 62
 3a8:	60 97       	sbiw	r28, 0x10	; 16
 3aa:	0f b6       	in	r0, 0x3f	; 63
 3ac:	f8 94       	cli
 3ae:	de bf       	out	0x3e, r29	; 62
 3b0:	0f be       	out	0x3f, r0	; 63
 3b2:	cd bf       	out	0x3d, r28	; 61
 3b4:	9a 83       	std	Y+2, r25	; 0x02
 3b6:	89 83       	std	Y+1, r24	; 0x01
 3b8:	7c 83       	std	Y+4, r23	; 0x04
 3ba:	6b 83       	std	Y+3, r22	; 0x03
 3bc:	5e 83       	std	Y+6, r21	; 0x06
 3be:	4d 83       	std	Y+5, r20	; 0x05
 3c0:	38 87       	std	Y+8, r19	; 0x08
 3c2:	2f 83       	std	Y+7, r18	; 0x07
 3c4:	1a 87       	std	Y+10, r17	; 0x0a
 3c6:	09 87       	std	Y+9, r16	; 0x09
 3c8:	fc 86       	std	Y+12, r15	; 0x0c
 3ca:	eb 86       	std	Y+11, r14	; 0x0b
 3cc:	de 86       	std	Y+14, r13	; 0x0e
 3ce:	cd 86       	std	Y+13, r12	; 0x0d
 3d0:	af 86       	std	Y+15, r10	; 0x0f
 3d2:	88 8a       	std	Y+16, r8	; 0x10
 3d4:	89 81       	ldd	r24, Y+1	; 0x01
 3d6:	9a 81       	ldd	r25, Y+2	; 0x02
 3d8:	0e 94 00 00 	call	0	; 0x0 <_Z10store_charhP11ring_buffer>
 3dc:	e9 81       	ldd	r30, Y+1	; 0x01
 3de:	fa 81       	ldd	r31, Y+2	; 0x02
 3e0:	80 e0       	ldi	r24, 0x00	; 0
 3e2:	90 e0       	ldi	r25, 0x00	; 0
 3e4:	91 83       	std	Z+1, r25	; 0x01
 3e6:	80 83       	st	Z, r24
{
  _rx_buffer = rx_buffer;
 3e8:	e9 81       	ldd	r30, Y+1	; 0x01
 3ea:	fa 81       	ldd	r31, Y+2	; 0x02
 3ec:	8b 81       	ldd	r24, Y+3	; 0x03
 3ee:	9c 81       	ldd	r25, Y+4	; 0x04
 3f0:	93 83       	std	Z+3, r25	; 0x03
 3f2:	82 83       	std	Z+2, r24	; 0x02
  _ubrrh = ubrrh;
 3f4:	e9 81       	ldd	r30, Y+1	; 0x01
 3f6:	fa 81       	ldd	r31, Y+2	; 0x02
 3f8:	8d 81       	ldd	r24, Y+5	; 0x05
 3fa:	9e 81       	ldd	r25, Y+6	; 0x06
 3fc:	95 83       	std	Z+5, r25	; 0x05
 3fe:	84 83       	std	Z+4, r24	; 0x04
  _ubrrl = ubrrl;
 400:	e9 81       	ldd	r30, Y+1	; 0x01
 402:	fa 81       	ldd	r31, Y+2	; 0x02
 404:	8f 81       	ldd	r24, Y+7	; 0x07
 406:	98 85       	ldd	r25, Y+8	; 0x08
 408:	97 83       	std	Z+7, r25	; 0x07
 40a:	86 83       	std	Z+6, r24	; 0x06
  _ucsra = ucsra;
 40c:	e9 81       	ldd	r30, Y+1	; 0x01
 40e:	fa 81       	ldd	r31, Y+2	; 0x02
 410:	89 85       	ldd	r24, Y+9	; 0x09
 412:	9a 85       	ldd	r25, Y+10	; 0x0a
 414:	91 87       	std	Z+9, r25	; 0x09
 416:	80 87       	std	Z+8, r24	; 0x08
  _ucsrb = ucsrb;
 418:	e9 81       	ldd	r30, Y+1	; 0x01
 41a:	fa 81       	ldd	r31, Y+2	; 0x02
 41c:	8b 85       	ldd	r24, Y+11	; 0x0b
 41e:	9c 85       	ldd	r25, Y+12	; 0x0c
 420:	93 87       	std	Z+11, r25	; 0x0b
 422:	82 87       	std	Z+10, r24	; 0x0a
  _udr = udr;
 424:	e9 81       	ldd	r30, Y+1	; 0x01
 426:	fa 81       	ldd	r31, Y+2	; 0x02
 428:	8d 85       	ldd	r24, Y+13	; 0x0d
 42a:	9e 85       	ldd	r25, Y+14	; 0x0e
 42c:	95 87       	std	Z+13, r25	; 0x0d
 42e:	84 87       	std	Z+12, r24	; 0x0c
  _rxen = rxen;
 430:	e9 81       	ldd	r30, Y+1	; 0x01
 432:	fa 81       	ldd	r31, Y+2	; 0x02
 434:	8f 85       	ldd	r24, Y+15	; 0x0f
 436:	86 87       	std	Z+14, r24	; 0x0e
  _txen = txen;
 438:	e9 81       	ldd	r30, Y+1	; 0x01
 43a:	fa 81       	ldd	r31, Y+2	; 0x02
 43c:	88 89       	ldd	r24, Y+16	; 0x10
 43e:	87 87       	std	Z+15, r24	; 0x0f
  _rxcie = rxcie;
 440:	e9 81       	ldd	r30, Y+1	; 0x01
 442:	fa 81       	ldd	r31, Y+2	; 0x02
 444:	8e 8d       	ldd	r24, Y+30	; 0x1e
 446:	80 8b       	std	Z+16, r24	; 0x10
  _udre = udre;
 448:	e9 81       	ldd	r30, Y+1	; 0x01
 44a:	fa 81       	ldd	r31, Y+2	; 0x02
 44c:	8f 8d       	ldd	r24, Y+31	; 0x1f
 44e:	81 8b       	std	Z+17, r24	; 0x11
  _u2x = u2x;
 450:	e9 81       	ldd	r30, Y+1	; 0x01
 452:	fa 81       	ldd	r31, Y+2	; 0x02
 454:	88 a1       	ldd	r24, Y+32	; 0x20
 456:	82 8b       	std	Z+18, r24	; 0x12
}
 458:	60 96       	adiw	r28, 0x10	; 16
 45a:	0f b6       	in	r0, 0x3f	; 63
 45c:	f8 94       	cli
 45e:	de bf       	out	0x3e, r29	; 62
 460:	0f be       	out	0x3f, r0	; 63
 462:	cd bf       	out	0x3d, r28	; 61
 464:	cf 91       	pop	r28
 466:	df 91       	pop	r29
 468:	1f 91       	pop	r17
 46a:	0f 91       	pop	r16
 46c:	ff 90       	pop	r15
 46e:	ef 90       	pop	r14
 470:	df 90       	pop	r13
 472:	cf 90       	pop	r12
 474:	af 90       	pop	r10
 476:	8f 90       	pop	r8
 478:	08 95       	ret

0000047a <_ZN14HardwareSerial5beginEl>:

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(long baud)
 47a:	df 93       	push	r29
 47c:	cf 93       	push	r28
 47e:	cd b7       	in	r28, 0x3d	; 61
 480:	de b7       	in	r29, 0x3e	; 62
 482:	29 97       	sbiw	r28, 0x09	; 9
 484:	0f b6       	in	r0, 0x3f	; 63
 486:	f8 94       	cli
 488:	de bf       	out	0x3e, r29	; 62
 48a:	0f be       	out	0x3f, r0	; 63
 48c:	cd bf       	out	0x3d, r28	; 61
 48e:	9d 83       	std	Y+5, r25	; 0x05
 490:	8c 83       	std	Y+4, r24	; 0x04
 492:	4e 83       	std	Y+6, r20	; 0x06
 494:	5f 83       	std	Y+7, r21	; 0x07
 496:	68 87       	std	Y+8, r22	; 0x08
 498:	79 87       	std	Y+9, r23	; 0x09
{
  uint16_t baud_setting;
  bool use_u2x = true;
 49a:	81 e0       	ldi	r24, 0x01	; 1
 49c:	89 83       	std	Y+1, r24	; 0x01

#if F_CPU == 16000000UL
  // hardcoded exception for compatibility with the bootloader shipped
  // with the Duemilanove and previous boards and the firmware on the 8U2
  // on the Uno and Mega 2560.
  if (baud == 57600) {
 49e:	8e 81       	ldd	r24, Y+6	; 0x06
 4a0:	9f 81       	ldd	r25, Y+7	; 0x07
 4a2:	a8 85       	ldd	r26, Y+8	; 0x08
 4a4:	b9 85       	ldd	r27, Y+9	; 0x09
 4a6:	80 30       	cpi	r24, 0x00	; 0
 4a8:	21 ee       	ldi	r18, 0xE1	; 225
 4aa:	92 07       	cpc	r25, r18
 4ac:	20 e0       	ldi	r18, 0x00	; 0
 4ae:	a2 07       	cpc	r26, r18
 4b0:	20 e0       	ldi	r18, 0x00	; 0
 4b2:	b2 07       	cpc	r27, r18
 4b4:	01 f4       	brne	.+0      	; 0x4b6 <_ZN14HardwareSerial5beginEl+0x3c>
    use_u2x = false;
 4b6:	19 82       	std	Y+1, r1	; 0x01
  }
#endif
  
  if (use_u2x) {
 4b8:	89 81       	ldd	r24, Y+1	; 0x01
 4ba:	88 23       	and	r24, r24
 4bc:	01 f0       	breq	.+0      	; 0x4be <_ZN14HardwareSerial5beginEl+0x44>
    *_ucsra = 1 << _u2x;
 4be:	ec 81       	ldd	r30, Y+4	; 0x04
 4c0:	fd 81       	ldd	r31, Y+5	; 0x05
 4c2:	a0 85       	ldd	r26, Z+8	; 0x08
 4c4:	b1 85       	ldd	r27, Z+9	; 0x09
 4c6:	ec 81       	ldd	r30, Y+4	; 0x04
 4c8:	fd 81       	ldd	r31, Y+5	; 0x05
 4ca:	82 89       	ldd	r24, Z+18	; 0x12
 4cc:	28 2f       	mov	r18, r24
 4ce:	30 e0       	ldi	r19, 0x00	; 0
 4d0:	81 e0       	ldi	r24, 0x01	; 1
 4d2:	90 e0       	ldi	r25, 0x00	; 0
 4d4:	00 c0       	rjmp	.+0      	; 0x4d6 <_ZN14HardwareSerial5beginEl+0x5c>
 4d6:	88 0f       	add	r24, r24
 4d8:	99 1f       	adc	r25, r25
 4da:	2a 95       	dec	r18
 4dc:	02 f4       	brpl	.+0      	; 0x4de <_ZN14HardwareSerial5beginEl+0x64>
 4de:	8c 93       	st	X, r24
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
 4e0:	2e 81       	ldd	r18, Y+6	; 0x06
 4e2:	3f 81       	ldd	r19, Y+7	; 0x07
 4e4:	48 85       	ldd	r20, Y+8	; 0x08
 4e6:	59 85       	ldd	r21, Y+9	; 0x09
 4e8:	80 e0       	ldi	r24, 0x00	; 0
 4ea:	99 e0       	ldi	r25, 0x09	; 9
 4ec:	ad e3       	ldi	r26, 0x3D	; 61
 4ee:	b0 e0       	ldi	r27, 0x00	; 0
 4f0:	bc 01       	movw	r22, r24
 4f2:	cd 01       	movw	r24, r26
 4f4:	0e 94 00 00 	call	0	; 0x0 <_Z10store_charhP11ring_buffer>
 4f8:	da 01       	movw	r26, r20
 4fa:	c9 01       	movw	r24, r18
 4fc:	01 97       	sbiw	r24, 0x01	; 1
 4fe:	a1 09       	sbc	r26, r1
 500:	b1 09       	sbc	r27, r1
 502:	b6 95       	lsr	r27
 504:	a7 95       	ror	r26
 506:	97 95       	ror	r25
 508:	87 95       	ror	r24
 50a:	9b 83       	std	Y+3, r25	; 0x03
 50c:	8a 83       	std	Y+2, r24	; 0x02
 50e:	00 c0       	rjmp	.+0      	; 0x510 <_ZN14HardwareSerial5beginEl+0x96>
  } else {
    *_ucsra = 0;
 510:	ec 81       	ldd	r30, Y+4	; 0x04
 512:	fd 81       	ldd	r31, Y+5	; 0x05
 514:	00 84       	ldd	r0, Z+8	; 0x08
 516:	f1 85       	ldd	r31, Z+9	; 0x09
 518:	e0 2d       	mov	r30, r0
 51a:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
 51c:	2e 81       	ldd	r18, Y+6	; 0x06
 51e:	3f 81       	ldd	r19, Y+7	; 0x07
 520:	48 85       	ldd	r20, Y+8	; 0x08
 522:	59 85       	ldd	r21, Y+9	; 0x09
 524:	80 e8       	ldi	r24, 0x80	; 128
 526:	94 e8       	ldi	r25, 0x84	; 132
 528:	ae e1       	ldi	r26, 0x1E	; 30
 52a:	b0 e0       	ldi	r27, 0x00	; 0
 52c:	bc 01       	movw	r22, r24
 52e:	cd 01       	movw	r24, r26
 530:	0e 94 00 00 	call	0	; 0x0 <_Z10store_charhP11ring_buffer>
 534:	da 01       	movw	r26, r20
 536:	c9 01       	movw	r24, r18
 538:	01 97       	sbiw	r24, 0x01	; 1
 53a:	a1 09       	sbc	r26, r1
 53c:	b1 09       	sbc	r27, r1
 53e:	b6 95       	lsr	r27
 540:	a7 95       	ror	r26
 542:	97 95       	ror	r25
 544:	87 95       	ror	r24
 546:	9b 83       	std	Y+3, r25	; 0x03
 548:	8a 83       	std	Y+2, r24	; 0x02
  }

  // assign the baud_setting, a.k.a. ubbr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
 54a:	ec 81       	ldd	r30, Y+4	; 0x04
 54c:	fd 81       	ldd	r31, Y+5	; 0x05
 54e:	04 80       	ldd	r0, Z+4	; 0x04
 550:	f5 81       	ldd	r31, Z+5	; 0x05
 552:	e0 2d       	mov	r30, r0
 554:	8a 81       	ldd	r24, Y+2	; 0x02
 556:	9b 81       	ldd	r25, Y+3	; 0x03
 558:	89 2f       	mov	r24, r25
 55a:	99 27       	eor	r25, r25
 55c:	80 83       	st	Z, r24
  *_ubrrl = baud_setting;
 55e:	ec 81       	ldd	r30, Y+4	; 0x04
 560:	fd 81       	ldd	r31, Y+5	; 0x05
 562:	06 80       	ldd	r0, Z+6	; 0x06
 564:	f7 81       	ldd	r31, Z+7	; 0x07
 566:	e0 2d       	mov	r30, r0
 568:	8a 81       	ldd	r24, Y+2	; 0x02
 56a:	80 83       	st	Z, r24

  sbi(*_ucsrb, _rxen);
 56c:	ec 81       	ldd	r30, Y+4	; 0x04
 56e:	fd 81       	ldd	r31, Y+5	; 0x05
 570:	a2 85       	ldd	r26, Z+10	; 0x0a
 572:	b3 85       	ldd	r27, Z+11	; 0x0b
 574:	ec 81       	ldd	r30, Y+4	; 0x04
 576:	fd 81       	ldd	r31, Y+5	; 0x05
 578:	02 84       	ldd	r0, Z+10	; 0x0a
 57a:	f3 85       	ldd	r31, Z+11	; 0x0b
 57c:	e0 2d       	mov	r30, r0
 57e:	80 81       	ld	r24, Z
 580:	48 2f       	mov	r20, r24
 582:	ec 81       	ldd	r30, Y+4	; 0x04
 584:	fd 81       	ldd	r31, Y+5	; 0x05
 586:	86 85       	ldd	r24, Z+14	; 0x0e
 588:	28 2f       	mov	r18, r24
 58a:	30 e0       	ldi	r19, 0x00	; 0
 58c:	81 e0       	ldi	r24, 0x01	; 1
 58e:	90 e0       	ldi	r25, 0x00	; 0
 590:	00 c0       	rjmp	.+0      	; 0x592 <_ZN14HardwareSerial5beginEl+0x118>
 592:	88 0f       	add	r24, r24
 594:	99 1f       	adc	r25, r25
 596:	2a 95       	dec	r18
 598:	02 f4       	brpl	.+0      	; 0x59a <_ZN14HardwareSerial5beginEl+0x120>
 59a:	84 2b       	or	r24, r20
 59c:	8c 93       	st	X, r24
  sbi(*_ucsrb, _txen);
 59e:	ec 81       	ldd	r30, Y+4	; 0x04
 5a0:	fd 81       	ldd	r31, Y+5	; 0x05
 5a2:	a2 85       	ldd	r26, Z+10	; 0x0a
 5a4:	b3 85       	ldd	r27, Z+11	; 0x0b
 5a6:	ec 81       	ldd	r30, Y+4	; 0x04
 5a8:	fd 81       	ldd	r31, Y+5	; 0x05
 5aa:	02 84       	ldd	r0, Z+10	; 0x0a
 5ac:	f3 85       	ldd	r31, Z+11	; 0x0b
 5ae:	e0 2d       	mov	r30, r0
 5b0:	80 81       	ld	r24, Z
 5b2:	48 2f       	mov	r20, r24
 5b4:	ec 81       	ldd	r30, Y+4	; 0x04
 5b6:	fd 81       	ldd	r31, Y+5	; 0x05
 5b8:	87 85       	ldd	r24, Z+15	; 0x0f
 5ba:	28 2f       	mov	r18, r24
 5bc:	30 e0       	ldi	r19, 0x00	; 0
 5be:	81 e0       	ldi	r24, 0x01	; 1
 5c0:	90 e0       	ldi	r25, 0x00	; 0
 5c2:	00 c0       	rjmp	.+0      	; 0x5c4 <_ZN14HardwareSerial5beginEl+0x14a>
 5c4:	88 0f       	add	r24, r24
 5c6:	99 1f       	adc	r25, r25
 5c8:	2a 95       	dec	r18
 5ca:	02 f4       	brpl	.+0      	; 0x5cc <_ZN14HardwareSerial5beginEl+0x152>
 5cc:	84 2b       	or	r24, r20
 5ce:	8c 93       	st	X, r24
  sbi(*_ucsrb, _rxcie);
 5d0:	ec 81       	ldd	r30, Y+4	; 0x04
 5d2:	fd 81       	ldd	r31, Y+5	; 0x05
 5d4:	a2 85       	ldd	r26, Z+10	; 0x0a
 5d6:	b3 85       	ldd	r27, Z+11	; 0x0b
 5d8:	ec 81       	ldd	r30, Y+4	; 0x04
 5da:	fd 81       	ldd	r31, Y+5	; 0x05
 5dc:	02 84       	ldd	r0, Z+10	; 0x0a
 5de:	f3 85       	ldd	r31, Z+11	; 0x0b
 5e0:	e0 2d       	mov	r30, r0
 5e2:	80 81       	ld	r24, Z
 5e4:	48 2f       	mov	r20, r24
 5e6:	ec 81       	ldd	r30, Y+4	; 0x04
 5e8:	fd 81       	ldd	r31, Y+5	; 0x05
 5ea:	80 89       	ldd	r24, Z+16	; 0x10
 5ec:	28 2f       	mov	r18, r24
 5ee:	30 e0       	ldi	r19, 0x00	; 0
 5f0:	81 e0       	ldi	r24, 0x01	; 1
 5f2:	90 e0       	ldi	r25, 0x00	; 0
 5f4:	02 2e       	mov	r0, r18
 5f6:	00 c0       	rjmp	.+0      	; 0x5f8 <_ZN14HardwareSerial5beginEl+0x17e>
 5f8:	88 0f       	add	r24, r24
 5fa:	99 1f       	adc	r25, r25
 5fc:	0a 94       	dec	r0
 5fe:	02 f4       	brpl	.+0      	; 0x600 <_ZN14HardwareSerial5beginEl+0x186>
 600:	84 2b       	or	r24, r20
 602:	8c 93       	st	X, r24
}
 604:	29 96       	adiw	r28, 0x09	; 9
 606:	0f b6       	in	r0, 0x3f	; 63
 608:	f8 94       	cli
 60a:	de bf       	out	0x3e, r29	; 62
 60c:	0f be       	out	0x3f, r0	; 63
 60e:	cd bf       	out	0x3d, r28	; 61
 610:	cf 91       	pop	r28
 612:	df 91       	pop	r29
 614:	08 95       	ret

00000616 <_ZN14HardwareSerial3endEv>:

void HardwareSerial::end()
 616:	df 93       	push	r29
 618:	cf 93       	push	r28
 61a:	0f 92       	push	r0
 61c:	0f 92       	push	r0
 61e:	cd b7       	in	r28, 0x3d	; 61
 620:	de b7       	in	r29, 0x3e	; 62
 622:	9a 83       	std	Y+2, r25	; 0x02
 624:	89 83       	std	Y+1, r24	; 0x01
{
  cbi(*_ucsrb, _rxen);
 626:	e9 81       	ldd	r30, Y+1	; 0x01
 628:	fa 81       	ldd	r31, Y+2	; 0x02
 62a:	a2 85       	ldd	r26, Z+10	; 0x0a
 62c:	b3 85       	ldd	r27, Z+11	; 0x0b
 62e:	e9 81       	ldd	r30, Y+1	; 0x01
 630:	fa 81       	ldd	r31, Y+2	; 0x02
 632:	02 84       	ldd	r0, Z+10	; 0x0a
 634:	f3 85       	ldd	r31, Z+11	; 0x0b
 636:	e0 2d       	mov	r30, r0
 638:	80 81       	ld	r24, Z
 63a:	48 2f       	mov	r20, r24
 63c:	e9 81       	ldd	r30, Y+1	; 0x01
 63e:	fa 81       	ldd	r31, Y+2	; 0x02
 640:	86 85       	ldd	r24, Z+14	; 0x0e
 642:	28 2f       	mov	r18, r24
 644:	30 e0       	ldi	r19, 0x00	; 0
 646:	81 e0       	ldi	r24, 0x01	; 1
 648:	90 e0       	ldi	r25, 0x00	; 0
 64a:	00 c0       	rjmp	.+0      	; 0x64c <_ZN14HardwareSerial3endEv+0x36>
 64c:	88 0f       	add	r24, r24
 64e:	99 1f       	adc	r25, r25
 650:	2a 95       	dec	r18
 652:	02 f4       	brpl	.+0      	; 0x654 <_ZN14HardwareSerial3endEv+0x3e>
 654:	80 95       	com	r24
 656:	84 23       	and	r24, r20
 658:	8c 93       	st	X, r24
  cbi(*_ucsrb, _txen);
 65a:	e9 81       	ldd	r30, Y+1	; 0x01
 65c:	fa 81       	ldd	r31, Y+2	; 0x02
 65e:	a2 85       	ldd	r26, Z+10	; 0x0a
 660:	b3 85       	ldd	r27, Z+11	; 0x0b
 662:	e9 81       	ldd	r30, Y+1	; 0x01
 664:	fa 81       	ldd	r31, Y+2	; 0x02
 666:	02 84       	ldd	r0, Z+10	; 0x0a
 668:	f3 85       	ldd	r31, Z+11	; 0x0b
 66a:	e0 2d       	mov	r30, r0
 66c:	80 81       	ld	r24, Z
 66e:	48 2f       	mov	r20, r24
 670:	e9 81       	ldd	r30, Y+1	; 0x01
 672:	fa 81       	ldd	r31, Y+2	; 0x02
 674:	87 85       	ldd	r24, Z+15	; 0x0f
 676:	28 2f       	mov	r18, r24
 678:	30 e0       	ldi	r19, 0x00	; 0
 67a:	81 e0       	ldi	r24, 0x01	; 1
 67c:	90 e0       	ldi	r25, 0x00	; 0
 67e:	00 c0       	rjmp	.+0      	; 0x680 <_ZN14HardwareSerial3endEv+0x6a>
 680:	88 0f       	add	r24, r24
 682:	99 1f       	adc	r25, r25
 684:	2a 95       	dec	r18
 686:	02 f4       	brpl	.+0      	; 0x688 <_ZN14HardwareSerial3endEv+0x72>
 688:	80 95       	com	r24
 68a:	84 23       	and	r24, r20
 68c:	8c 93       	st	X, r24
  cbi(*_ucsrb, _rxcie);  
 68e:	e9 81       	ldd	r30, Y+1	; 0x01
 690:	fa 81       	ldd	r31, Y+2	; 0x02
 692:	a2 85       	ldd	r26, Z+10	; 0x0a
 694:	b3 85       	ldd	r27, Z+11	; 0x0b
 696:	e9 81       	ldd	r30, Y+1	; 0x01
 698:	fa 81       	ldd	r31, Y+2	; 0x02
 69a:	02 84       	ldd	r0, Z+10	; 0x0a
 69c:	f3 85       	ldd	r31, Z+11	; 0x0b
 69e:	e0 2d       	mov	r30, r0
 6a0:	80 81       	ld	r24, Z
 6a2:	48 2f       	mov	r20, r24
 6a4:	e9 81       	ldd	r30, Y+1	; 0x01
 6a6:	fa 81       	ldd	r31, Y+2	; 0x02
 6a8:	80 89       	ldd	r24, Z+16	; 0x10
 6aa:	28 2f       	mov	r18, r24
 6ac:	30 e0       	ldi	r19, 0x00	; 0
 6ae:	81 e0       	ldi	r24, 0x01	; 1
 6b0:	90 e0       	ldi	r25, 0x00	; 0
 6b2:	02 2e       	mov	r0, r18
 6b4:	00 c0       	rjmp	.+0      	; 0x6b6 <_ZN14HardwareSerial3endEv+0xa0>
 6b6:	88 0f       	add	r24, r24
 6b8:	99 1f       	adc	r25, r25
 6ba:	0a 94       	dec	r0
 6bc:	02 f4       	brpl	.+0      	; 0x6be <_ZN14HardwareSerial3endEv+0xa8>
 6be:	80 95       	com	r24
 6c0:	84 23       	and	r24, r20
 6c2:	8c 93       	st	X, r24
}
 6c4:	0f 90       	pop	r0
 6c6:	0f 90       	pop	r0
 6c8:	cf 91       	pop	r28
 6ca:	df 91       	pop	r29
 6cc:	08 95       	ret

000006ce <_ZN14HardwareSerial9availableEv>:

int HardwareSerial::available(void)
 6ce:	df 93       	push	r29
 6d0:	cf 93       	push	r28
 6d2:	0f 92       	push	r0
 6d4:	0f 92       	push	r0
 6d6:	cd b7       	in	r28, 0x3d	; 61
 6d8:	de b7       	in	r29, 0x3e	; 62
 6da:	9a 83       	std	Y+2, r25	; 0x02
 6dc:	89 83       	std	Y+1, r24	; 0x01
{
  return (unsigned int)(RX_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % RX_BUFFER_SIZE;
 6de:	e9 81       	ldd	r30, Y+1	; 0x01
 6e0:	fa 81       	ldd	r31, Y+2	; 0x02
 6e2:	82 81       	ldd	r24, Z+2	; 0x02
 6e4:	93 81       	ldd	r25, Z+3	; 0x03
 6e6:	fc 01       	movw	r30, r24
 6e8:	e0 58       	subi	r30, 0x80	; 128
 6ea:	ff 4f       	sbci	r31, 0xFF	; 255
 6ec:	80 81       	ld	r24, Z
 6ee:	91 81       	ldd	r25, Z+1	; 0x01
 6f0:	9c 01       	movw	r18, r24
 6f2:	20 58       	subi	r18, 0x80	; 128
 6f4:	3f 4f       	sbci	r19, 0xFF	; 255
 6f6:	e9 81       	ldd	r30, Y+1	; 0x01
 6f8:	fa 81       	ldd	r31, Y+2	; 0x02
 6fa:	82 81       	ldd	r24, Z+2	; 0x02
 6fc:	93 81       	ldd	r25, Z+3	; 0x03
 6fe:	fc 01       	movw	r30, r24
 700:	ee 57       	subi	r30, 0x7E	; 126
 702:	ff 4f       	sbci	r31, 0xFF	; 255
 704:	80 81       	ld	r24, Z
 706:	91 81       	ldd	r25, Z+1	; 0x01
 708:	a9 01       	movw	r20, r18
 70a:	48 1b       	sub	r20, r24
 70c:	59 0b       	sbc	r21, r25
 70e:	ca 01       	movw	r24, r20
 710:	8f 77       	andi	r24, 0x7F	; 127
 712:	90 70       	andi	r25, 0x00	; 0
}
 714:	0f 90       	pop	r0
 716:	0f 90       	pop	r0
 718:	cf 91       	pop	r28
 71a:	df 91       	pop	r29
 71c:	08 95       	ret

0000071e <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
 71e:	df 93       	push	r29
 720:	cf 93       	push	r28
 722:	00 d0       	rcall	.+0      	; 0x724 <_ZN14HardwareSerial4peekEv+0x6>
 724:	0f 92       	push	r0
 726:	cd b7       	in	r28, 0x3d	; 61
 728:	de b7       	in	r29, 0x3e	; 62
 72a:	9a 83       	std	Y+2, r25	; 0x02
 72c:	89 83       	std	Y+1, r24	; 0x01
{
  if (_rx_buffer->head == _rx_buffer->tail) {
 72e:	e9 81       	ldd	r30, Y+1	; 0x01
 730:	fa 81       	ldd	r31, Y+2	; 0x02
 732:	82 81       	ldd	r24, Z+2	; 0x02
 734:	93 81       	ldd	r25, Z+3	; 0x03
 736:	fc 01       	movw	r30, r24
 738:	e0 58       	subi	r30, 0x80	; 128
 73a:	ff 4f       	sbci	r31, 0xFF	; 255
 73c:	20 81       	ld	r18, Z
 73e:	31 81       	ldd	r19, Z+1	; 0x01
 740:	e9 81       	ldd	r30, Y+1	; 0x01
 742:	fa 81       	ldd	r31, Y+2	; 0x02
 744:	82 81       	ldd	r24, Z+2	; 0x02
 746:	93 81       	ldd	r25, Z+3	; 0x03
 748:	fc 01       	movw	r30, r24
 74a:	ee 57       	subi	r30, 0x7E	; 126
 74c:	ff 4f       	sbci	r31, 0xFF	; 255
 74e:	80 81       	ld	r24, Z
 750:	91 81       	ldd	r25, Z+1	; 0x01
 752:	28 17       	cp	r18, r24
 754:	39 07       	cpc	r19, r25
 756:	01 f4       	brne	.+0      	; 0x758 <_ZN14HardwareSerial4peekEv+0x3a>
    return -1;
 758:	2f ef       	ldi	r18, 0xFF	; 255
 75a:	3f ef       	ldi	r19, 0xFF	; 255
 75c:	3c 83       	std	Y+4, r19	; 0x04
 75e:	2b 83       	std	Y+3, r18	; 0x03
 760:	00 c0       	rjmp	.+0      	; 0x762 <_ZN14HardwareSerial4peekEv+0x44>
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
 762:	e9 81       	ldd	r30, Y+1	; 0x01
 764:	fa 81       	ldd	r31, Y+2	; 0x02
 766:	22 81       	ldd	r18, Z+2	; 0x02
 768:	33 81       	ldd	r19, Z+3	; 0x03
 76a:	e9 81       	ldd	r30, Y+1	; 0x01
 76c:	fa 81       	ldd	r31, Y+2	; 0x02
 76e:	82 81       	ldd	r24, Z+2	; 0x02
 770:	93 81       	ldd	r25, Z+3	; 0x03
 772:	fc 01       	movw	r30, r24
 774:	ee 57       	subi	r30, 0x7E	; 126
 776:	ff 4f       	sbci	r31, 0xFF	; 255
 778:	80 81       	ld	r24, Z
 77a:	91 81       	ldd	r25, Z+1	; 0x01
 77c:	f9 01       	movw	r30, r18
 77e:	e8 0f       	add	r30, r24
 780:	f9 1f       	adc	r31, r25
 782:	80 81       	ld	r24, Z
 784:	28 2f       	mov	r18, r24
 786:	30 e0       	ldi	r19, 0x00	; 0
 788:	3c 83       	std	Y+4, r19	; 0x04
 78a:	2b 83       	std	Y+3, r18	; 0x03
 78c:	8b 81       	ldd	r24, Y+3	; 0x03
 78e:	9c 81       	ldd	r25, Y+4	; 0x04
  }
}
 790:	0f 90       	pop	r0
 792:	0f 90       	pop	r0
 794:	0f 90       	pop	r0
 796:	0f 90       	pop	r0
 798:	cf 91       	pop	r28
 79a:	df 91       	pop	r29
 79c:	08 95       	ret

0000079e <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
 79e:	df 93       	push	r29
 7a0:	cf 93       	push	r28
 7a2:	00 d0       	rcall	.+0      	; 0x7a4 <_ZN14HardwareSerial4readEv+0x6>
 7a4:	0f 92       	push	r0
 7a6:	0f 92       	push	r0
 7a8:	cd b7       	in	r28, 0x3d	; 61
 7aa:	de b7       	in	r29, 0x3e	; 62
 7ac:	9b 83       	std	Y+3, r25	; 0x03
 7ae:	8a 83       	std	Y+2, r24	; 0x02
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
 7b0:	ea 81       	ldd	r30, Y+2	; 0x02
 7b2:	fb 81       	ldd	r31, Y+3	; 0x03
 7b4:	82 81       	ldd	r24, Z+2	; 0x02
 7b6:	93 81       	ldd	r25, Z+3	; 0x03
 7b8:	fc 01       	movw	r30, r24
 7ba:	e0 58       	subi	r30, 0x80	; 128
 7bc:	ff 4f       	sbci	r31, 0xFF	; 255
 7be:	20 81       	ld	r18, Z
 7c0:	31 81       	ldd	r19, Z+1	; 0x01
 7c2:	ea 81       	ldd	r30, Y+2	; 0x02
 7c4:	fb 81       	ldd	r31, Y+3	; 0x03
 7c6:	82 81       	ldd	r24, Z+2	; 0x02
 7c8:	93 81       	ldd	r25, Z+3	; 0x03
 7ca:	fc 01       	movw	r30, r24
 7cc:	ee 57       	subi	r30, 0x7E	; 126
 7ce:	ff 4f       	sbci	r31, 0xFF	; 255
 7d0:	80 81       	ld	r24, Z
 7d2:	91 81       	ldd	r25, Z+1	; 0x01
 7d4:	28 17       	cp	r18, r24
 7d6:	39 07       	cpc	r19, r25
 7d8:	01 f4       	brne	.+0      	; 0x7da <_ZN14HardwareSerial4readEv+0x3c>
    return -1;
 7da:	2f ef       	ldi	r18, 0xFF	; 255
 7dc:	3f ef       	ldi	r19, 0xFF	; 255
 7de:	3d 83       	std	Y+5, r19	; 0x05
 7e0:	2c 83       	std	Y+4, r18	; 0x04
 7e2:	00 c0       	rjmp	.+0      	; 0x7e4 <_ZN14HardwareSerial4readEv+0x46>
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
 7e4:	ea 81       	ldd	r30, Y+2	; 0x02
 7e6:	fb 81       	ldd	r31, Y+3	; 0x03
 7e8:	22 81       	ldd	r18, Z+2	; 0x02
 7ea:	33 81       	ldd	r19, Z+3	; 0x03
 7ec:	ea 81       	ldd	r30, Y+2	; 0x02
 7ee:	fb 81       	ldd	r31, Y+3	; 0x03
 7f0:	82 81       	ldd	r24, Z+2	; 0x02
 7f2:	93 81       	ldd	r25, Z+3	; 0x03
 7f4:	fc 01       	movw	r30, r24
 7f6:	ee 57       	subi	r30, 0x7E	; 126
 7f8:	ff 4f       	sbci	r31, 0xFF	; 255
 7fa:	80 81       	ld	r24, Z
 7fc:	91 81       	ldd	r25, Z+1	; 0x01
 7fe:	f9 01       	movw	r30, r18
 800:	e8 0f       	add	r30, r24
 802:	f9 1f       	adc	r31, r25
 804:	80 81       	ld	r24, Z
 806:	89 83       	std	Y+1, r24	; 0x01
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % RX_BUFFER_SIZE;
 808:	ea 81       	ldd	r30, Y+2	; 0x02
 80a:	fb 81       	ldd	r31, Y+3	; 0x03
 80c:	22 81       	ldd	r18, Z+2	; 0x02
 80e:	33 81       	ldd	r19, Z+3	; 0x03
 810:	ea 81       	ldd	r30, Y+2	; 0x02
 812:	fb 81       	ldd	r31, Y+3	; 0x03
 814:	82 81       	ldd	r24, Z+2	; 0x02
 816:	93 81       	ldd	r25, Z+3	; 0x03
 818:	fc 01       	movw	r30, r24
 81a:	ee 57       	subi	r30, 0x7E	; 126
 81c:	ff 4f       	sbci	r31, 0xFF	; 255
 81e:	80 81       	ld	r24, Z
 820:	91 81       	ldd	r25, Z+1	; 0x01
 822:	01 96       	adiw	r24, 0x01	; 1
 824:	8f 77       	andi	r24, 0x7F	; 127
 826:	90 70       	andi	r25, 0x00	; 0
 828:	f9 01       	movw	r30, r18
 82a:	ee 57       	subi	r30, 0x7E	; 126
 82c:	ff 4f       	sbci	r31, 0xFF	; 255
 82e:	91 83       	std	Z+1, r25	; 0x01
 830:	80 83       	st	Z, r24
    return c;
 832:	89 81       	ldd	r24, Y+1	; 0x01
 834:	28 2f       	mov	r18, r24
 836:	30 e0       	ldi	r19, 0x00	; 0
 838:	3d 83       	std	Y+5, r19	; 0x05
 83a:	2c 83       	std	Y+4, r18	; 0x04
 83c:	8c 81       	ldd	r24, Y+4	; 0x04
 83e:	9d 81       	ldd	r25, Y+5	; 0x05
  }
}
 840:	0f 90       	pop	r0
 842:	0f 90       	pop	r0
 844:	0f 90       	pop	r0
 846:	0f 90       	pop	r0
 848:	0f 90       	pop	r0
 84a:	cf 91       	pop	r28
 84c:	df 91       	pop	r29
 84e:	08 95       	ret

00000850 <_ZN14HardwareSerial5flushEv>:

void HardwareSerial::flush()
 850:	df 93       	push	r29
 852:	cf 93       	push	r28
 854:	0f 92       	push	r0
 856:	0f 92       	push	r0
 858:	cd b7       	in	r28, 0x3d	; 61
 85a:	de b7       	in	r29, 0x3e	; 62
 85c:	9a 83       	std	Y+2, r25	; 0x02
 85e:	89 83       	std	Y+1, r24	; 0x01
  // don't reverse this or there may be problems if the RX interrupt
  // occurs after reading the value of rx_buffer_head but before writing
  // the value to rx_buffer_tail; the previous value of rx_buffer_head
  // may be written to rx_buffer_tail, making it appear as if the buffer
  // were full, not empty.
  _rx_buffer->head = _rx_buffer->tail;
 860:	e9 81       	ldd	r30, Y+1	; 0x01
 862:	fa 81       	ldd	r31, Y+2	; 0x02
 864:	22 81       	ldd	r18, Z+2	; 0x02
 866:	33 81       	ldd	r19, Z+3	; 0x03
 868:	e9 81       	ldd	r30, Y+1	; 0x01
 86a:	fa 81       	ldd	r31, Y+2	; 0x02
 86c:	82 81       	ldd	r24, Z+2	; 0x02
 86e:	93 81       	ldd	r25, Z+3	; 0x03
 870:	fc 01       	movw	r30, r24
 872:	ee 57       	subi	r30, 0x7E	; 126
 874:	ff 4f       	sbci	r31, 0xFF	; 255
 876:	80 81       	ld	r24, Z
 878:	91 81       	ldd	r25, Z+1	; 0x01
 87a:	f9 01       	movw	r30, r18
 87c:	e0 58       	subi	r30, 0x80	; 128
 87e:	ff 4f       	sbci	r31, 0xFF	; 255
 880:	91 83       	std	Z+1, r25	; 0x01
 882:	80 83       	st	Z, r24
}
 884:	0f 90       	pop	r0
 886:	0f 90       	pop	r0
 888:	cf 91       	pop	r28
 88a:	df 91       	pop	r29
 88c:	08 95       	ret

0000088e <_ZN14HardwareSerial5writeEh>:

void HardwareSerial::write(uint8_t c)
 88e:	df 93       	push	r29
 890:	cf 93       	push	r28
 892:	00 d0       	rcall	.+0      	; 0x894 <_ZN14HardwareSerial5writeEh+0x6>
 894:	cd b7       	in	r28, 0x3d	; 61
 896:	de b7       	in	r29, 0x3e	; 62
 898:	9a 83       	std	Y+2, r25	; 0x02
 89a:	89 83       	std	Y+1, r24	; 0x01
 89c:	6b 83       	std	Y+3, r22	; 0x03
{
  while (!((*_ucsra) & (1 << _udre)))
 89e:	e9 81       	ldd	r30, Y+1	; 0x01
 8a0:	fa 81       	ldd	r31, Y+2	; 0x02
 8a2:	00 84       	ldd	r0, Z+8	; 0x08
 8a4:	f1 85       	ldd	r31, Z+9	; 0x09
 8a6:	e0 2d       	mov	r30, r0
 8a8:	80 81       	ld	r24, Z
 8aa:	28 2f       	mov	r18, r24
 8ac:	30 e0       	ldi	r19, 0x00	; 0
 8ae:	e9 81       	ldd	r30, Y+1	; 0x01
 8b0:	fa 81       	ldd	r31, Y+2	; 0x02
 8b2:	81 89       	ldd	r24, Z+17	; 0x11
 8b4:	88 2f       	mov	r24, r24
 8b6:	90 e0       	ldi	r25, 0x00	; 0
 8b8:	a9 01       	movw	r20, r18
 8ba:	00 c0       	rjmp	.+0      	; 0x8bc <_ZN14HardwareSerial5writeEh+0x2e>
 8bc:	55 95       	asr	r21
 8be:	47 95       	ror	r20
 8c0:	8a 95       	dec	r24
 8c2:	02 f4       	brpl	.+0      	; 0x8c4 <_ZN14HardwareSerial5writeEh+0x36>
 8c4:	ca 01       	movw	r24, r20
 8c6:	81 70       	andi	r24, 0x01	; 1
 8c8:	90 70       	andi	r25, 0x00	; 0
 8ca:	98 2f       	mov	r25, r24
 8cc:	81 e0       	ldi	r24, 0x01	; 1
 8ce:	89 27       	eor	r24, r25
 8d0:	88 23       	and	r24, r24
 8d2:	01 f4       	brne	.+0      	; 0x8d4 <_ZN14HardwareSerial5writeEh+0x46>
    ;

  *_udr = c;
 8d4:	e9 81       	ldd	r30, Y+1	; 0x01
 8d6:	fa 81       	ldd	r31, Y+2	; 0x02
 8d8:	04 84       	ldd	r0, Z+12	; 0x0c
 8da:	f5 85       	ldd	r31, Z+13	; 0x0d
 8dc:	e0 2d       	mov	r30, r0
 8de:	8b 81       	ldd	r24, Y+3	; 0x03
 8e0:	80 83       	st	Z, r24
}
 8e2:	0f 90       	pop	r0
 8e4:	0f 90       	pop	r0
 8e6:	0f 90       	pop	r0
 8e8:	cf 91       	pop	r28
 8ea:	df 91       	pop	r29
 8ec:	08 95       	ret

000008ee <_Z41__static_initialization_and_destruction_0ii>:
#endif
#if defined(UBRR2H)
  HardwareSerial Serial2(&rx_buffer2, &UBRR2H, &UBRR2L, &UCSR2A, &UCSR2B, &UDR2, RXEN2, TXEN2, RXCIE2, UDRE2, U2X2);
#endif
#if defined(UBRR3H)
  HardwareSerial Serial3(&rx_buffer3, &UBRR3H, &UBRR3L, &UCSR3A, &UCSR3B, &UDR3, RXEN3, TXEN3, RXCIE3, UDRE3, U2X3);
 8ee:	8f 92       	push	r8
 8f0:	af 92       	push	r10
 8f2:	cf 92       	push	r12
 8f4:	df 92       	push	r13
 8f6:	ef 92       	push	r14
 8f8:	ff 92       	push	r15
 8fa:	0f 93       	push	r16
 8fc:	1f 93       	push	r17
 8fe:	df 93       	push	r29
 900:	cf 93       	push	r28
 902:	00 d0       	rcall	.+0      	; 0x904 <_Z41__static_initialization_and_destruction_0ii+0x16>
 904:	0f 92       	push	r0
 906:	cd b7       	in	r28, 0x3d	; 61
 908:	de b7       	in	r29, 0x3e	; 62
 90a:	9a 83       	std	Y+2, r25	; 0x02
 90c:	89 83       	std	Y+1, r24	; 0x01
 90e:	7c 83       	std	Y+4, r23	; 0x04
 910:	6b 83       	std	Y+3, r22	; 0x03
 912:	89 81       	ldd	r24, Y+1	; 0x01
 914:	9a 81       	ldd	r25, Y+2	; 0x02
 916:	81 30       	cpi	r24, 0x01	; 1
 918:	91 05       	cpc	r25, r1
 91a:	01 f0       	breq	.+0      	; 0x91c <_Z41__static_initialization_and_destruction_0ii+0x2e>
 91c:	00 c0       	rjmp	.+0      	; 0x91e <_Z41__static_initialization_and_destruction_0ii+0x30>
 91e:	8b 81       	ldd	r24, Y+3	; 0x03
 920:	9c 81       	ldd	r25, Y+4	; 0x04
 922:	2f ef       	ldi	r18, 0xFF	; 255
 924:	8f 3f       	cpi	r24, 0xFF	; 255
 926:	92 07       	cpc	r25, r18
 928:	01 f0       	breq	.+0      	; 0x92a <_Z41__static_initialization_and_destruction_0ii+0x3c>
 92a:	00 c0       	rjmp	.+0      	; 0x92c <_Z41__static_initialization_and_destruction_0ii+0x3e>
// Preinstantiate Objects //////////////////////////////////////////////////////

#if defined(UBRRH) && defined(UBRRL)
  HardwareSerial Serial(&rx_buffer, &UBRRH, &UBRRL, &UCSRA, &UCSRB, &UDR, RXEN, TXEN, RXCIE, UDRE, U2X);
#elif defined(UBRR0H) && defined(UBRR0L)
  HardwareSerial Serial(&rx_buffer, &UBRR0H, &UBRR0L, &UCSR0A, &UCSR0B, &UDR0, RXEN0, TXEN0, RXCIE0, UDRE0, U2X0);
 92c:	00 d0       	rcall	.+0      	; 0x92e <_Z41__static_initialization_and_destruction_0ii+0x40>
 92e:	ed b7       	in	r30, 0x3d	; 61
 930:	fe b7       	in	r31, 0x3e	; 62
 932:	31 96       	adiw	r30, 0x01	; 1
 934:	20 e0       	ldi	r18, 0x00	; 0
 936:	30 e0       	ldi	r19, 0x00	; 0
 938:	40 e0       	ldi	r20, 0x00	; 0
 93a:	50 e0       	ldi	r21, 0x00	; 0
 93c:	87 e0       	ldi	r24, 0x07	; 7
 93e:	80 83       	st	Z, r24
 940:	85 e0       	ldi	r24, 0x05	; 5
 942:	81 83       	std	Z+1, r24	; 0x01
 944:	81 e0       	ldi	r24, 0x01	; 1
 946:	82 83       	std	Z+2, r24	; 0x02
 948:	c9 01       	movw	r24, r18
 94a:	ba 01       	movw	r22, r20
 94c:	45 ec       	ldi	r20, 0xC5	; 197
 94e:	50 e0       	ldi	r21, 0x00	; 0
 950:	24 ec       	ldi	r18, 0xC4	; 196
 952:	30 e0       	ldi	r19, 0x00	; 0
 954:	00 ec       	ldi	r16, 0xC0	; 192
 956:	10 e0       	ldi	r17, 0x00	; 0
 958:	0f 2e       	mov	r0, r31
 95a:	f1 ec       	ldi	r31, 0xC1	; 193
 95c:	ef 2e       	mov	r14, r31
 95e:	ff 24       	eor	r15, r15
 960:	f0 2d       	mov	r31, r0
 962:	0f 2e       	mov	r0, r31
 964:	f6 ec       	ldi	r31, 0xC6	; 198
 966:	cf 2e       	mov	r12, r31
 968:	dd 24       	eor	r13, r13
 96a:	f0 2d       	mov	r31, r0
 96c:	aa 24       	eor	r10, r10
 96e:	68 94       	set
 970:	a2 f8       	bld	r10, 2
 972:	0f 2e       	mov	r0, r31
 974:	f3 e0       	ldi	r31, 0x03	; 3
 976:	8f 2e       	mov	r8, r31
 978:	f0 2d       	mov	r31, r0
 97a:	0e 94 00 00 	call	0	; 0x0 <_Z10store_charhP11ring_buffer>
 97e:	0f 90       	pop	r0
 980:	0f 90       	pop	r0
 982:	0f 90       	pop	r0
#else
  #error no serial port defined  (port 0)
#endif

#if defined(UBRR1H)
  HardwareSerial Serial1(&rx_buffer1, &UBRR1H, &UBRR1L, &UCSR1A, &UCSR1B, &UDR1, RXEN1, TXEN1, RXCIE1, UDRE1, U2X1);
 984:	00 d0       	rcall	.+0      	; 0x986 <_Z41__static_initialization_and_destruction_0ii+0x98>
 986:	ed b7       	in	r30, 0x3d	; 61
 988:	fe b7       	in	r31, 0x3e	; 62
 98a:	31 96       	adiw	r30, 0x01	; 1
 98c:	20 e0       	ldi	r18, 0x00	; 0
 98e:	30 e0       	ldi	r19, 0x00	; 0
 990:	40 e0       	ldi	r20, 0x00	; 0
 992:	50 e0       	ldi	r21, 0x00	; 0
 994:	87 e0       	ldi	r24, 0x07	; 7
 996:	80 83       	st	Z, r24
 998:	85 e0       	ldi	r24, 0x05	; 5
 99a:	81 83       	std	Z+1, r24	; 0x01
 99c:	81 e0       	ldi	r24, 0x01	; 1
 99e:	82 83       	std	Z+2, r24	; 0x02
 9a0:	c9 01       	movw	r24, r18
 9a2:	ba 01       	movw	r22, r20
 9a4:	4d ec       	ldi	r20, 0xCD	; 205
 9a6:	50 e0       	ldi	r21, 0x00	; 0
 9a8:	2c ec       	ldi	r18, 0xCC	; 204
 9aa:	30 e0       	ldi	r19, 0x00	; 0
 9ac:	08 ec       	ldi	r16, 0xC8	; 200
 9ae:	10 e0       	ldi	r17, 0x00	; 0
 9b0:	0f 2e       	mov	r0, r31
 9b2:	f9 ec       	ldi	r31, 0xC9	; 201
 9b4:	ef 2e       	mov	r14, r31
 9b6:	ff 24       	eor	r15, r15
 9b8:	f0 2d       	mov	r31, r0
 9ba:	0f 2e       	mov	r0, r31
 9bc:	fe ec       	ldi	r31, 0xCE	; 206
 9be:	cf 2e       	mov	r12, r31
 9c0:	dd 24       	eor	r13, r13
 9c2:	f0 2d       	mov	r31, r0
 9c4:	aa 24       	eor	r10, r10
 9c6:	68 94       	set
 9c8:	a2 f8       	bld	r10, 2
 9ca:	0f 2e       	mov	r0, r31
 9cc:	f3 e0       	ldi	r31, 0x03	; 3
 9ce:	8f 2e       	mov	r8, r31
 9d0:	f0 2d       	mov	r31, r0
 9d2:	0e 94 00 00 	call	0	; 0x0 <_Z10store_charhP11ring_buffer>
 9d6:	0f 90       	pop	r0
 9d8:	0f 90       	pop	r0
 9da:	0f 90       	pop	r0
#endif
#if defined(UBRR2H)
  HardwareSerial Serial2(&rx_buffer2, &UBRR2H, &UBRR2L, &UCSR2A, &UCSR2B, &UDR2, RXEN2, TXEN2, RXCIE2, UDRE2, U2X2);
 9dc:	00 d0       	rcall	.+0      	; 0x9de <_Z41__static_initialization_and_destruction_0ii+0xf0>
 9de:	ed b7       	in	r30, 0x3d	; 61
 9e0:	fe b7       	in	r31, 0x3e	; 62
 9e2:	31 96       	adiw	r30, 0x01	; 1
 9e4:	20 e0       	ldi	r18, 0x00	; 0
 9e6:	30 e0       	ldi	r19, 0x00	; 0
 9e8:	40 e0       	ldi	r20, 0x00	; 0
 9ea:	50 e0       	ldi	r21, 0x00	; 0
 9ec:	87 e0       	ldi	r24, 0x07	; 7
 9ee:	80 83       	st	Z, r24
 9f0:	85 e0       	ldi	r24, 0x05	; 5
 9f2:	81 83       	std	Z+1, r24	; 0x01
 9f4:	81 e0       	ldi	r24, 0x01	; 1
 9f6:	82 83       	std	Z+2, r24	; 0x02
 9f8:	c9 01       	movw	r24, r18
 9fa:	ba 01       	movw	r22, r20
 9fc:	45 ed       	ldi	r20, 0xD5	; 213
 9fe:	50 e0       	ldi	r21, 0x00	; 0
 a00:	24 ed       	ldi	r18, 0xD4	; 212
 a02:	30 e0       	ldi	r19, 0x00	; 0
 a04:	00 ed       	ldi	r16, 0xD0	; 208
 a06:	10 e0       	ldi	r17, 0x00	; 0
 a08:	0f 2e       	mov	r0, r31
 a0a:	f1 ed       	ldi	r31, 0xD1	; 209
 a0c:	ef 2e       	mov	r14, r31
 a0e:	ff 24       	eor	r15, r15
 a10:	f0 2d       	mov	r31, r0
 a12:	0f 2e       	mov	r0, r31
 a14:	f6 ed       	ldi	r31, 0xD6	; 214
 a16:	cf 2e       	mov	r12, r31
 a18:	dd 24       	eor	r13, r13
 a1a:	f0 2d       	mov	r31, r0
 a1c:	aa 24       	eor	r10, r10
 a1e:	68 94       	set
 a20:	a2 f8       	bld	r10, 2
 a22:	0f 2e       	mov	r0, r31
 a24:	f3 e0       	ldi	r31, 0x03	; 3
 a26:	8f 2e       	mov	r8, r31
 a28:	f0 2d       	mov	r31, r0
 a2a:	0e 94 00 00 	call	0	; 0x0 <_Z10store_charhP11ring_buffer>
 a2e:	0f 90       	pop	r0
 a30:	0f 90       	pop	r0
 a32:	0f 90       	pop	r0
#endif
#if defined(UBRR3H)
  HardwareSerial Serial3(&rx_buffer3, &UBRR3H, &UBRR3L, &UCSR3A, &UCSR3B, &UDR3, RXEN3, TXEN3, RXCIE3, UDRE3, U2X3);
 a34:	00 d0       	rcall	.+0      	; 0xa36 <_Z41__static_initialization_and_destruction_0ii+0x148>
 a36:	ed b7       	in	r30, 0x3d	; 61
 a38:	fe b7       	in	r31, 0x3e	; 62
 a3a:	31 96       	adiw	r30, 0x01	; 1
 a3c:	20 e0       	ldi	r18, 0x00	; 0
 a3e:	30 e0       	ldi	r19, 0x00	; 0
 a40:	40 e0       	ldi	r20, 0x00	; 0
 a42:	50 e0       	ldi	r21, 0x00	; 0
 a44:	87 e0       	ldi	r24, 0x07	; 7
 a46:	80 83       	st	Z, r24
 a48:	85 e0       	ldi	r24, 0x05	; 5
 a4a:	81 83       	std	Z+1, r24	; 0x01
 a4c:	81 e0       	ldi	r24, 0x01	; 1
 a4e:	82 83       	std	Z+2, r24	; 0x02
 a50:	c9 01       	movw	r24, r18
 a52:	ba 01       	movw	r22, r20
 a54:	45 e3       	ldi	r20, 0x35	; 53
 a56:	51 e0       	ldi	r21, 0x01	; 1
 a58:	24 e3       	ldi	r18, 0x34	; 52
 a5a:	31 e0       	ldi	r19, 0x01	; 1
 a5c:	00 e3       	ldi	r16, 0x30	; 48
 a5e:	11 e0       	ldi	r17, 0x01	; 1
 a60:	0f 2e       	mov	r0, r31
 a62:	f1 e3       	ldi	r31, 0x31	; 49
 a64:	ef 2e       	mov	r14, r31
 a66:	f1 e0       	ldi	r31, 0x01	; 1
 a68:	ff 2e       	mov	r15, r31
 a6a:	f0 2d       	mov	r31, r0
 a6c:	0f 2e       	mov	r0, r31
 a6e:	f6 e3       	ldi	r31, 0x36	; 54
 a70:	cf 2e       	mov	r12, r31
 a72:	f1 e0       	ldi	r31, 0x01	; 1
 a74:	df 2e       	mov	r13, r31
 a76:	f0 2d       	mov	r31, r0
 a78:	aa 24       	eor	r10, r10
 a7a:	68 94       	set
 a7c:	a2 f8       	bld	r10, 2
 a7e:	0f 2e       	mov	r0, r31
 a80:	f3 e0       	ldi	r31, 0x03	; 3
 a82:	8f 2e       	mov	r8, r31
 a84:	f0 2d       	mov	r31, r0
 a86:	0e 94 00 00 	call	0	; 0x0 <_Z10store_charhP11ring_buffer>
 a8a:	0f 90       	pop	r0
 a8c:	0f 90       	pop	r0
 a8e:	0f 90       	pop	r0
 a90:	0f 90       	pop	r0
 a92:	0f 90       	pop	r0
 a94:	0f 90       	pop	r0
 a96:	0f 90       	pop	r0
 a98:	cf 91       	pop	r28
 a9a:	df 91       	pop	r29
 a9c:	1f 91       	pop	r17
 a9e:	0f 91       	pop	r16
 aa0:	ff 90       	pop	r15
 aa2:	ef 90       	pop	r14
 aa4:	df 90       	pop	r13
 aa6:	cf 90       	pop	r12
 aa8:	af 90       	pop	r10
 aaa:	8f 90       	pop	r8
 aac:	08 95       	ret

00000aae <_GLOBAL__I_rx_buffer>:
 aae:	df 93       	push	r29
 ab0:	cf 93       	push	r28
 ab2:	cd b7       	in	r28, 0x3d	; 61
 ab4:	de b7       	in	r29, 0x3e	; 62
 ab6:	81 e0       	ldi	r24, 0x01	; 1
 ab8:	90 e0       	ldi	r25, 0x00	; 0
 aba:	6f ef       	ldi	r22, 0xFF	; 255
 abc:	7f ef       	ldi	r23, 0xFF	; 255
 abe:	0e 94 00 00 	call	0	; 0x0 <_Z10store_charhP11ring_buffer>
 ac2:	cf 91       	pop	r28
 ac4:	df 91       	pop	r29
 ac6:	08 95       	ret

Print.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a76  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  1 .data         0000000c  00000000  00000000  00000aaa  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
  2 .bss          00000000  00000000  00000000  00000ab6  2**0
                  ALLOC
  3 .stab         00000e64  00000000  00000000  00000ab8  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00001049  00000000  00000000  0000191c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_ZNK6String6lengthEv>:
    int	indexOf( const String &str, unsigned int fromIndex ) const;
    int	lastIndexOf( char ch ) const;
    int	lastIndexOf( char ch, unsigned int fromIndex ) const;
    int	lastIndexOf( const String &str ) const;
    int	lastIndexOf( const String &str, unsigned int fromIndex ) const;
    const unsigned int length( ) const { return _length; }
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	0f 92       	push	r0
   6:	0f 92       	push	r0
   8:	cd b7       	in	r28, 0x3d	; 61
   a:	de b7       	in	r29, 0x3e	; 62
   c:	9a 83       	std	Y+2, r25	; 0x02
   e:	89 83       	std	Y+1, r24	; 0x01
  10:	e9 81       	ldd	r30, Y+1	; 0x01
  12:	fa 81       	ldd	r31, Y+2	; 0x02
  14:	84 81       	ldd	r24, Z+4	; 0x04
  16:	95 81       	ldd	r25, Z+5	; 0x05
  18:	0f 90       	pop	r0
  1a:	0f 90       	pop	r0
  1c:	cf 91       	pop	r28
  1e:	df 91       	pop	r29
  20:	08 95       	ret

00000022 <_ZN5Print5writeEPKc>:
#include "Print.h"

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
void Print::write(const char *str)
  22:	df 93       	push	r29
  24:	cf 93       	push	r28
  26:	00 d0       	rcall	.+0      	; 0x28 <_ZN5Print5writeEPKc+0x6>
  28:	0f 92       	push	r0
  2a:	cd b7       	in	r28, 0x3d	; 61
  2c:	de b7       	in	r29, 0x3e	; 62
  2e:	9a 83       	std	Y+2, r25	; 0x02
  30:	89 83       	std	Y+1, r24	; 0x01
  32:	7c 83       	std	Y+4, r23	; 0x04
  34:	6b 83       	std	Y+3, r22	; 0x03
  36:	00 c0       	rjmp	.+0      	; 0x38 <_ZN5Print5writeEPKc+0x16>
{
  while (*str)
    write(*str++);
  38:	e9 81       	ldd	r30, Y+1	; 0x01
  3a:	fa 81       	ldd	r31, Y+2	; 0x02
  3c:	01 90       	ld	r0, Z+
  3e:	f0 81       	ld	r31, Z
  40:	e0 2d       	mov	r30, r0
  42:	20 81       	ld	r18, Z
  44:	31 81       	ldd	r19, Z+1	; 0x01
  46:	eb 81       	ldd	r30, Y+3	; 0x03
  48:	fc 81       	ldd	r31, Y+4	; 0x04
  4a:	40 81       	ld	r20, Z
  4c:	8b 81       	ldd	r24, Y+3	; 0x03
  4e:	9c 81       	ldd	r25, Y+4	; 0x04
  50:	01 96       	adiw	r24, 0x01	; 1
  52:	9c 83       	std	Y+4, r25	; 0x04
  54:	8b 83       	std	Y+3, r24	; 0x03
  56:	89 81       	ldd	r24, Y+1	; 0x01
  58:	9a 81       	ldd	r25, Y+2	; 0x02
  5a:	64 2f       	mov	r22, r20
  5c:	f9 01       	movw	r30, r18
  5e:	19 95       	eicall
// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
void Print::write(const char *str)
{
  while (*str)
  60:	eb 81       	ldd	r30, Y+3	; 0x03
  62:	fc 81       	ldd	r31, Y+4	; 0x04
  64:	80 81       	ld	r24, Z
  66:	88 23       	and	r24, r24
  68:	01 f4       	brne	.+0      	; 0x6a <_ZN5Print5writeEPKc+0x48>
    write(*str++);
}
  6a:	0f 90       	pop	r0
  6c:	0f 90       	pop	r0
  6e:	0f 90       	pop	r0
  70:	0f 90       	pop	r0
  72:	cf 91       	pop	r28
  74:	df 91       	pop	r29
  76:	08 95       	ret

00000078 <_ZN5Print5writeEPKhj>:

/* default implementation: may be overridden */
void Print::write(const uint8_t *buffer, size_t size)
  78:	df 93       	push	r29
  7a:	cf 93       	push	r28
  7c:	cd b7       	in	r28, 0x3d	; 61
  7e:	de b7       	in	r29, 0x3e	; 62
  80:	27 97       	sbiw	r28, 0x07	; 7
  82:	0f b6       	in	r0, 0x3f	; 63
  84:	f8 94       	cli
  86:	de bf       	out	0x3e, r29	; 62
  88:	0f be       	out	0x3f, r0	; 63
  8a:	cd bf       	out	0x3d, r28	; 61
  8c:	9a 83       	std	Y+2, r25	; 0x02
  8e:	89 83       	std	Y+1, r24	; 0x01
  90:	7c 83       	std	Y+4, r23	; 0x04
  92:	6b 83       	std	Y+3, r22	; 0x03
  94:	5e 83       	std	Y+6, r21	; 0x06
  96:	4d 83       	std	Y+5, r20	; 0x05
  98:	00 c0       	rjmp	.+0      	; 0x9a <_ZN5Print5writeEPKhj+0x22>
{
  while (size--)
    write(*buffer++);
  9a:	e9 81       	ldd	r30, Y+1	; 0x01
  9c:	fa 81       	ldd	r31, Y+2	; 0x02
  9e:	01 90       	ld	r0, Z+
  a0:	f0 81       	ld	r31, Z
  a2:	e0 2d       	mov	r30, r0
  a4:	20 81       	ld	r18, Z
  a6:	31 81       	ldd	r19, Z+1	; 0x01
  a8:	eb 81       	ldd	r30, Y+3	; 0x03
  aa:	fc 81       	ldd	r31, Y+4	; 0x04
  ac:	40 81       	ld	r20, Z
  ae:	8b 81       	ldd	r24, Y+3	; 0x03
  b0:	9c 81       	ldd	r25, Y+4	; 0x04
  b2:	01 96       	adiw	r24, 0x01	; 1
  b4:	9c 83       	std	Y+4, r25	; 0x04
  b6:	8b 83       	std	Y+3, r24	; 0x03
  b8:	89 81       	ldd	r24, Y+1	; 0x01
  ba:	9a 81       	ldd	r25, Y+2	; 0x02
  bc:	64 2f       	mov	r22, r20
  be:	f9 01       	movw	r30, r18
  c0:	19 95       	eicall
}

/* default implementation: may be overridden */
void Print::write(const uint8_t *buffer, size_t size)
{
  while (size--)
  c2:	1f 82       	std	Y+7, r1	; 0x07
  c4:	8d 81       	ldd	r24, Y+5	; 0x05
  c6:	9e 81       	ldd	r25, Y+6	; 0x06
  c8:	00 97       	sbiw	r24, 0x00	; 0
  ca:	01 f0       	breq	.+0      	; 0xcc <_ZN5Print5writeEPKhj+0x54>
  cc:	81 e0       	ldi	r24, 0x01	; 1
  ce:	8f 83       	std	Y+7, r24	; 0x07
  d0:	8d 81       	ldd	r24, Y+5	; 0x05
  d2:	9e 81       	ldd	r25, Y+6	; 0x06
  d4:	01 97       	sbiw	r24, 0x01	; 1
  d6:	9e 83       	std	Y+6, r25	; 0x06
  d8:	8d 83       	std	Y+5, r24	; 0x05
  da:	8f 81       	ldd	r24, Y+7	; 0x07
  dc:	88 23       	and	r24, r24
  de:	01 f4       	brne	.+0      	; 0xe0 <_ZN5Print5writeEPKhj+0x68>
    write(*buffer++);
}
  e0:	27 96       	adiw	r28, 0x07	; 7
  e2:	0f b6       	in	r0, 0x3f	; 63
  e4:	f8 94       	cli
  e6:	de bf       	out	0x3e, r29	; 62
  e8:	0f be       	out	0x3f, r0	; 63
  ea:	cd bf       	out	0x3d, r28	; 61
  ec:	cf 91       	pop	r28
  ee:	df 91       	pop	r29
  f0:	08 95       	ret

000000f2 <_ZN5Print5printEPKc>:
  for (int i = 0; i < s.length(); i++) {
    write(s[i]);
  }
}

void Print::print(const char str[])
  f2:	df 93       	push	r29
  f4:	cf 93       	push	r28
  f6:	00 d0       	rcall	.+0      	; 0xf8 <_ZN5Print5printEPKc+0x6>
  f8:	0f 92       	push	r0
  fa:	cd b7       	in	r28, 0x3d	; 61
  fc:	de b7       	in	r29, 0x3e	; 62
  fe:	9a 83       	std	Y+2, r25	; 0x02
 100:	89 83       	std	Y+1, r24	; 0x01
 102:	7c 83       	std	Y+4, r23	; 0x04
 104:	6b 83       	std	Y+3, r22	; 0x03
{
  write(str);
 106:	e9 81       	ldd	r30, Y+1	; 0x01
 108:	fa 81       	ldd	r31, Y+2	; 0x02
 10a:	80 81       	ld	r24, Z
 10c:	91 81       	ldd	r25, Z+1	; 0x01
 10e:	fc 01       	movw	r30, r24
 110:	32 96       	adiw	r30, 0x02	; 2
 112:	01 90       	ld	r0, Z+
 114:	f0 81       	ld	r31, Z
 116:	e0 2d       	mov	r30, r0
 118:	89 81       	ldd	r24, Y+1	; 0x01
 11a:	9a 81       	ldd	r25, Y+2	; 0x02
 11c:	2b 81       	ldd	r18, Y+3	; 0x03
 11e:	3c 81       	ldd	r19, Y+4	; 0x04
 120:	b9 01       	movw	r22, r18
 122:	19 95       	eicall
}
 124:	0f 90       	pop	r0
 126:	0f 90       	pop	r0
 128:	0f 90       	pop	r0
 12a:	0f 90       	pop	r0
 12c:	cf 91       	pop	r28
 12e:	df 91       	pop	r29
 130:	08 95       	ret

00000132 <_ZN5Print11printNumberEmh>:
  println();
}

// Private Methods /////////////////////////////////////////////////////////////

void Print::printNumber(unsigned long n, uint8_t base)
 132:	ef 92       	push	r14
 134:	ff 92       	push	r15
 136:	0f 93       	push	r16
 138:	1f 93       	push	r17
 13a:	df 93       	push	r29
 13c:	cf 93       	push	r28
 13e:	cd b7       	in	r28, 0x3d	; 61
 140:	de b7       	in	r29, 0x3e	; 62
 142:	ac 97       	sbiw	r28, 0x2c	; 44
 144:	0f b6       	in	r0, 0x3f	; 63
 146:	f8 94       	cli
 148:	de bf       	out	0x3e, r29	; 62
 14a:	0f be       	out	0x3f, r0	; 63
 14c:	cd bf       	out	0x3d, r28	; 61
 14e:	9e a3       	std	Y+38, r25	; 0x26
 150:	8d a3       	std	Y+37, r24	; 0x25
 152:	4f a3       	std	Y+39, r20	; 0x27
 154:	58 a7       	std	Y+40, r21	; 0x28
 156:	69 a7       	std	Y+41, r22	; 0x29
 158:	7a a7       	std	Y+42, r23	; 0x2a
 15a:	2b a7       	std	Y+43, r18	; 0x2b
{
  unsigned char buf[8 * sizeof(long)]; // Assumes 8-bit chars. 
  unsigned long i = 0;
 15c:	19 82       	std	Y+1, r1	; 0x01
 15e:	1a 82       	std	Y+2, r1	; 0x02
 160:	1b 82       	std	Y+3, r1	; 0x03
 162:	1c 82       	std	Y+4, r1	; 0x04

  if (n == 0) {
 164:	8f a1       	ldd	r24, Y+39	; 0x27
 166:	98 a5       	ldd	r25, Y+40	; 0x28
 168:	a9 a5       	ldd	r26, Y+41	; 0x29
 16a:	ba a5       	ldd	r27, Y+42	; 0x2a
 16c:	00 97       	sbiw	r24, 0x00	; 0
 16e:	a1 05       	cpc	r26, r1
 170:	b1 05       	cpc	r27, r1
 172:	01 f0       	breq	.+0      	; 0x174 <_ZN5Print11printNumberEmh+0x42>
 174:	00 c0       	rjmp	.+0      	; 0x176 <_ZN5Print11printNumberEmh+0x44>
    print('0');
 176:	8d a1       	ldd	r24, Y+37	; 0x25
 178:	9e a1       	ldd	r25, Y+38	; 0x26
 17a:	60 e3       	ldi	r22, 0x30	; 48
 17c:	40 e0       	ldi	r20, 0x00	; 0
 17e:	50 e0       	ldi	r21, 0x00	; 0
 180:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
 184:	00 c0       	rjmp	.+0      	; 0x186 <_ZN5Print11printNumberEmh+0x54>
    return;
  } 

  while (n > 0) {
    buf[i++] = n % base;
 186:	e9 80       	ldd	r14, Y+1	; 0x01
 188:	fa 80       	ldd	r15, Y+2	; 0x02
 18a:	0b 81       	ldd	r16, Y+3	; 0x03
 18c:	1c 81       	ldd	r17, Y+4	; 0x04
 18e:	8b a5       	ldd	r24, Y+43	; 0x2b
 190:	28 2f       	mov	r18, r24
 192:	30 e0       	ldi	r19, 0x00	; 0
 194:	40 e0       	ldi	r20, 0x00	; 0
 196:	50 e0       	ldi	r21, 0x00	; 0
 198:	8f a1       	ldd	r24, Y+39	; 0x27
 19a:	98 a5       	ldd	r25, Y+40	; 0x28
 19c:	a9 a5       	ldd	r26, Y+41	; 0x29
 19e:	ba a5       	ldd	r27, Y+42	; 0x2a
 1a0:	bc 01       	movw	r22, r24
 1a2:	cd 01       	movw	r24, r26
 1a4:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
 1a8:	dc 01       	movw	r26, r24
 1aa:	cb 01       	movw	r24, r22
 1ac:	28 2f       	mov	r18, r24
 1ae:	ce 01       	movw	r24, r28
 1b0:	05 96       	adiw	r24, 0x05	; 5
 1b2:	fc 01       	movw	r30, r24
 1b4:	ee 0d       	add	r30, r14
 1b6:	ff 1d       	adc	r31, r15
 1b8:	20 83       	st	Z, r18
 1ba:	89 81       	ldd	r24, Y+1	; 0x01
 1bc:	9a 81       	ldd	r25, Y+2	; 0x02
 1be:	ab 81       	ldd	r26, Y+3	; 0x03
 1c0:	bc 81       	ldd	r27, Y+4	; 0x04
 1c2:	01 96       	adiw	r24, 0x01	; 1
 1c4:	a1 1d       	adc	r26, r1
 1c6:	b1 1d       	adc	r27, r1
 1c8:	89 83       	std	Y+1, r24	; 0x01
 1ca:	9a 83       	std	Y+2, r25	; 0x02
 1cc:	ab 83       	std	Y+3, r26	; 0x03
 1ce:	bc 83       	std	Y+4, r27	; 0x04
    n /= base;
 1d0:	8b a5       	ldd	r24, Y+43	; 0x2b
 1d2:	28 2f       	mov	r18, r24
 1d4:	30 e0       	ldi	r19, 0x00	; 0
 1d6:	40 e0       	ldi	r20, 0x00	; 0
 1d8:	50 e0       	ldi	r21, 0x00	; 0
 1da:	8f a1       	ldd	r24, Y+39	; 0x27
 1dc:	98 a5       	ldd	r25, Y+40	; 0x28
 1de:	a9 a5       	ldd	r26, Y+41	; 0x29
 1e0:	ba a5       	ldd	r27, Y+42	; 0x2a
 1e2:	bc 01       	movw	r22, r24
 1e4:	cd 01       	movw	r24, r26
 1e6:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
 1ea:	da 01       	movw	r26, r20
 1ec:	c9 01       	movw	r24, r18
 1ee:	8f a3       	std	Y+39, r24	; 0x27
 1f0:	98 a7       	std	Y+40, r25	; 0x28
 1f2:	a9 a7       	std	Y+41, r26	; 0x29
 1f4:	ba a7       	std	Y+42, r27	; 0x2a
  if (n == 0) {
    print('0');
    return;
  } 

  while (n > 0) {
 1f6:	8f a1       	ldd	r24, Y+39	; 0x27
 1f8:	98 a5       	ldd	r25, Y+40	; 0x28
 1fa:	a9 a5       	ldd	r26, Y+41	; 0x29
 1fc:	ba a5       	ldd	r27, Y+42	; 0x2a
 1fe:	00 97       	sbiw	r24, 0x00	; 0
 200:	a1 05       	cpc	r26, r1
 202:	b1 05       	cpc	r27, r1
 204:	01 f0       	breq	.+0      	; 0x206 <_ZN5Print11printNumberEmh+0xd4>
 206:	00 c0       	rjmp	.+0      	; 0x208 <_ZN5Print11printNumberEmh+0xd6>
 208:	00 c0       	rjmp	.+0      	; 0x20a <_ZN5Print11printNumberEmh+0xd8>
  }

  for (; i > 0; i--)
    print((char) (buf[i - 1] < 10 ?
      '0' + buf[i - 1] :
      'A' + buf[i - 1] - 10));
 20a:	89 81       	ldd	r24, Y+1	; 0x01
 20c:	9a 81       	ldd	r25, Y+2	; 0x02
 20e:	ab 81       	ldd	r26, Y+3	; 0x03
 210:	bc 81       	ldd	r27, Y+4	; 0x04
 212:	01 97       	sbiw	r24, 0x01	; 1
 214:	a1 09       	sbc	r26, r1
 216:	b1 09       	sbc	r27, r1
 218:	9e 01       	movw	r18, r28
 21a:	2b 5f       	subi	r18, 0xFB	; 251
 21c:	3f 4f       	sbci	r19, 0xFF	; 255
 21e:	f9 01       	movw	r30, r18
 220:	e8 0f       	add	r30, r24
 222:	f9 1f       	adc	r31, r25
 224:	80 81       	ld	r24, Z
 226:	8a 30       	cpi	r24, 0x0A	; 10
 228:	00 f4       	brcc	.+0      	; 0x22a <_ZN5Print11printNumberEmh+0xf8>
 22a:	89 81       	ldd	r24, Y+1	; 0x01
 22c:	9a 81       	ldd	r25, Y+2	; 0x02
 22e:	ab 81       	ldd	r26, Y+3	; 0x03
 230:	bc 81       	ldd	r27, Y+4	; 0x04
 232:	01 97       	sbiw	r24, 0x01	; 1
 234:	a1 09       	sbc	r26, r1
 236:	b1 09       	sbc	r27, r1
 238:	9e 01       	movw	r18, r28
 23a:	2b 5f       	subi	r18, 0xFB	; 251
 23c:	3f 4f       	sbci	r19, 0xFF	; 255
 23e:	f9 01       	movw	r30, r18
 240:	e8 0f       	add	r30, r24
 242:	f9 1f       	adc	r31, r25
 244:	80 81       	ld	r24, Z
 246:	98 2f       	mov	r25, r24
 248:	90 5d       	subi	r25, 0xD0	; 208
 24a:	9c a7       	std	Y+44, r25	; 0x2c
 24c:	00 c0       	rjmp	.+0      	; 0x24e <_ZN5Print11printNumberEmh+0x11c>
 24e:	89 81       	ldd	r24, Y+1	; 0x01
 250:	9a 81       	ldd	r25, Y+2	; 0x02
 252:	ab 81       	ldd	r26, Y+3	; 0x03
 254:	bc 81       	ldd	r27, Y+4	; 0x04
 256:	01 97       	sbiw	r24, 0x01	; 1
 258:	a1 09       	sbc	r26, r1
 25a:	b1 09       	sbc	r27, r1
 25c:	9e 01       	movw	r18, r28
 25e:	2b 5f       	subi	r18, 0xFB	; 251
 260:	3f 4f       	sbci	r19, 0xFF	; 255
 262:	f9 01       	movw	r30, r18
 264:	e8 0f       	add	r30, r24
 266:	f9 1f       	adc	r31, r25
 268:	80 81       	ld	r24, Z
 26a:	98 2f       	mov	r25, r24
 26c:	99 5c       	subi	r25, 0xC9	; 201
 26e:	9c a7       	std	Y+44, r25	; 0x2c
 270:	8d a1       	ldd	r24, Y+37	; 0x25
 272:	9e a1       	ldd	r25, Y+38	; 0x26
 274:	6c a5       	ldd	r22, Y+44	; 0x2c
 276:	40 e0       	ldi	r20, 0x00	; 0
 278:	50 e0       	ldi	r21, 0x00	; 0
 27a:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
  while (n > 0) {
    buf[i++] = n % base;
    n /= base;
  }

  for (; i > 0; i--)
 27e:	89 81       	ldd	r24, Y+1	; 0x01
 280:	9a 81       	ldd	r25, Y+2	; 0x02
 282:	ab 81       	ldd	r26, Y+3	; 0x03
 284:	bc 81       	ldd	r27, Y+4	; 0x04
 286:	01 97       	sbiw	r24, 0x01	; 1
 288:	a1 09       	sbc	r26, r1
 28a:	b1 09       	sbc	r27, r1
 28c:	89 83       	std	Y+1, r24	; 0x01
 28e:	9a 83       	std	Y+2, r25	; 0x02
 290:	ab 83       	std	Y+3, r26	; 0x03
 292:	bc 83       	std	Y+4, r27	; 0x04
 294:	89 81       	ldd	r24, Y+1	; 0x01
 296:	9a 81       	ldd	r25, Y+2	; 0x02
 298:	ab 81       	ldd	r26, Y+3	; 0x03
 29a:	bc 81       	ldd	r27, Y+4	; 0x04
 29c:	00 97       	sbiw	r24, 0x00	; 0
 29e:	a1 05       	cpc	r26, r1
 2a0:	b1 05       	cpc	r27, r1
 2a2:	01 f0       	breq	.+0      	; 0x2a4 <_ZN5Print11printNumberEmh+0x172>
 2a4:	00 c0       	rjmp	.+0      	; 0x2a6 <_ZN5Print11printNumberEmh+0x174>
    print((char) (buf[i - 1] < 10 ?
      '0' + buf[i - 1] :
      'A' + buf[i - 1] - 10));
}
 2a6:	ac 96       	adiw	r28, 0x2c	; 44
 2a8:	0f b6       	in	r0, 0x3f	; 63
 2aa:	f8 94       	cli
 2ac:	de bf       	out	0x3e, r29	; 62
 2ae:	0f be       	out	0x3f, r0	; 63
 2b0:	cd bf       	out	0x3d, r28	; 61
 2b2:	cf 91       	pop	r28
 2b4:	df 91       	pop	r29
 2b6:	1f 91       	pop	r17
 2b8:	0f 91       	pop	r16
 2ba:	ff 90       	pop	r15
 2bc:	ef 90       	pop	r14
 2be:	08 95       	ret

000002c0 <_ZN5Print5printEmi>:
  } else {
    printNumber(n, base);
  }
}

void Print::print(unsigned long n, int base)
 2c0:	df 93       	push	r29
 2c2:	cf 93       	push	r28
 2c4:	cd b7       	in	r28, 0x3d	; 61
 2c6:	de b7       	in	r29, 0x3e	; 62
 2c8:	28 97       	sbiw	r28, 0x08	; 8
 2ca:	0f b6       	in	r0, 0x3f	; 63
 2cc:	f8 94       	cli
 2ce:	de bf       	out	0x3e, r29	; 62
 2d0:	0f be       	out	0x3f, r0	; 63
 2d2:	cd bf       	out	0x3d, r28	; 61
 2d4:	9a 83       	std	Y+2, r25	; 0x02
 2d6:	89 83       	std	Y+1, r24	; 0x01
 2d8:	4b 83       	std	Y+3, r20	; 0x03
 2da:	5c 83       	std	Y+4, r21	; 0x04
 2dc:	6d 83       	std	Y+5, r22	; 0x05
 2de:	7e 83       	std	Y+6, r23	; 0x06
 2e0:	38 87       	std	Y+8, r19	; 0x08
 2e2:	2f 83       	std	Y+7, r18	; 0x07
{
  if (base == 0) write(n);
 2e4:	8f 81       	ldd	r24, Y+7	; 0x07
 2e6:	98 85       	ldd	r25, Y+8	; 0x08
 2e8:	00 97       	sbiw	r24, 0x00	; 0
 2ea:	01 f4       	brne	.+0      	; 0x2ec <_ZN5Print5printEmi+0x2c>
 2ec:	e9 81       	ldd	r30, Y+1	; 0x01
 2ee:	fa 81       	ldd	r31, Y+2	; 0x02
 2f0:	01 90       	ld	r0, Z+
 2f2:	f0 81       	ld	r31, Z
 2f4:	e0 2d       	mov	r30, r0
 2f6:	01 90       	ld	r0, Z+
 2f8:	f0 81       	ld	r31, Z
 2fa:	e0 2d       	mov	r30, r0
 2fc:	2b 81       	ldd	r18, Y+3	; 0x03
 2fe:	89 81       	ldd	r24, Y+1	; 0x01
 300:	9a 81       	ldd	r25, Y+2	; 0x02
 302:	62 2f       	mov	r22, r18
 304:	19 95       	eicall
 306:	00 c0       	rjmp	.+0      	; 0x308 <_ZN5Print5printEmi+0x48>
  else printNumber(n, base);
 308:	ef 81       	ldd	r30, Y+7	; 0x07
 30a:	89 81       	ldd	r24, Y+1	; 0x01
 30c:	9a 81       	ldd	r25, Y+2	; 0x02
 30e:	2b 81       	ldd	r18, Y+3	; 0x03
 310:	3c 81       	ldd	r19, Y+4	; 0x04
 312:	4d 81       	ldd	r20, Y+5	; 0x05
 314:	5e 81       	ldd	r21, Y+6	; 0x06
 316:	ba 01       	movw	r22, r20
 318:	a9 01       	movw	r20, r18
 31a:	2e 2f       	mov	r18, r30
 31c:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
}
 320:	28 96       	adiw	r28, 0x08	; 8
 322:	0f b6       	in	r0, 0x3f	; 63
 324:	f8 94       	cli
 326:	de bf       	out	0x3e, r29	; 62
 328:	0f be       	out	0x3f, r0	; 63
 32a:	cd bf       	out	0x3d, r28	; 61
 32c:	cf 91       	pop	r28
 32e:	df 91       	pop	r29
 330:	08 95       	ret

00000332 <_ZN5Print5printEji>:
void Print::print(int n, int base)
{
  print((long) n, base);
}

void Print::print(unsigned int n, int base)
 332:	df 93       	push	r29
 334:	cf 93       	push	r28
 336:	00 d0       	rcall	.+0      	; 0x338 <_ZN5Print5printEji+0x6>
 338:	00 d0       	rcall	.+0      	; 0x33a <_ZN5Print5printEji+0x8>
 33a:	cd b7       	in	r28, 0x3d	; 61
 33c:	de b7       	in	r29, 0x3e	; 62
 33e:	9a 83       	std	Y+2, r25	; 0x02
 340:	89 83       	std	Y+1, r24	; 0x01
 342:	7c 83       	std	Y+4, r23	; 0x04
 344:	6b 83       	std	Y+3, r22	; 0x03
 346:	5e 83       	std	Y+6, r21	; 0x06
 348:	4d 83       	std	Y+5, r20	; 0x05
{
  print((unsigned long) n, base);
 34a:	8b 81       	ldd	r24, Y+3	; 0x03
 34c:	9c 81       	ldd	r25, Y+4	; 0x04
 34e:	9c 01       	movw	r18, r24
 350:	40 e0       	ldi	r20, 0x00	; 0
 352:	50 e0       	ldi	r21, 0x00	; 0
 354:	89 81       	ldd	r24, Y+1	; 0x01
 356:	9a 81       	ldd	r25, Y+2	; 0x02
 358:	ed 81       	ldd	r30, Y+5	; 0x05
 35a:	fe 81       	ldd	r31, Y+6	; 0x06
 35c:	ba 01       	movw	r22, r20
 35e:	a9 01       	movw	r20, r18
 360:	9f 01       	movw	r18, r30
 362:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
}
 366:	26 96       	adiw	r28, 0x06	; 6
 368:	0f b6       	in	r0, 0x3f	; 63
 36a:	f8 94       	cli
 36c:	de bf       	out	0x3e, r29	; 62
 36e:	0f be       	out	0x3f, r0	; 63
 370:	cd bf       	out	0x3d, r28	; 61
 372:	cf 91       	pop	r28
 374:	df 91       	pop	r29
 376:	08 95       	ret

00000378 <_ZN5Print5printEhi>:
void Print::print(char c, int base)
{
  print((long) c, base);
}

void Print::print(unsigned char b, int base)
 378:	df 93       	push	r29
 37a:	cf 93       	push	r28
 37c:	00 d0       	rcall	.+0      	; 0x37e <_ZN5Print5printEhi+0x6>
 37e:	0f 92       	push	r0
 380:	0f 92       	push	r0
 382:	cd b7       	in	r28, 0x3d	; 61
 384:	de b7       	in	r29, 0x3e	; 62
 386:	9a 83       	std	Y+2, r25	; 0x02
 388:	89 83       	std	Y+1, r24	; 0x01
 38a:	6b 83       	std	Y+3, r22	; 0x03
 38c:	5d 83       	std	Y+5, r21	; 0x05
 38e:	4c 83       	std	Y+4, r20	; 0x04
{
  print((unsigned long) b, base);
 390:	8b 81       	ldd	r24, Y+3	; 0x03
 392:	28 2f       	mov	r18, r24
 394:	30 e0       	ldi	r19, 0x00	; 0
 396:	40 e0       	ldi	r20, 0x00	; 0
 398:	50 e0       	ldi	r21, 0x00	; 0
 39a:	89 81       	ldd	r24, Y+1	; 0x01
 39c:	9a 81       	ldd	r25, Y+2	; 0x02
 39e:	ec 81       	ldd	r30, Y+4	; 0x04
 3a0:	fd 81       	ldd	r31, Y+5	; 0x05
 3a2:	ba 01       	movw	r22, r20
 3a4:	a9 01       	movw	r20, r18
 3a6:	9f 01       	movw	r18, r30
 3a8:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
}
 3ac:	0f 90       	pop	r0
 3ae:	0f 90       	pop	r0
 3b0:	0f 90       	pop	r0
 3b2:	0f 90       	pop	r0
 3b4:	0f 90       	pop	r0
 3b6:	cf 91       	pop	r28
 3b8:	df 91       	pop	r29
 3ba:	08 95       	ret

000003bc <_ZN5Print5printEli>:
void Print::print(unsigned int n, int base)
{
  print((unsigned long) n, base);
}

void Print::print(long n, int base)
 3bc:	df 93       	push	r29
 3be:	cf 93       	push	r28
 3c0:	cd b7       	in	r28, 0x3d	; 61
 3c2:	de b7       	in	r29, 0x3e	; 62
 3c4:	28 97       	sbiw	r28, 0x08	; 8
 3c6:	0f b6       	in	r0, 0x3f	; 63
 3c8:	f8 94       	cli
 3ca:	de bf       	out	0x3e, r29	; 62
 3cc:	0f be       	out	0x3f, r0	; 63
 3ce:	cd bf       	out	0x3d, r28	; 61
 3d0:	9a 83       	std	Y+2, r25	; 0x02
 3d2:	89 83       	std	Y+1, r24	; 0x01
 3d4:	4b 83       	std	Y+3, r20	; 0x03
 3d6:	5c 83       	std	Y+4, r21	; 0x04
 3d8:	6d 83       	std	Y+5, r22	; 0x05
 3da:	7e 83       	std	Y+6, r23	; 0x06
 3dc:	38 87       	std	Y+8, r19	; 0x08
 3de:	2f 83       	std	Y+7, r18	; 0x07
{
  if (base == 0) {
 3e0:	8f 81       	ldd	r24, Y+7	; 0x07
 3e2:	98 85       	ldd	r25, Y+8	; 0x08
 3e4:	00 97       	sbiw	r24, 0x00	; 0
 3e6:	01 f4       	brne	.+0      	; 0x3e8 <_ZN5Print5printEli+0x2c>
    write(n);
 3e8:	e9 81       	ldd	r30, Y+1	; 0x01
 3ea:	fa 81       	ldd	r31, Y+2	; 0x02
 3ec:	01 90       	ld	r0, Z+
 3ee:	f0 81       	ld	r31, Z
 3f0:	e0 2d       	mov	r30, r0
 3f2:	01 90       	ld	r0, Z+
 3f4:	f0 81       	ld	r31, Z
 3f6:	e0 2d       	mov	r30, r0
 3f8:	2b 81       	ldd	r18, Y+3	; 0x03
 3fa:	89 81       	ldd	r24, Y+1	; 0x01
 3fc:	9a 81       	ldd	r25, Y+2	; 0x02
 3fe:	62 2f       	mov	r22, r18
 400:	19 95       	eicall
 402:	00 c0       	rjmp	.+0      	; 0x404 <_ZN5Print5printEli+0x48>
  } else if (base == 10) {
 404:	8f 81       	ldd	r24, Y+7	; 0x07
 406:	98 85       	ldd	r25, Y+8	; 0x08
 408:	8a 30       	cpi	r24, 0x0A	; 10
 40a:	91 05       	cpc	r25, r1
 40c:	01 f4       	brne	.+0      	; 0x40e <_ZN5Print5printEli+0x52>
    if (n < 0) {
 40e:	8b 81       	ldd	r24, Y+3	; 0x03
 410:	9c 81       	ldd	r25, Y+4	; 0x04
 412:	ad 81       	ldd	r26, Y+5	; 0x05
 414:	be 81       	ldd	r27, Y+6	; 0x06
 416:	bb 23       	and	r27, r27
 418:	04 f4       	brge	.+0      	; 0x41a <_ZN5Print5printEli+0x5e>
      print('-');
 41a:	89 81       	ldd	r24, Y+1	; 0x01
 41c:	9a 81       	ldd	r25, Y+2	; 0x02
 41e:	6d e2       	ldi	r22, 0x2D	; 45
 420:	40 e0       	ldi	r20, 0x00	; 0
 422:	50 e0       	ldi	r21, 0x00	; 0
 424:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
      n = -n;
 428:	8b 81       	ldd	r24, Y+3	; 0x03
 42a:	9c 81       	ldd	r25, Y+4	; 0x04
 42c:	ad 81       	ldd	r26, Y+5	; 0x05
 42e:	be 81       	ldd	r27, Y+6	; 0x06
 430:	b0 95       	com	r27
 432:	a0 95       	com	r26
 434:	90 95       	com	r25
 436:	81 95       	neg	r24
 438:	9f 4f       	sbci	r25, 0xFF	; 255
 43a:	af 4f       	sbci	r26, 0xFF	; 255
 43c:	bf 4f       	sbci	r27, 0xFF	; 255
 43e:	8b 83       	std	Y+3, r24	; 0x03
 440:	9c 83       	std	Y+4, r25	; 0x04
 442:	ad 83       	std	Y+5, r26	; 0x05
 444:	be 83       	std	Y+6, r27	; 0x06
    }
    printNumber(n, 10);
 446:	2b 81       	ldd	r18, Y+3	; 0x03
 448:	3c 81       	ldd	r19, Y+4	; 0x04
 44a:	4d 81       	ldd	r20, Y+5	; 0x05
 44c:	5e 81       	ldd	r21, Y+6	; 0x06
 44e:	89 81       	ldd	r24, Y+1	; 0x01
 450:	9a 81       	ldd	r25, Y+2	; 0x02
 452:	ba 01       	movw	r22, r20
 454:	a9 01       	movw	r20, r18
 456:	2a e0       	ldi	r18, 0x0A	; 10
 458:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
 45c:	00 c0       	rjmp	.+0      	; 0x45e <_ZN5Print5printEli+0xa2>
  } else {
    printNumber(n, base);
 45e:	2b 81       	ldd	r18, Y+3	; 0x03
 460:	3c 81       	ldd	r19, Y+4	; 0x04
 462:	4d 81       	ldd	r20, Y+5	; 0x05
 464:	5e 81       	ldd	r21, Y+6	; 0x06
 466:	ef 81       	ldd	r30, Y+7	; 0x07
 468:	89 81       	ldd	r24, Y+1	; 0x01
 46a:	9a 81       	ldd	r25, Y+2	; 0x02
 46c:	ba 01       	movw	r22, r20
 46e:	a9 01       	movw	r20, r18
 470:	2e 2f       	mov	r18, r30
 472:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
  }
}
 476:	28 96       	adiw	r28, 0x08	; 8
 478:	0f b6       	in	r0, 0x3f	; 63
 47a:	f8 94       	cli
 47c:	de bf       	out	0x3e, r29	; 62
 47e:	0f be       	out	0x3f, r0	; 63
 480:	cd bf       	out	0x3d, r28	; 61
 482:	cf 91       	pop	r28
 484:	df 91       	pop	r29
 486:	08 95       	ret

00000488 <_ZN5Print5printEii>:
void Print::print(unsigned char b, int base)
{
  print((unsigned long) b, base);
}

void Print::print(int n, int base)
 488:	df 93       	push	r29
 48a:	cf 93       	push	r28
 48c:	00 d0       	rcall	.+0      	; 0x48e <_ZN5Print5printEii+0x6>
 48e:	00 d0       	rcall	.+0      	; 0x490 <_ZN5Print5printEii+0x8>
 490:	cd b7       	in	r28, 0x3d	; 61
 492:	de b7       	in	r29, 0x3e	; 62
 494:	9a 83       	std	Y+2, r25	; 0x02
 496:	89 83       	std	Y+1, r24	; 0x01
 498:	7c 83       	std	Y+4, r23	; 0x04
 49a:	6b 83       	std	Y+3, r22	; 0x03
 49c:	5e 83       	std	Y+6, r21	; 0x06
 49e:	4d 83       	std	Y+5, r20	; 0x05
{
  print((long) n, base);
 4a0:	8b 81       	ldd	r24, Y+3	; 0x03
 4a2:	9c 81       	ldd	r25, Y+4	; 0x04
 4a4:	9c 01       	movw	r18, r24
 4a6:	44 27       	eor	r20, r20
 4a8:	37 fd       	sbrc	r19, 7
 4aa:	40 95       	com	r20
 4ac:	54 2f       	mov	r21, r20
 4ae:	89 81       	ldd	r24, Y+1	; 0x01
 4b0:	9a 81       	ldd	r25, Y+2	; 0x02
 4b2:	ed 81       	ldd	r30, Y+5	; 0x05
 4b4:	fe 81       	ldd	r31, Y+6	; 0x06
 4b6:	ba 01       	movw	r22, r20
 4b8:	a9 01       	movw	r20, r18
 4ba:	9f 01       	movw	r18, r30
 4bc:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
}
 4c0:	26 96       	adiw	r28, 0x06	; 6
 4c2:	0f b6       	in	r0, 0x3f	; 63
 4c4:	f8 94       	cli
 4c6:	de bf       	out	0x3e, r29	; 62
 4c8:	0f be       	out	0x3f, r0	; 63
 4ca:	cd bf       	out	0x3d, r28	; 61
 4cc:	cf 91       	pop	r28
 4ce:	df 91       	pop	r29
 4d0:	08 95       	ret

000004d2 <_ZN5Print5printEci>:
void Print::print(const char str[])
{
  write(str);
}

void Print::print(char c, int base)
 4d2:	df 93       	push	r29
 4d4:	cf 93       	push	r28
 4d6:	00 d0       	rcall	.+0      	; 0x4d8 <_ZN5Print5printEci+0x6>
 4d8:	0f 92       	push	r0
 4da:	0f 92       	push	r0
 4dc:	cd b7       	in	r28, 0x3d	; 61
 4de:	de b7       	in	r29, 0x3e	; 62
 4e0:	9a 83       	std	Y+2, r25	; 0x02
 4e2:	89 83       	std	Y+1, r24	; 0x01
 4e4:	6b 83       	std	Y+3, r22	; 0x03
 4e6:	5d 83       	std	Y+5, r21	; 0x05
 4e8:	4c 83       	std	Y+4, r20	; 0x04
{
  print((long) c, base);
 4ea:	8b 81       	ldd	r24, Y+3	; 0x03
 4ec:	28 2f       	mov	r18, r24
 4ee:	30 e0       	ldi	r19, 0x00	; 0
 4f0:	40 e0       	ldi	r20, 0x00	; 0
 4f2:	50 e0       	ldi	r21, 0x00	; 0
 4f4:	89 81       	ldd	r24, Y+1	; 0x01
 4f6:	9a 81       	ldd	r25, Y+2	; 0x02
 4f8:	ec 81       	ldd	r30, Y+4	; 0x04
 4fa:	fd 81       	ldd	r31, Y+5	; 0x05
 4fc:	ba 01       	movw	r22, r20
 4fe:	a9 01       	movw	r20, r18
 500:	9f 01       	movw	r18, r30
 502:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
}
 506:	0f 90       	pop	r0
 508:	0f 90       	pop	r0
 50a:	0f 90       	pop	r0
 50c:	0f 90       	pop	r0
 50e:	0f 90       	pop	r0
 510:	cf 91       	pop	r28
 512:	df 91       	pop	r29
 514:	08 95       	ret

00000516 <_ZN5Print7printlnEv>:
void Print::print(double n, int digits)
{
  printFloat(n, digits);
}

void Print::println(void)
 516:	df 93       	push	r29
 518:	cf 93       	push	r28
 51a:	0f 92       	push	r0
 51c:	0f 92       	push	r0
 51e:	cd b7       	in	r28, 0x3d	; 61
 520:	de b7       	in	r29, 0x3e	; 62
 522:	9a 83       	std	Y+2, r25	; 0x02
 524:	89 83       	std	Y+1, r24	; 0x01
{
  print('\r');
 526:	89 81       	ldd	r24, Y+1	; 0x01
 528:	9a 81       	ldd	r25, Y+2	; 0x02
 52a:	6d e0       	ldi	r22, 0x0D	; 13
 52c:	40 e0       	ldi	r20, 0x00	; 0
 52e:	50 e0       	ldi	r21, 0x00	; 0
 530:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
  print('\n');  
 534:	89 81       	ldd	r24, Y+1	; 0x01
 536:	9a 81       	ldd	r25, Y+2	; 0x02
 538:	6a e0       	ldi	r22, 0x0A	; 10
 53a:	40 e0       	ldi	r20, 0x00	; 0
 53c:	50 e0       	ldi	r21, 0x00	; 0
 53e:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
}
 542:	0f 90       	pop	r0
 544:	0f 90       	pop	r0
 546:	cf 91       	pop	r28
 548:	df 91       	pop	r29
 54a:	08 95       	ret

0000054c <_ZN5Print7printlnEmi>:
{
  print(n, base);
  println();
}

void Print::println(unsigned long n, int base)
 54c:	df 93       	push	r29
 54e:	cf 93       	push	r28
 550:	cd b7       	in	r28, 0x3d	; 61
 552:	de b7       	in	r29, 0x3e	; 62
 554:	28 97       	sbiw	r28, 0x08	; 8
 556:	0f b6       	in	r0, 0x3f	; 63
 558:	f8 94       	cli
 55a:	de bf       	out	0x3e, r29	; 62
 55c:	0f be       	out	0x3f, r0	; 63
 55e:	cd bf       	out	0x3d, r28	; 61
 560:	9a 83       	std	Y+2, r25	; 0x02
 562:	89 83       	std	Y+1, r24	; 0x01
 564:	4b 83       	std	Y+3, r20	; 0x03
 566:	5c 83       	std	Y+4, r21	; 0x04
 568:	6d 83       	std	Y+5, r22	; 0x05
 56a:	7e 83       	std	Y+6, r23	; 0x06
 56c:	38 87       	std	Y+8, r19	; 0x08
 56e:	2f 83       	std	Y+7, r18	; 0x07
{
  print(n, base);
 570:	89 81       	ldd	r24, Y+1	; 0x01
 572:	9a 81       	ldd	r25, Y+2	; 0x02
 574:	2b 81       	ldd	r18, Y+3	; 0x03
 576:	3c 81       	ldd	r19, Y+4	; 0x04
 578:	4d 81       	ldd	r20, Y+5	; 0x05
 57a:	5e 81       	ldd	r21, Y+6	; 0x06
 57c:	ef 81       	ldd	r30, Y+7	; 0x07
 57e:	f8 85       	ldd	r31, Y+8	; 0x08
 580:	ba 01       	movw	r22, r20
 582:	a9 01       	movw	r20, r18
 584:	9f 01       	movw	r18, r30
 586:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
  println();
 58a:	89 81       	ldd	r24, Y+1	; 0x01
 58c:	9a 81       	ldd	r25, Y+2	; 0x02
 58e:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
}
 592:	28 96       	adiw	r28, 0x08	; 8
 594:	0f b6       	in	r0, 0x3f	; 63
 596:	f8 94       	cli
 598:	de bf       	out	0x3e, r29	; 62
 59a:	0f be       	out	0x3f, r0	; 63
 59c:	cd bf       	out	0x3d, r28	; 61
 59e:	cf 91       	pop	r28
 5a0:	df 91       	pop	r29
 5a2:	08 95       	ret

000005a4 <_ZN5Print7printlnEji>:
{
  print(n, base);
  println();
}

void Print::println(unsigned int n, int base)
 5a4:	df 93       	push	r29
 5a6:	cf 93       	push	r28
 5a8:	00 d0       	rcall	.+0      	; 0x5aa <_ZN5Print7printlnEji+0x6>
 5aa:	00 d0       	rcall	.+0      	; 0x5ac <_ZN5Print7printlnEji+0x8>
 5ac:	cd b7       	in	r28, 0x3d	; 61
 5ae:	de b7       	in	r29, 0x3e	; 62
 5b0:	9a 83       	std	Y+2, r25	; 0x02
 5b2:	89 83       	std	Y+1, r24	; 0x01
 5b4:	7c 83       	std	Y+4, r23	; 0x04
 5b6:	6b 83       	std	Y+3, r22	; 0x03
 5b8:	5e 83       	std	Y+6, r21	; 0x06
 5ba:	4d 83       	std	Y+5, r20	; 0x05
{
  print(n, base);
 5bc:	89 81       	ldd	r24, Y+1	; 0x01
 5be:	9a 81       	ldd	r25, Y+2	; 0x02
 5c0:	2b 81       	ldd	r18, Y+3	; 0x03
 5c2:	3c 81       	ldd	r19, Y+4	; 0x04
 5c4:	4d 81       	ldd	r20, Y+5	; 0x05
 5c6:	5e 81       	ldd	r21, Y+6	; 0x06
 5c8:	b9 01       	movw	r22, r18
 5ca:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
  println();
 5ce:	89 81       	ldd	r24, Y+1	; 0x01
 5d0:	9a 81       	ldd	r25, Y+2	; 0x02
 5d2:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
}
 5d6:	26 96       	adiw	r28, 0x06	; 6
 5d8:	0f b6       	in	r0, 0x3f	; 63
 5da:	f8 94       	cli
 5dc:	de bf       	out	0x3e, r29	; 62
 5de:	0f be       	out	0x3f, r0	; 63
 5e0:	cd bf       	out	0x3d, r28	; 61
 5e2:	cf 91       	pop	r28
 5e4:	df 91       	pop	r29
 5e6:	08 95       	ret

000005e8 <_ZN5Print7printlnEii>:
{
  print(b, base);
  println();
}

void Print::println(int n, int base)
 5e8:	df 93       	push	r29
 5ea:	cf 93       	push	r28
 5ec:	00 d0       	rcall	.+0      	; 0x5ee <_ZN5Print7printlnEii+0x6>
 5ee:	00 d0       	rcall	.+0      	; 0x5f0 <_ZN5Print7printlnEii+0x8>
 5f0:	cd b7       	in	r28, 0x3d	; 61
 5f2:	de b7       	in	r29, 0x3e	; 62
 5f4:	9a 83       	std	Y+2, r25	; 0x02
 5f6:	89 83       	std	Y+1, r24	; 0x01
 5f8:	7c 83       	std	Y+4, r23	; 0x04
 5fa:	6b 83       	std	Y+3, r22	; 0x03
 5fc:	5e 83       	std	Y+6, r21	; 0x06
 5fe:	4d 83       	std	Y+5, r20	; 0x05
{
  print(n, base);
 600:	89 81       	ldd	r24, Y+1	; 0x01
 602:	9a 81       	ldd	r25, Y+2	; 0x02
 604:	2b 81       	ldd	r18, Y+3	; 0x03
 606:	3c 81       	ldd	r19, Y+4	; 0x04
 608:	4d 81       	ldd	r20, Y+5	; 0x05
 60a:	5e 81       	ldd	r21, Y+6	; 0x06
 60c:	b9 01       	movw	r22, r18
 60e:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
  println();
 612:	89 81       	ldd	r24, Y+1	; 0x01
 614:	9a 81       	ldd	r25, Y+2	; 0x02
 616:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
}
 61a:	26 96       	adiw	r28, 0x06	; 6
 61c:	0f b6       	in	r0, 0x3f	; 63
 61e:	f8 94       	cli
 620:	de bf       	out	0x3e, r29	; 62
 622:	0f be       	out	0x3f, r0	; 63
 624:	cd bf       	out	0x3d, r28	; 61
 626:	cf 91       	pop	r28
 628:	df 91       	pop	r29
 62a:	08 95       	ret

0000062c <_ZN5Print7printlnEhi>:
{
  print(c, base);
  println();
}

void Print::println(unsigned char b, int base)
 62c:	df 93       	push	r29
 62e:	cf 93       	push	r28
 630:	00 d0       	rcall	.+0      	; 0x632 <_ZN5Print7printlnEhi+0x6>
 632:	0f 92       	push	r0
 634:	0f 92       	push	r0
 636:	cd b7       	in	r28, 0x3d	; 61
 638:	de b7       	in	r29, 0x3e	; 62
 63a:	9a 83       	std	Y+2, r25	; 0x02
 63c:	89 83       	std	Y+1, r24	; 0x01
 63e:	6b 83       	std	Y+3, r22	; 0x03
 640:	5d 83       	std	Y+5, r21	; 0x05
 642:	4c 83       	std	Y+4, r20	; 0x04
{
  print(b, base);
 644:	89 81       	ldd	r24, Y+1	; 0x01
 646:	9a 81       	ldd	r25, Y+2	; 0x02
 648:	2c 81       	ldd	r18, Y+4	; 0x04
 64a:	3d 81       	ldd	r19, Y+5	; 0x05
 64c:	6b 81       	ldd	r22, Y+3	; 0x03
 64e:	a9 01       	movw	r20, r18
 650:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
  println();
 654:	89 81       	ldd	r24, Y+1	; 0x01
 656:	9a 81       	ldd	r25, Y+2	; 0x02
 658:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
}
 65c:	0f 90       	pop	r0
 65e:	0f 90       	pop	r0
 660:	0f 90       	pop	r0
 662:	0f 90       	pop	r0
 664:	0f 90       	pop	r0
 666:	cf 91       	pop	r28
 668:	df 91       	pop	r29
 66a:	08 95       	ret

0000066c <_ZN5Print7printlnEPKc>:
{
  print(s);
  println();
}

void Print::println(const char c[])
 66c:	df 93       	push	r29
 66e:	cf 93       	push	r28
 670:	00 d0       	rcall	.+0      	; 0x672 <_ZN5Print7printlnEPKc+0x6>
 672:	0f 92       	push	r0
 674:	cd b7       	in	r28, 0x3d	; 61
 676:	de b7       	in	r29, 0x3e	; 62
 678:	9a 83       	std	Y+2, r25	; 0x02
 67a:	89 83       	std	Y+1, r24	; 0x01
 67c:	7c 83       	std	Y+4, r23	; 0x04
 67e:	6b 83       	std	Y+3, r22	; 0x03
{
  print(c);
 680:	89 81       	ldd	r24, Y+1	; 0x01
 682:	9a 81       	ldd	r25, Y+2	; 0x02
 684:	2b 81       	ldd	r18, Y+3	; 0x03
 686:	3c 81       	ldd	r19, Y+4	; 0x04
 688:	b9 01       	movw	r22, r18
 68a:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
  println();
 68e:	89 81       	ldd	r24, Y+1	; 0x01
 690:	9a 81       	ldd	r25, Y+2	; 0x02
 692:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
}
 696:	0f 90       	pop	r0
 698:	0f 90       	pop	r0
 69a:	0f 90       	pop	r0
 69c:	0f 90       	pop	r0
 69e:	cf 91       	pop	r28
 6a0:	df 91       	pop	r29
 6a2:	08 95       	ret

000006a4 <_ZN5Print7printlnEci>:

void Print::println(char c, int base)
 6a4:	df 93       	push	r29
 6a6:	cf 93       	push	r28
 6a8:	00 d0       	rcall	.+0      	; 0x6aa <_ZN5Print7printlnEci+0x6>
 6aa:	0f 92       	push	r0
 6ac:	0f 92       	push	r0
 6ae:	cd b7       	in	r28, 0x3d	; 61
 6b0:	de b7       	in	r29, 0x3e	; 62
 6b2:	9a 83       	std	Y+2, r25	; 0x02
 6b4:	89 83       	std	Y+1, r24	; 0x01
 6b6:	6b 83       	std	Y+3, r22	; 0x03
 6b8:	5d 83       	std	Y+5, r21	; 0x05
 6ba:	4c 83       	std	Y+4, r20	; 0x04
{
  print(c, base);
 6bc:	89 81       	ldd	r24, Y+1	; 0x01
 6be:	9a 81       	ldd	r25, Y+2	; 0x02
 6c0:	2c 81       	ldd	r18, Y+4	; 0x04
 6c2:	3d 81       	ldd	r19, Y+5	; 0x05
 6c4:	6b 81       	ldd	r22, Y+3	; 0x03
 6c6:	a9 01       	movw	r20, r18
 6c8:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
  println();
 6cc:	89 81       	ldd	r24, Y+1	; 0x01
 6ce:	9a 81       	ldd	r25, Y+2	; 0x02
 6d0:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
}
 6d4:	0f 90       	pop	r0
 6d6:	0f 90       	pop	r0
 6d8:	0f 90       	pop	r0
 6da:	0f 90       	pop	r0
 6dc:	0f 90       	pop	r0
 6de:	cf 91       	pop	r28
 6e0:	df 91       	pop	r29
 6e2:	08 95       	ret

000006e4 <_ZN5Print7printlnEli>:
{
  print(n, base);
  println();
}

void Print::println(long n, int base)
 6e4:	df 93       	push	r29
 6e6:	cf 93       	push	r28
 6e8:	cd b7       	in	r28, 0x3d	; 61
 6ea:	de b7       	in	r29, 0x3e	; 62
 6ec:	28 97       	sbiw	r28, 0x08	; 8
 6ee:	0f b6       	in	r0, 0x3f	; 63
 6f0:	f8 94       	cli
 6f2:	de bf       	out	0x3e, r29	; 62
 6f4:	0f be       	out	0x3f, r0	; 63
 6f6:	cd bf       	out	0x3d, r28	; 61
 6f8:	9a 83       	std	Y+2, r25	; 0x02
 6fa:	89 83       	std	Y+1, r24	; 0x01
 6fc:	4b 83       	std	Y+3, r20	; 0x03
 6fe:	5c 83       	std	Y+4, r21	; 0x04
 700:	6d 83       	std	Y+5, r22	; 0x05
 702:	7e 83       	std	Y+6, r23	; 0x06
 704:	38 87       	std	Y+8, r19	; 0x08
 706:	2f 83       	std	Y+7, r18	; 0x07
{
  print(n, base);
 708:	89 81       	ldd	r24, Y+1	; 0x01
 70a:	9a 81       	ldd	r25, Y+2	; 0x02
 70c:	2b 81       	ldd	r18, Y+3	; 0x03
 70e:	3c 81       	ldd	r19, Y+4	; 0x04
 710:	4d 81       	ldd	r20, Y+5	; 0x05
 712:	5e 81       	ldd	r21, Y+6	; 0x06
 714:	ef 81       	ldd	r30, Y+7	; 0x07
 716:	f8 85       	ldd	r31, Y+8	; 0x08
 718:	ba 01       	movw	r22, r20
 71a:	a9 01       	movw	r20, r18
 71c:	9f 01       	movw	r18, r30
 71e:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
  println();
 722:	89 81       	ldd	r24, Y+1	; 0x01
 724:	9a 81       	ldd	r25, Y+2	; 0x02
 726:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
}
 72a:	28 96       	adiw	r28, 0x08	; 8
 72c:	0f b6       	in	r0, 0x3f	; 63
 72e:	f8 94       	cli
 730:	de bf       	out	0x3e, r29	; 62
 732:	0f be       	out	0x3f, r0	; 63
 734:	cd bf       	out	0x3d, r28	; 61
 736:	cf 91       	pop	r28
 738:	df 91       	pop	r29
 73a:	08 95       	ret

0000073c <_ZN5Print10printFloatEdh>:
    print((char) (buf[i - 1] < 10 ?
      '0' + buf[i - 1] :
      'A' + buf[i - 1] - 10));
}

void Print::printFloat(double number, uint8_t digits) 
 73c:	df 93       	push	r29
 73e:	cf 93       	push	r28
 740:	cd b7       	in	r28, 0x3d	; 61
 742:	de b7       	in	r29, 0x3e	; 62
 744:	67 97       	sbiw	r28, 0x17	; 23
 746:	0f b6       	in	r0, 0x3f	; 63
 748:	f8 94       	cli
 74a:	de bf       	out	0x3e, r29	; 62
 74c:	0f be       	out	0x3f, r0	; 63
 74e:	cd bf       	out	0x3d, r28	; 61
 750:	99 8b       	std	Y+17, r25	; 0x11
 752:	88 8b       	std	Y+16, r24	; 0x10
 754:	4a 8b       	std	Y+18, r20	; 0x12
 756:	5b 8b       	std	Y+19, r21	; 0x13
 758:	6c 8b       	std	Y+20, r22	; 0x14
 75a:	7d 8b       	std	Y+21, r23	; 0x15
 75c:	2e 8b       	std	Y+22, r18	; 0x16
{ 
  // Handle negative numbers
  if (number < 0.0)
 75e:	6a 89       	ldd	r22, Y+18	; 0x12
 760:	7b 89       	ldd	r23, Y+19	; 0x13
 762:	8c 89       	ldd	r24, Y+20	; 0x14
 764:	9d 89       	ldd	r25, Y+21	; 0x15
 766:	20 e0       	ldi	r18, 0x00	; 0
 768:	30 e0       	ldi	r19, 0x00	; 0
 76a:	40 e0       	ldi	r20, 0x00	; 0
 76c:	50 e0       	ldi	r21, 0x00	; 0
 76e:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
 772:	88 23       	and	r24, r24
 774:	04 f4       	brge	.+0      	; 0x776 <_ZN5Print10printFloatEdh+0x3a>
  {
     print('-');
 776:	88 89       	ldd	r24, Y+16	; 0x10
 778:	99 89       	ldd	r25, Y+17	; 0x11
 77a:	6d e2       	ldi	r22, 0x2D	; 45
 77c:	40 e0       	ldi	r20, 0x00	; 0
 77e:	50 e0       	ldi	r21, 0x00	; 0
 780:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
     number = -number;
 784:	8a 89       	ldd	r24, Y+18	; 0x12
 786:	9b 89       	ldd	r25, Y+19	; 0x13
 788:	ac 89       	ldd	r26, Y+20	; 0x14
 78a:	bd 89       	ldd	r27, Y+21	; 0x15
 78c:	b0 58       	subi	r27, 0x80	; 128
 78e:	8a 8b       	std	Y+18, r24	; 0x12
 790:	9b 8b       	std	Y+19, r25	; 0x13
 792:	ac 8b       	std	Y+20, r26	; 0x14
 794:	bd 8b       	std	Y+21, r27	; 0x15
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
 796:	80 e0       	ldi	r24, 0x00	; 0
 798:	90 e0       	ldi	r25, 0x00	; 0
 79a:	a0 e0       	ldi	r26, 0x00	; 0
 79c:	bf e3       	ldi	r27, 0x3F	; 63
 79e:	8c 87       	std	Y+12, r24	; 0x0c
 7a0:	9d 87       	std	Y+13, r25	; 0x0d
 7a2:	ae 87       	std	Y+14, r26	; 0x0e
 7a4:	bf 87       	std	Y+15, r27	; 0x0f
  for (uint8_t i=0; i<digits; ++i)
 7a6:	1b 82       	std	Y+3, r1	; 0x03
 7a8:	00 c0       	rjmp	.+0      	; 0x7aa <_ZN5Print10printFloatEdh+0x6e>
    rounding /= 10.0;
 7aa:	6c 85       	ldd	r22, Y+12	; 0x0c
 7ac:	7d 85       	ldd	r23, Y+13	; 0x0d
 7ae:	8e 85       	ldd	r24, Y+14	; 0x0e
 7b0:	9f 85       	ldd	r25, Y+15	; 0x0f
 7b2:	20 e0       	ldi	r18, 0x00	; 0
 7b4:	30 e0       	ldi	r19, 0x00	; 0
 7b6:	40 e2       	ldi	r20, 0x20	; 32
 7b8:	51 e4       	ldi	r21, 0x41	; 65
 7ba:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
 7be:	dc 01       	movw	r26, r24
 7c0:	cb 01       	movw	r24, r22
 7c2:	8c 87       	std	Y+12, r24	; 0x0c
 7c4:	9d 87       	std	Y+13, r25	; 0x0d
 7c6:	ae 87       	std	Y+14, r26	; 0x0e
 7c8:	bf 87       	std	Y+15, r27	; 0x0f
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
 7ca:	8b 81       	ldd	r24, Y+3	; 0x03
 7cc:	8f 5f       	subi	r24, 0xFF	; 255
 7ce:	8b 83       	std	Y+3, r24	; 0x03
 7d0:	9b 81       	ldd	r25, Y+3	; 0x03
 7d2:	8e 89       	ldd	r24, Y+22	; 0x16
 7d4:	98 17       	cp	r25, r24
 7d6:	00 f0       	brcs	.+0      	; 0x7d8 <_ZN5Print10printFloatEdh+0x9c>
    rounding /= 10.0;
  
  number += rounding;
 7d8:	6a 89       	ldd	r22, Y+18	; 0x12
 7da:	7b 89       	ldd	r23, Y+19	; 0x13
 7dc:	8c 89       	ldd	r24, Y+20	; 0x14
 7de:	9d 89       	ldd	r25, Y+21	; 0x15
 7e0:	2c 85       	ldd	r18, Y+12	; 0x0c
 7e2:	3d 85       	ldd	r19, Y+13	; 0x0d
 7e4:	4e 85       	ldd	r20, Y+14	; 0x0e
 7e6:	5f 85       	ldd	r21, Y+15	; 0x0f
 7e8:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
 7ec:	dc 01       	movw	r26, r24
 7ee:	cb 01       	movw	r24, r22
 7f0:	8a 8b       	std	Y+18, r24	; 0x12
 7f2:	9b 8b       	std	Y+19, r25	; 0x13
 7f4:	ac 8b       	std	Y+20, r26	; 0x14
 7f6:	bd 8b       	std	Y+21, r27	; 0x15

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
 7f8:	6a 89       	ldd	r22, Y+18	; 0x12
 7fa:	7b 89       	ldd	r23, Y+19	; 0x13
 7fc:	8c 89       	ldd	r24, Y+20	; 0x14
 7fe:	9d 89       	ldd	r25, Y+21	; 0x15
 800:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
 804:	dc 01       	movw	r26, r24
 806:	cb 01       	movw	r24, r22
 808:	88 87       	std	Y+8, r24	; 0x08
 80a:	99 87       	std	Y+9, r25	; 0x09
 80c:	aa 87       	std	Y+10, r26	; 0x0a
 80e:	bb 87       	std	Y+11, r27	; 0x0b
  double remainder = number - (double)int_part;
 810:	68 85       	ldd	r22, Y+8	; 0x08
 812:	79 85       	ldd	r23, Y+9	; 0x09
 814:	8a 85       	ldd	r24, Y+10	; 0x0a
 816:	9b 85       	ldd	r25, Y+11	; 0x0b
 818:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
 81c:	9b 01       	movw	r18, r22
 81e:	ac 01       	movw	r20, r24
 820:	6a 89       	ldd	r22, Y+18	; 0x12
 822:	7b 89       	ldd	r23, Y+19	; 0x13
 824:	8c 89       	ldd	r24, Y+20	; 0x14
 826:	9d 89       	ldd	r25, Y+21	; 0x15
 828:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
 82c:	dc 01       	movw	r26, r24
 82e:	cb 01       	movw	r24, r22
 830:	8c 83       	std	Y+4, r24	; 0x04
 832:	9d 83       	std	Y+5, r25	; 0x05
 834:	ae 83       	std	Y+6, r26	; 0x06
 836:	bf 83       	std	Y+7, r27	; 0x07
  print(int_part);
 838:	88 89       	ldd	r24, Y+16	; 0x10
 83a:	99 89       	ldd	r25, Y+17	; 0x11
 83c:	28 85       	ldd	r18, Y+8	; 0x08
 83e:	39 85       	ldd	r19, Y+9	; 0x09
 840:	4a 85       	ldd	r20, Y+10	; 0x0a
 842:	5b 85       	ldd	r21, Y+11	; 0x0b
 844:	ba 01       	movw	r22, r20
 846:	a9 01       	movw	r20, r18
 848:	2a e0       	ldi	r18, 0x0A	; 10
 84a:	30 e0       	ldi	r19, 0x00	; 0
 84c:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0)
 850:	8e 89       	ldd	r24, Y+22	; 0x16
 852:	88 23       	and	r24, r24
 854:	01 f4       	brne	.+0      	; 0x856 <_ZN5Print10printFloatEdh+0x11a>
 856:	00 c0       	rjmp	.+0      	; 0x858 <_ZN5Print10printFloatEdh+0x11c>
    print("."); 
 858:	88 89       	ldd	r24, Y+16	; 0x10
 85a:	99 89       	ldd	r25, Y+17	; 0x11
 85c:	20 e0       	ldi	r18, 0x00	; 0
 85e:	30 e0       	ldi	r19, 0x00	; 0
 860:	b9 01       	movw	r22, r18
 862:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
 866:	00 c0       	rjmp	.+0      	; 0x868 <_ZN5Print10printFloatEdh+0x12c>

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
 868:	6c 81       	ldd	r22, Y+4	; 0x04
 86a:	7d 81       	ldd	r23, Y+5	; 0x05
 86c:	8e 81       	ldd	r24, Y+6	; 0x06
 86e:	9f 81       	ldd	r25, Y+7	; 0x07
 870:	20 e0       	ldi	r18, 0x00	; 0
 872:	30 e0       	ldi	r19, 0x00	; 0
 874:	40 e2       	ldi	r20, 0x20	; 32
 876:	51 e4       	ldi	r21, 0x41	; 65
 878:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
 87c:	dc 01       	movw	r26, r24
 87e:	cb 01       	movw	r24, r22
 880:	8c 83       	std	Y+4, r24	; 0x04
 882:	9d 83       	std	Y+5, r25	; 0x05
 884:	ae 83       	std	Y+6, r26	; 0x06
 886:	bf 83       	std	Y+7, r27	; 0x07
    int toPrint = int(remainder);
 888:	6c 81       	ldd	r22, Y+4	; 0x04
 88a:	7d 81       	ldd	r23, Y+5	; 0x05
 88c:	8e 81       	ldd	r24, Y+6	; 0x06
 88e:	9f 81       	ldd	r25, Y+7	; 0x07
 890:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
 894:	dc 01       	movw	r26, r24
 896:	cb 01       	movw	r24, r22
 898:	9a 83       	std	Y+2, r25	; 0x02
 89a:	89 83       	std	Y+1, r24	; 0x01
    print(toPrint);
 89c:	88 89       	ldd	r24, Y+16	; 0x10
 89e:	99 89       	ldd	r25, Y+17	; 0x11
 8a0:	29 81       	ldd	r18, Y+1	; 0x01
 8a2:	3a 81       	ldd	r19, Y+2	; 0x02
 8a4:	b9 01       	movw	r22, r18
 8a6:	4a e0       	ldi	r20, 0x0A	; 10
 8a8:	50 e0       	ldi	r21, 0x00	; 0
 8aa:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
    remainder -= toPrint; 
 8ae:	89 81       	ldd	r24, Y+1	; 0x01
 8b0:	9a 81       	ldd	r25, Y+2	; 0x02
 8b2:	aa 27       	eor	r26, r26
 8b4:	97 fd       	sbrc	r25, 7
 8b6:	a0 95       	com	r26
 8b8:	ba 2f       	mov	r27, r26
 8ba:	bc 01       	movw	r22, r24
 8bc:	cd 01       	movw	r24, r26
 8be:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
 8c2:	9b 01       	movw	r18, r22
 8c4:	ac 01       	movw	r20, r24
 8c6:	6c 81       	ldd	r22, Y+4	; 0x04
 8c8:	7d 81       	ldd	r23, Y+5	; 0x05
 8ca:	8e 81       	ldd	r24, Y+6	; 0x06
 8cc:	9f 81       	ldd	r25, Y+7	; 0x07
 8ce:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
 8d2:	dc 01       	movw	r26, r24
 8d4:	cb 01       	movw	r24, r22
 8d6:	8c 83       	std	Y+4, r24	; 0x04
 8d8:	9d 83       	std	Y+5, r25	; 0x05
 8da:	ae 83       	std	Y+6, r26	; 0x06
 8dc:	bf 83       	std	Y+7, r27	; 0x07
  // Print the decimal point, but only if there are digits beyond
  if (digits > 0)
    print("."); 

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
 8de:	8e 89       	ldd	r24, Y+22	; 0x16
 8e0:	8f 8b       	std	Y+23, r24	; 0x17
 8e2:	8f 89       	ldd	r24, Y+23	; 0x17
 8e4:	88 23       	and	r24, r24
 8e6:	01 f0       	breq	.+0      	; 0x8e8 <_ZN5Print10printFloatEdh+0x1ac>
 8e8:	81 e0       	ldi	r24, 0x01	; 1
 8ea:	8f 8b       	std	Y+23, r24	; 0x17
 8ec:	8f 89       	ldd	r24, Y+23	; 0x17
 8ee:	9e 89       	ldd	r25, Y+22	; 0x16
 8f0:	91 50       	subi	r25, 0x01	; 1
 8f2:	9e 8b       	std	Y+22, r25	; 0x16
 8f4:	88 23       	and	r24, r24
 8f6:	01 f0       	breq	.+0      	; 0x8f8 <_ZN5Print10printFloatEdh+0x1bc>
 8f8:	00 c0       	rjmp	.+0      	; 0x8fa <_ZN5Print10printFloatEdh+0x1be>
    remainder *= 10.0;
    int toPrint = int(remainder);
    print(toPrint);
    remainder -= toPrint; 
  } 
}
 8fa:	67 96       	adiw	r28, 0x17	; 23
 8fc:	0f b6       	in	r0, 0x3f	; 63
 8fe:	f8 94       	cli
 900:	de bf       	out	0x3e, r29	; 62
 902:	0f be       	out	0x3f, r0	; 63
 904:	cd bf       	out	0x3d, r28	; 61
 906:	cf 91       	pop	r28
 908:	df 91       	pop	r29
 90a:	08 95       	ret

0000090c <_ZN5Print5printEdi>:
{
  if (base == 0) write(n);
  else printNumber(n, base);
}

void Print::print(double n, int digits)
 90c:	df 93       	push	r29
 90e:	cf 93       	push	r28
 910:	cd b7       	in	r28, 0x3d	; 61
 912:	de b7       	in	r29, 0x3e	; 62
 914:	28 97       	sbiw	r28, 0x08	; 8
 916:	0f b6       	in	r0, 0x3f	; 63
 918:	f8 94       	cli
 91a:	de bf       	out	0x3e, r29	; 62
 91c:	0f be       	out	0x3f, r0	; 63
 91e:	cd bf       	out	0x3d, r28	; 61
 920:	9a 83       	std	Y+2, r25	; 0x02
 922:	89 83       	std	Y+1, r24	; 0x01
 924:	4b 83       	std	Y+3, r20	; 0x03
 926:	5c 83       	std	Y+4, r21	; 0x04
 928:	6d 83       	std	Y+5, r22	; 0x05
 92a:	7e 83       	std	Y+6, r23	; 0x06
 92c:	38 87       	std	Y+8, r19	; 0x08
 92e:	2f 83       	std	Y+7, r18	; 0x07
{
  printFloat(n, digits);
 930:	ef 81       	ldd	r30, Y+7	; 0x07
 932:	89 81       	ldd	r24, Y+1	; 0x01
 934:	9a 81       	ldd	r25, Y+2	; 0x02
 936:	2b 81       	ldd	r18, Y+3	; 0x03
 938:	3c 81       	ldd	r19, Y+4	; 0x04
 93a:	4d 81       	ldd	r20, Y+5	; 0x05
 93c:	5e 81       	ldd	r21, Y+6	; 0x06
 93e:	ba 01       	movw	r22, r20
 940:	a9 01       	movw	r20, r18
 942:	2e 2f       	mov	r18, r30
 944:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
}
 948:	28 96       	adiw	r28, 0x08	; 8
 94a:	0f b6       	in	r0, 0x3f	; 63
 94c:	f8 94       	cli
 94e:	de bf       	out	0x3e, r29	; 62
 950:	0f be       	out	0x3f, r0	; 63
 952:	cd bf       	out	0x3d, r28	; 61
 954:	cf 91       	pop	r28
 956:	df 91       	pop	r29
 958:	08 95       	ret

0000095a <_ZN5Print7printlnEdi>:
{
  print(n, base);
  println();
}

void Print::println(double n, int digits)
 95a:	df 93       	push	r29
 95c:	cf 93       	push	r28
 95e:	cd b7       	in	r28, 0x3d	; 61
 960:	de b7       	in	r29, 0x3e	; 62
 962:	28 97       	sbiw	r28, 0x08	; 8
 964:	0f b6       	in	r0, 0x3f	; 63
 966:	f8 94       	cli
 968:	de bf       	out	0x3e, r29	; 62
 96a:	0f be       	out	0x3f, r0	; 63
 96c:	cd bf       	out	0x3d, r28	; 61
 96e:	9a 83       	std	Y+2, r25	; 0x02
 970:	89 83       	std	Y+1, r24	; 0x01
 972:	4b 83       	std	Y+3, r20	; 0x03
 974:	5c 83       	std	Y+4, r21	; 0x04
 976:	6d 83       	std	Y+5, r22	; 0x05
 978:	7e 83       	std	Y+6, r23	; 0x06
 97a:	38 87       	std	Y+8, r19	; 0x08
 97c:	2f 83       	std	Y+7, r18	; 0x07
{
  print(n, digits);
 97e:	89 81       	ldd	r24, Y+1	; 0x01
 980:	9a 81       	ldd	r25, Y+2	; 0x02
 982:	2b 81       	ldd	r18, Y+3	; 0x03
 984:	3c 81       	ldd	r19, Y+4	; 0x04
 986:	4d 81       	ldd	r20, Y+5	; 0x05
 988:	5e 81       	ldd	r21, Y+6	; 0x06
 98a:	ef 81       	ldd	r30, Y+7	; 0x07
 98c:	f8 85       	ldd	r31, Y+8	; 0x08
 98e:	ba 01       	movw	r22, r20
 990:	a9 01       	movw	r20, r18
 992:	9f 01       	movw	r18, r30
 994:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
  println();
 998:	89 81       	ldd	r24, Y+1	; 0x01
 99a:	9a 81       	ldd	r25, Y+2	; 0x02
 99c:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
}
 9a0:	28 96       	adiw	r28, 0x08	; 8
 9a2:	0f b6       	in	r0, 0x3f	; 63
 9a4:	f8 94       	cli
 9a6:	de bf       	out	0x3e, r29	; 62
 9a8:	0f be       	out	0x3f, r0	; 63
 9aa:	cd bf       	out	0x3d, r28	; 61
 9ac:	cf 91       	pop	r28
 9ae:	df 91       	pop	r29
 9b0:	08 95       	ret

000009b2 <_ZN5Print5printERK6String>:
{
  while (size--)
    write(*buffer++);
}

void Print::print(const String &s)
 9b2:	0f 93       	push	r16
 9b4:	1f 93       	push	r17
 9b6:	df 93       	push	r29
 9b8:	cf 93       	push	r28
 9ba:	cd b7       	in	r28, 0x3d	; 61
 9bc:	de b7       	in	r29, 0x3e	; 62
 9be:	27 97       	sbiw	r28, 0x07	; 7
 9c0:	0f b6       	in	r0, 0x3f	; 63
 9c2:	f8 94       	cli
 9c4:	de bf       	out	0x3e, r29	; 62
 9c6:	0f be       	out	0x3f, r0	; 63
 9c8:	cd bf       	out	0x3d, r28	; 61
 9ca:	9c 83       	std	Y+4, r25	; 0x04
 9cc:	8b 83       	std	Y+3, r24	; 0x03
 9ce:	7e 83       	std	Y+6, r23	; 0x06
 9d0:	6d 83       	std	Y+5, r22	; 0x05
{
  for (int i = 0; i < s.length(); i++) {
 9d2:	1a 82       	std	Y+2, r1	; 0x02
 9d4:	19 82       	std	Y+1, r1	; 0x01
 9d6:	00 c0       	rjmp	.+0      	; 0x9d8 <_ZN5Print5printERK6String+0x26>
    write(s[i]);
 9d8:	eb 81       	ldd	r30, Y+3	; 0x03
 9da:	fc 81       	ldd	r31, Y+4	; 0x04
 9dc:	01 90       	ld	r0, Z+
 9de:	f0 81       	ld	r31, Z
 9e0:	e0 2d       	mov	r30, r0
 9e2:	00 81       	ld	r16, Z
 9e4:	11 81       	ldd	r17, Z+1	; 0x01
 9e6:	29 81       	ldd	r18, Y+1	; 0x01
 9e8:	3a 81       	ldd	r19, Y+2	; 0x02
 9ea:	8d 81       	ldd	r24, Y+5	; 0x05
 9ec:	9e 81       	ldd	r25, Y+6	; 0x06
 9ee:	b9 01       	movw	r22, r18
 9f0:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
 9f4:	28 2f       	mov	r18, r24
 9f6:	8b 81       	ldd	r24, Y+3	; 0x03
 9f8:	9c 81       	ldd	r25, Y+4	; 0x04
 9fa:	62 2f       	mov	r22, r18
 9fc:	f8 01       	movw	r30, r16
 9fe:	19 95       	eicall
    write(*buffer++);
}

void Print::print(const String &s)
{
  for (int i = 0; i < s.length(); i++) {
 a00:	89 81       	ldd	r24, Y+1	; 0x01
 a02:	9a 81       	ldd	r25, Y+2	; 0x02
 a04:	01 96       	adiw	r24, 0x01	; 1
 a06:	9a 83       	std	Y+2, r25	; 0x02
 a08:	89 83       	std	Y+1, r24	; 0x01
 a0a:	09 81       	ldd	r16, Y+1	; 0x01
 a0c:	1a 81       	ldd	r17, Y+2	; 0x02
 a0e:	8d 81       	ldd	r24, Y+5	; 0x05
 a10:	9e 81       	ldd	r25, Y+6	; 0x06
 a12:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
 a16:	1f 82       	std	Y+7, r1	; 0x07
 a18:	08 17       	cp	r16, r24
 a1a:	19 07       	cpc	r17, r25
 a1c:	00 f4       	brcc	.+0      	; 0xa1e <_ZN5Print5printERK6String+0x6c>
 a1e:	81 e0       	ldi	r24, 0x01	; 1
 a20:	8f 83       	std	Y+7, r24	; 0x07
 a22:	8f 81       	ldd	r24, Y+7	; 0x07
 a24:	88 23       	and	r24, r24
 a26:	01 f4       	brne	.+0      	; 0xa28 <_ZN5Print5printERK6String+0x76>
    write(s[i]);
  }
}
 a28:	27 96       	adiw	r28, 0x07	; 7
 a2a:	0f b6       	in	r0, 0x3f	; 63
 a2c:	f8 94       	cli
 a2e:	de bf       	out	0x3e, r29	; 62
 a30:	0f be       	out	0x3f, r0	; 63
 a32:	cd bf       	out	0x3d, r28	; 61
 a34:	cf 91       	pop	r28
 a36:	df 91       	pop	r29
 a38:	1f 91       	pop	r17
 a3a:	0f 91       	pop	r16
 a3c:	08 95       	ret

00000a3e <_ZN5Print7printlnERK6String>:
{
  print('\r');
  print('\n');  
}

void Print::println(const String &s)
 a3e:	df 93       	push	r29
 a40:	cf 93       	push	r28
 a42:	00 d0       	rcall	.+0      	; 0xa44 <_ZN5Print7printlnERK6String+0x6>
 a44:	0f 92       	push	r0
 a46:	cd b7       	in	r28, 0x3d	; 61
 a48:	de b7       	in	r29, 0x3e	; 62
 a4a:	9a 83       	std	Y+2, r25	; 0x02
 a4c:	89 83       	std	Y+1, r24	; 0x01
 a4e:	7c 83       	std	Y+4, r23	; 0x04
 a50:	6b 83       	std	Y+3, r22	; 0x03
{
  print(s);
 a52:	89 81       	ldd	r24, Y+1	; 0x01
 a54:	9a 81       	ldd	r25, Y+2	; 0x02
 a56:	2b 81       	ldd	r18, Y+3	; 0x03
 a58:	3c 81       	ldd	r19, Y+4	; 0x04
 a5a:	b9 01       	movw	r22, r18
 a5c:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
  println();
 a60:	89 81       	ldd	r24, Y+1	; 0x01
 a62:	9a 81       	ldd	r25, Y+2	; 0x02
 a64:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
}
 a68:	0f 90       	pop	r0
 a6a:	0f 90       	pop	r0
 a6c:	0f 90       	pop	r0
 a6e:	0f 90       	pop	r0
 a70:	cf 91       	pop	r28
 a72:	df 91       	pop	r29
 a74:	08 95       	ret

Tone.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000d08  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  1 .data         00000001  00000000  00000000  00000d3c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002a  00000000  00000000  00000d3d  2**0
                  ALLOC
  3 .stab         0000117c  00000000  00000000  00000d40  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00000f8d  00000000  00000000  00001ebc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .progmem.data 00000001  00000000  00000000  00002e49  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA

Disassembly of section .text:

00000000 <_ZL9toneBeginh>:

#endif



static int8_t toneBegin(uint8_t _pin)
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	cd b7       	in	r28, 0x3d	; 61
   6:	de b7       	in	r29, 0x3e	; 62
   8:	ca 54       	subi	r28, 0x4A	; 74
   a:	d0 40       	sbci	r29, 0x00	; 0
   c:	0f b6       	in	r0, 0x3f	; 63
   e:	f8 94       	cli
  10:	de bf       	out	0x3e, r29	; 62
  12:	0f be       	out	0x3f, r0	; 63
  14:	cd bf       	out	0x3d, r28	; 61
  16:	fe 01       	movw	r30, r28
  18:	e8 5b       	subi	r30, 0xB8	; 184
  1a:	ff 4f       	sbci	r31, 0xFF	; 255
  1c:	80 83       	st	Z, r24
{
  int8_t _timer = -1;
  1e:	fe 01       	movw	r30, r28
  20:	e9 5b       	subi	r30, 0xB9	; 185
  22:	ff 4f       	sbci	r31, 0xFF	; 255
  24:	8f ef       	ldi	r24, 0xFF	; 255
  26:	80 83       	st	Z, r24

  // if we're already using the pin, the timer should be configured.  
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
  28:	fe 01       	movw	r30, r28
  2a:	eb 5b       	subi	r30, 0xBB	; 187
  2c:	ff 4f       	sbci	r31, 0xFF	; 255
  2e:	11 82       	std	Z+1, r1	; 0x01
  30:	10 82       	st	Z, r1
  32:	00 c0       	rjmp	.+0      	; 0x34 <_ZL9toneBeginh+0x34>
    if (tone_pins[i] == _pin) {
  34:	fe 01       	movw	r30, r28
  36:	eb 5b       	subi	r30, 0xBB	; 187
  38:	ff 4f       	sbci	r31, 0xFF	; 255
  3a:	80 81       	ld	r24, Z
  3c:	91 81       	ldd	r25, Z+1	; 0x01
  3e:	fc 01       	movw	r30, r24
  40:	e0 50       	subi	r30, 0x00	; 0
  42:	f0 40       	sbci	r31, 0x00	; 0
  44:	90 81       	ld	r25, Z
  46:	fe 01       	movw	r30, r28
  48:	e8 5b       	subi	r30, 0xB8	; 184
  4a:	ff 4f       	sbci	r31, 0xFF	; 255
  4c:	80 81       	ld	r24, Z
  4e:	98 17       	cp	r25, r24
  50:	01 f4       	brne	.+0      	; 0x52 <_ZL9toneBeginh+0x52>
      return pgm_read_byte(tone_pin_to_timer_PGM + i);
  52:	fe 01       	movw	r30, r28
  54:	eb 5b       	subi	r30, 0xBB	; 187
  56:	ff 4f       	sbci	r31, 0xFF	; 255
  58:	80 81       	ld	r24, Z
  5a:	91 81       	ldd	r25, Z+1	; 0x01
  5c:	80 50       	subi	r24, 0x00	; 0
  5e:	90 40       	sbci	r25, 0x00	; 0
  60:	fe 01       	movw	r30, r28
  62:	ed 5b       	subi	r30, 0xBD	; 189
  64:	ff 4f       	sbci	r31, 0xFF	; 255
  66:	91 83       	std	Z+1, r25	; 0x01
  68:	80 83       	st	Z, r24
  6a:	fe 01       	movw	r30, r28
  6c:	ed 5b       	subi	r30, 0xBD	; 189
  6e:	ff 4f       	sbci	r31, 0xFF	; 255
  70:	01 90       	ld	r0, Z+
  72:	f0 81       	ld	r31, Z
  74:	e0 2d       	mov	r30, r0
  76:	84 91       	lpm	r24, Z+
  78:	fe 01       	movw	r30, r28
  7a:	ee 5b       	subi	r30, 0xBE	; 190
  7c:	ff 4f       	sbci	r31, 0xFF	; 255
  7e:	80 83       	st	Z, r24
  80:	fe 01       	movw	r30, r28
  82:	ee 5b       	subi	r30, 0xBE	; 190
  84:	ff 4f       	sbci	r31, 0xFF	; 255
  86:	80 81       	ld	r24, Z
  88:	2a 96       	adiw	r28, 0x0a	; 10
  8a:	8f af       	std	Y+63, r24	; 0x3f
  8c:	2a 97       	sbiw	r28, 0x0a	; 10
  8e:	00 c0       	rjmp	.+0      	; 0x90 <_ZL9toneBeginh+0x90>
static int8_t toneBegin(uint8_t _pin)
{
  int8_t _timer = -1;

  // if we're already using the pin, the timer should be configured.  
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
  90:	de 01       	movw	r26, r28
  92:	ab 5b       	subi	r26, 0xBB	; 187
  94:	bf 4f       	sbci	r27, 0xFF	; 255
  96:	fe 01       	movw	r30, r28
  98:	eb 5b       	subi	r30, 0xBB	; 187
  9a:	ff 4f       	sbci	r31, 0xFF	; 255
  9c:	80 81       	ld	r24, Z
  9e:	91 81       	ldd	r25, Z+1	; 0x01
  a0:	01 96       	adiw	r24, 0x01	; 1
  a2:	11 96       	adiw	r26, 0x01	; 1
  a4:	9c 93       	st	X, r25
  a6:	8e 93       	st	-X, r24
  a8:	fe 01       	movw	r30, r28
  aa:	eb 5b       	subi	r30, 0xBB	; 187
  ac:	ff 4f       	sbci	r31, 0xFF	; 255
  ae:	80 81       	ld	r24, Z
  b0:	91 81       	ldd	r25, Z+1	; 0x01
  b2:	18 16       	cp	r1, r24
  b4:	19 06       	cpc	r1, r25
  b6:	04 f0       	brlt	.+0      	; 0xb8 <_ZL9toneBeginh+0xb8>
  b8:	00 c0       	rjmp	.+0      	; 0xba <_ZL9toneBeginh+0xba>
      return pgm_read_byte(tone_pin_to_timer_PGM + i);
    }
  }
  
  // search for an unused timer.
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
  ba:	fe 01       	movw	r30, r28
  bc:	e0 5c       	subi	r30, 0xC0	; 192
  be:	ff 4f       	sbci	r31, 0xFF	; 255
  c0:	11 82       	std	Z+1, r1	; 0x01
  c2:	10 82       	st	Z, r1
  c4:	00 c0       	rjmp	.+0      	; 0xc6 <_ZL9toneBeginh+0xc6>
    if (tone_pins[i] == 255) {
  c6:	fe 01       	movw	r30, r28
  c8:	e0 5c       	subi	r30, 0xC0	; 192
  ca:	ff 4f       	sbci	r31, 0xFF	; 255
  cc:	80 81       	ld	r24, Z
  ce:	91 81       	ldd	r25, Z+1	; 0x01
  d0:	fc 01       	movw	r30, r24
  d2:	e0 50       	subi	r30, 0x00	; 0
  d4:	f0 40       	sbci	r31, 0x00	; 0
  d6:	80 81       	ld	r24, Z
  d8:	8f 3f       	cpi	r24, 0xFF	; 255
  da:	01 f4       	brne	.+0      	; 0xdc <_ZL9toneBeginh+0xdc>
      tone_pins[i] = _pin;
  dc:	fe 01       	movw	r30, r28
  de:	e0 5c       	subi	r30, 0xC0	; 192
  e0:	ff 4f       	sbci	r31, 0xFF	; 255
  e2:	80 81       	ld	r24, Z
  e4:	91 81       	ldd	r25, Z+1	; 0x01
  e6:	dc 01       	movw	r26, r24
  e8:	a0 50       	subi	r26, 0x00	; 0
  ea:	b0 40       	sbci	r27, 0x00	; 0
  ec:	fe 01       	movw	r30, r28
  ee:	e8 5b       	subi	r30, 0xB8	; 184
  f0:	ff 4f       	sbci	r31, 0xFF	; 255
  f2:	80 81       	ld	r24, Z
  f4:	8c 93       	st	X, r24
      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);
  f6:	fe 01       	movw	r30, r28
  f8:	e0 5c       	subi	r30, 0xC0	; 192
  fa:	ff 4f       	sbci	r31, 0xFF	; 255
  fc:	80 81       	ld	r24, Z
  fe:	91 81       	ldd	r25, Z+1	; 0x01
 100:	80 50       	subi	r24, 0x00	; 0
 102:	90 40       	sbci	r25, 0x00	; 0
 104:	9f af       	std	Y+63, r25	; 0x3f
 106:	8e af       	std	Y+62, r24	; 0x3e
 108:	ee ad       	ldd	r30, Y+62	; 0x3e
 10a:	ff ad       	ldd	r31, Y+63	; 0x3f
 10c:	84 91       	lpm	r24, Z+
 10e:	8d af       	std	Y+61, r24	; 0x3d
 110:	8d ad       	ldd	r24, Y+61	; 0x3d
 112:	fe 01       	movw	r30, r28
 114:	e9 5b       	subi	r30, 0xB9	; 185
 116:	ff 4f       	sbci	r31, 0xFF	; 255
 118:	80 83       	st	Z, r24
 11a:	00 c0       	rjmp	.+0      	; 0x11c <_ZL9toneBeginh+0x11c>
      return pgm_read_byte(tone_pin_to_timer_PGM + i);
    }
  }
  
  // search for an unused timer.
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
 11c:	de 01       	movw	r26, r28
 11e:	a0 5c       	subi	r26, 0xC0	; 192
 120:	bf 4f       	sbci	r27, 0xFF	; 255
 122:	fe 01       	movw	r30, r28
 124:	e0 5c       	subi	r30, 0xC0	; 192
 126:	ff 4f       	sbci	r31, 0xFF	; 255
 128:	80 81       	ld	r24, Z
 12a:	91 81       	ldd	r25, Z+1	; 0x01
 12c:	01 96       	adiw	r24, 0x01	; 1
 12e:	11 96       	adiw	r26, 0x01	; 1
 130:	9c 93       	st	X, r25
 132:	8e 93       	st	-X, r24
 134:	fe 01       	movw	r30, r28
 136:	e0 5c       	subi	r30, 0xC0	; 192
 138:	ff 4f       	sbci	r31, 0xFF	; 255
 13a:	80 81       	ld	r24, Z
 13c:	91 81       	ldd	r25, Z+1	; 0x01
 13e:	18 16       	cp	r1, r24
 140:	19 06       	cpc	r1, r25
 142:	04 f0       	brlt	.+0      	; 0x144 <_ZL9toneBeginh+0x144>
 144:	00 c0       	rjmp	.+0      	; 0x146 <_ZL9toneBeginh+0x146>
      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);
      break;
    }
  }
  
  if (_timer != -1)
 146:	fe 01       	movw	r30, r28
 148:	e9 5b       	subi	r30, 0xB9	; 185
 14a:	ff 4f       	sbci	r31, 0xFF	; 255
 14c:	80 81       	ld	r24, Z
 14e:	8f 3f       	cpi	r24, 0xFF	; 255
 150:	01 f4       	brne	.+0      	; 0x152 <_ZL9toneBeginh+0x152>
 152:	00 c0       	rjmp	.+0      	; 0x154 <_ZL9toneBeginh+0x154>
  {
    // Set timer specific stuff
    // All timers in CTC mode
    // 8 bit timers will require changing prescalar values,
    // whereas 16 bit timers are set to either ck/1 or ck/64 prescalar
    switch (_timer)
 154:	fe 01       	movw	r30, r28
 156:	e9 5b       	subi	r30, 0xB9	; 185
 158:	ff 4f       	sbci	r31, 0xFF	; 255
 15a:	80 81       	ld	r24, Z
 15c:	2b 96       	adiw	r28, 0x0b	; 11
 15e:	8f af       	std	Y+63, r24	; 0x3f
 160:	2b 97       	sbiw	r28, 0x0b	; 11
 162:	2b 96       	adiw	r28, 0x0b	; 11
 164:	8f ad       	ldd	r24, Y+63	; 0x3f
 166:	2b 97       	sbiw	r28, 0x0b	; 11
 168:	82 30       	cpi	r24, 0x02	; 2
 16a:	01 f4       	brne	.+0      	; 0x16c <_ZL9toneBeginh+0x16c>
 16c:	00 c0       	rjmp	.+0      	; 0x16e <_ZL9toneBeginh+0x16e>
 16e:	2b 96       	adiw	r28, 0x0b	; 11
 170:	8f ad       	ldd	r24, Y+63	; 0x3f
 172:	2b 97       	sbiw	r28, 0x0b	; 11
 174:	83 30       	cpi	r24, 0x03	; 3
 176:	04 f4       	brge	.+0      	; 0x178 <_ZL9toneBeginh+0x178>
 178:	2b 96       	adiw	r28, 0x0b	; 11
 17a:	8f ad       	ldd	r24, Y+63	; 0x3f
 17c:	2b 97       	sbiw	r28, 0x0b	; 11
 17e:	88 23       	and	r24, r24
 180:	01 f0       	breq	.+0      	; 0x182 <_ZL9toneBeginh+0x182>
 182:	2b 96       	adiw	r28, 0x0b	; 11
 184:	8f ad       	ldd	r24, Y+63	; 0x3f
 186:	2b 97       	sbiw	r28, 0x0b	; 11
 188:	81 30       	cpi	r24, 0x01	; 1
 18a:	01 f4       	brne	.+0      	; 0x18c <_ZL9toneBeginh+0x18c>
 18c:	00 c0       	rjmp	.+0      	; 0x18e <_ZL9toneBeginh+0x18e>
 18e:	00 c0       	rjmp	.+0      	; 0x190 <_ZL9toneBeginh+0x190>
 190:	2b 96       	adiw	r28, 0x0b	; 11
 192:	8f ad       	ldd	r24, Y+63	; 0x3f
 194:	2b 97       	sbiw	r28, 0x0b	; 11
 196:	84 30       	cpi	r24, 0x04	; 4
 198:	01 f4       	brne	.+0      	; 0x19a <_ZL9toneBeginh+0x19a>
 19a:	00 c0       	rjmp	.+0      	; 0x19c <_ZL9toneBeginh+0x19c>
 19c:	2b 96       	adiw	r28, 0x0b	; 11
 19e:	8f ad       	ldd	r24, Y+63	; 0x3f
 1a0:	2b 97       	sbiw	r28, 0x0b	; 11
 1a2:	84 30       	cpi	r24, 0x04	; 4
 1a4:	04 f4       	brge	.+0      	; 0x1a6 <_ZL9toneBeginh+0x1a6>
 1a6:	00 c0       	rjmp	.+0      	; 0x1a8 <_ZL9toneBeginh+0x1a8>
 1a8:	2b 96       	adiw	r28, 0x0b	; 11
 1aa:	8f ad       	ldd	r24, Y+63	; 0x3f
 1ac:	2b 97       	sbiw	r28, 0x0b	; 11
 1ae:	85 30       	cpi	r24, 0x05	; 5
 1b0:	01 f4       	brne	.+0      	; 0x1b2 <_ZL9toneBeginh+0x1b2>
 1b2:	00 c0       	rjmp	.+0      	; 0x1b4 <_ZL9toneBeginh+0x1b4>
 1b4:	00 c0       	rjmp	.+0      	; 0x1b6 <_ZL9toneBeginh+0x1b6>
    {
      #if defined(TCCR0A) && defined(TCCR0B)
      case 0:
        // 8 bit timer
        TCCR0A = 0;
 1b6:	e4 e4       	ldi	r30, 0x44	; 68
 1b8:	f0 e0       	ldi	r31, 0x00	; 0
 1ba:	10 82       	st	Z, r1
        TCCR0B = 0;
 1bc:	e5 e4       	ldi	r30, 0x45	; 69
 1be:	f0 e0       	ldi	r31, 0x00	; 0
 1c0:	10 82       	st	Z, r1
        bitWrite(TCCR0A, WGM01, 1);
 1c2:	a4 e4       	ldi	r26, 0x44	; 68
 1c4:	b0 e0       	ldi	r27, 0x00	; 0
 1c6:	e4 e4       	ldi	r30, 0x44	; 68
 1c8:	f0 e0       	ldi	r31, 0x00	; 0
 1ca:	80 81       	ld	r24, Z
 1cc:	82 60       	ori	r24, 0x02	; 2
 1ce:	8c 93       	st	X, r24
        bitWrite(TCCR0B, CS00, 1);
 1d0:	a5 e4       	ldi	r26, 0x45	; 69
 1d2:	b0 e0       	ldi	r27, 0x00	; 0
 1d4:	e5 e4       	ldi	r30, 0x45	; 69
 1d6:	f0 e0       	ldi	r31, 0x00	; 0
 1d8:	80 81       	ld	r24, Z
 1da:	81 60       	ori	r24, 0x01	; 1
 1dc:	8c 93       	st	X, r24
        timer0_pin_port = portOutputRegister(digitalPinToPort(_pin));
 1de:	fe 01       	movw	r30, r28
 1e0:	e8 5b       	subi	r30, 0xB8	; 184
 1e2:	ff 4f       	sbci	r31, 0xFF	; 255
 1e4:	80 81       	ld	r24, Z
 1e6:	88 2f       	mov	r24, r24
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	80 50       	subi	r24, 0x00	; 0
 1ec:	90 40       	sbci	r25, 0x00	; 0
 1ee:	98 af       	std	Y+56, r25	; 0x38
 1f0:	8f ab       	std	Y+55, r24	; 0x37
 1f2:	ef a9       	ldd	r30, Y+55	; 0x37
 1f4:	f8 ad       	ldd	r31, Y+56	; 0x38
 1f6:	84 91       	lpm	r24, Z+
 1f8:	8e ab       	std	Y+54, r24	; 0x36
 1fa:	8e a9       	ldd	r24, Y+54	; 0x36
 1fc:	88 2f       	mov	r24, r24
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	88 0f       	add	r24, r24
 202:	99 1f       	adc	r25, r25
 204:	80 50       	subi	r24, 0x00	; 0
 206:	90 40       	sbci	r25, 0x00	; 0
 208:	9c af       	std	Y+60, r25	; 0x3c
 20a:	8b af       	std	Y+59, r24	; 0x3b
 20c:	8b ad       	ldd	r24, Y+59	; 0x3b
 20e:	9c ad       	ldd	r25, Y+60	; 0x3c
 210:	fc 01       	movw	r30, r24
 212:	85 91       	lpm	r24, Z+
 214:	94 91       	lpm	r25, Z+
 216:	9a af       	std	Y+58, r25	; 0x3a
 218:	89 af       	std	Y+57, r24	; 0x39
 21a:	fc af       	std	Y+60, r31	; 0x3c
 21c:	eb af       	std	Y+59, r30	; 0x3b
 21e:	89 ad       	ldd	r24, Y+57	; 0x39
 220:	9a ad       	ldd	r25, Y+58	; 0x3a
 222:	90 93 00 00 	sts	0x0000, r25
 226:	80 93 00 00 	sts	0x0000, r24
        timer0_pin_mask = digitalPinToBitMask(_pin);
 22a:	fe 01       	movw	r30, r28
 22c:	e8 5b       	subi	r30, 0xB8	; 184
 22e:	ff 4f       	sbci	r31, 0xFF	; 255
 230:	80 81       	ld	r24, Z
 232:	88 2f       	mov	r24, r24
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	80 50       	subi	r24, 0x00	; 0
 238:	90 40       	sbci	r25, 0x00	; 0
 23a:	9d ab       	std	Y+53, r25	; 0x35
 23c:	8c ab       	std	Y+52, r24	; 0x34
 23e:	ec a9       	ldd	r30, Y+52	; 0x34
 240:	fd a9       	ldd	r31, Y+53	; 0x35
 242:	84 91       	lpm	r24, Z+
 244:	8b ab       	std	Y+51, r24	; 0x33
 246:	8b a9       	ldd	r24, Y+51	; 0x33
 248:	80 93 00 00 	sts	0x0000, r24
 24c:	00 c0       	rjmp	.+0      	; 0x24e <_ZL9toneBeginh+0x24e>
      #endif

      #if defined(TCCR1A) && defined(TCCR1B) && defined(WGM12)
      case 1:
        // 16 bit timer
        TCCR1A = 0;
 24e:	e0 e8       	ldi	r30, 0x80	; 128
 250:	f0 e0       	ldi	r31, 0x00	; 0
 252:	10 82       	st	Z, r1
        TCCR1B = 0;
 254:	e1 e8       	ldi	r30, 0x81	; 129
 256:	f0 e0       	ldi	r31, 0x00	; 0
 258:	10 82       	st	Z, r1
        bitWrite(TCCR1B, WGM12, 1);
 25a:	a1 e8       	ldi	r26, 0x81	; 129
 25c:	b0 e0       	ldi	r27, 0x00	; 0
 25e:	e1 e8       	ldi	r30, 0x81	; 129
 260:	f0 e0       	ldi	r31, 0x00	; 0
 262:	80 81       	ld	r24, Z
 264:	88 60       	ori	r24, 0x08	; 8
 266:	8c 93       	st	X, r24
        bitWrite(TCCR1B, CS10, 1);
 268:	a1 e8       	ldi	r26, 0x81	; 129
 26a:	b0 e0       	ldi	r27, 0x00	; 0
 26c:	e1 e8       	ldi	r30, 0x81	; 129
 26e:	f0 e0       	ldi	r31, 0x00	; 0
 270:	80 81       	ld	r24, Z
 272:	81 60       	ori	r24, 0x01	; 1
 274:	8c 93       	st	X, r24
        timer1_pin_port = portOutputRegister(digitalPinToPort(_pin));
 276:	fe 01       	movw	r30, r28
 278:	e8 5b       	subi	r30, 0xB8	; 184
 27a:	ff 4f       	sbci	r31, 0xFF	; 255
 27c:	80 81       	ld	r24, Z
 27e:	88 2f       	mov	r24, r24
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	80 50       	subi	r24, 0x00	; 0
 284:	90 40       	sbci	r25, 0x00	; 0
 286:	9e a7       	std	Y+46, r25	; 0x2e
 288:	8d a7       	std	Y+45, r24	; 0x2d
 28a:	ed a5       	ldd	r30, Y+45	; 0x2d
 28c:	fe a5       	ldd	r31, Y+46	; 0x2e
 28e:	84 91       	lpm	r24, Z+
 290:	8c a7       	std	Y+44, r24	; 0x2c
 292:	8c a5       	ldd	r24, Y+44	; 0x2c
 294:	88 2f       	mov	r24, r24
 296:	90 e0       	ldi	r25, 0x00	; 0
 298:	88 0f       	add	r24, r24
 29a:	99 1f       	adc	r25, r25
 29c:	80 50       	subi	r24, 0x00	; 0
 29e:	90 40       	sbci	r25, 0x00	; 0
 2a0:	9a ab       	std	Y+50, r25	; 0x32
 2a2:	89 ab       	std	Y+49, r24	; 0x31
 2a4:	89 a9       	ldd	r24, Y+49	; 0x31
 2a6:	9a a9       	ldd	r25, Y+50	; 0x32
 2a8:	fc 01       	movw	r30, r24
 2aa:	85 91       	lpm	r24, Z+
 2ac:	94 91       	lpm	r25, Z+
 2ae:	98 ab       	std	Y+48, r25	; 0x30
 2b0:	8f a7       	std	Y+47, r24	; 0x2f
 2b2:	fa ab       	std	Y+50, r31	; 0x32
 2b4:	e9 ab       	std	Y+49, r30	; 0x31
 2b6:	8f a5       	ldd	r24, Y+47	; 0x2f
 2b8:	98 a9       	ldd	r25, Y+48	; 0x30
 2ba:	90 93 00 00 	sts	0x0000, r25
 2be:	80 93 00 00 	sts	0x0000, r24
        timer1_pin_mask = digitalPinToBitMask(_pin);
 2c2:	fe 01       	movw	r30, r28
 2c4:	e8 5b       	subi	r30, 0xB8	; 184
 2c6:	ff 4f       	sbci	r31, 0xFF	; 255
 2c8:	80 81       	ld	r24, Z
 2ca:	88 2f       	mov	r24, r24
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	80 50       	subi	r24, 0x00	; 0
 2d0:	90 40       	sbci	r25, 0x00	; 0
 2d2:	9b a7       	std	Y+43, r25	; 0x2b
 2d4:	8a a7       	std	Y+42, r24	; 0x2a
 2d6:	ea a5       	ldd	r30, Y+42	; 0x2a
 2d8:	fb a5       	ldd	r31, Y+43	; 0x2b
 2da:	84 91       	lpm	r24, Z+
 2dc:	89 a7       	std	Y+41, r24	; 0x29
 2de:	89 a5       	ldd	r24, Y+41	; 0x29
 2e0:	80 93 00 00 	sts	0x0000, r24
 2e4:	00 c0       	rjmp	.+0      	; 0x2e6 <_ZL9toneBeginh+0x2e6>
      #endif

      #if defined(TCCR2A) && defined(TCCR2B)
      case 2:
        // 8 bit timer
        TCCR2A = 0;
 2e6:	e0 eb       	ldi	r30, 0xB0	; 176
 2e8:	f0 e0       	ldi	r31, 0x00	; 0
 2ea:	10 82       	st	Z, r1
        TCCR2B = 0;
 2ec:	e1 eb       	ldi	r30, 0xB1	; 177
 2ee:	f0 e0       	ldi	r31, 0x00	; 0
 2f0:	10 82       	st	Z, r1
        bitWrite(TCCR2A, WGM21, 1);
 2f2:	a0 eb       	ldi	r26, 0xB0	; 176
 2f4:	b0 e0       	ldi	r27, 0x00	; 0
 2f6:	e0 eb       	ldi	r30, 0xB0	; 176
 2f8:	f0 e0       	ldi	r31, 0x00	; 0
 2fa:	80 81       	ld	r24, Z
 2fc:	82 60       	ori	r24, 0x02	; 2
 2fe:	8c 93       	st	X, r24
        bitWrite(TCCR2B, CS20, 1);
 300:	a1 eb       	ldi	r26, 0xB1	; 177
 302:	b0 e0       	ldi	r27, 0x00	; 0
 304:	e1 eb       	ldi	r30, 0xB1	; 177
 306:	f0 e0       	ldi	r31, 0x00	; 0
 308:	80 81       	ld	r24, Z
 30a:	81 60       	ori	r24, 0x01	; 1
 30c:	8c 93       	st	X, r24
        timer2_pin_port = portOutputRegister(digitalPinToPort(_pin));
 30e:	fe 01       	movw	r30, r28
 310:	e8 5b       	subi	r30, 0xB8	; 184
 312:	ff 4f       	sbci	r31, 0xFF	; 255
 314:	80 81       	ld	r24, Z
 316:	88 2f       	mov	r24, r24
 318:	90 e0       	ldi	r25, 0x00	; 0
 31a:	80 50       	subi	r24, 0x00	; 0
 31c:	90 40       	sbci	r25, 0x00	; 0
 31e:	9c a3       	std	Y+36, r25	; 0x24
 320:	8b a3       	std	Y+35, r24	; 0x23
 322:	eb a1       	ldd	r30, Y+35	; 0x23
 324:	fc a1       	ldd	r31, Y+36	; 0x24
 326:	84 91       	lpm	r24, Z+
 328:	8a a3       	std	Y+34, r24	; 0x22
 32a:	8a a1       	ldd	r24, Y+34	; 0x22
 32c:	88 2f       	mov	r24, r24
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	88 0f       	add	r24, r24
 332:	99 1f       	adc	r25, r25
 334:	80 50       	subi	r24, 0x00	; 0
 336:	90 40       	sbci	r25, 0x00	; 0
 338:	98 a7       	std	Y+40, r25	; 0x28
 33a:	8f a3       	std	Y+39, r24	; 0x27
 33c:	8f a1       	ldd	r24, Y+39	; 0x27
 33e:	98 a5       	ldd	r25, Y+40	; 0x28
 340:	fc 01       	movw	r30, r24
 342:	85 91       	lpm	r24, Z+
 344:	94 91       	lpm	r25, Z+
 346:	9e a3       	std	Y+38, r25	; 0x26
 348:	8d a3       	std	Y+37, r24	; 0x25
 34a:	f8 a7       	std	Y+40, r31	; 0x28
 34c:	ef a3       	std	Y+39, r30	; 0x27
 34e:	8d a1       	ldd	r24, Y+37	; 0x25
 350:	9e a1       	ldd	r25, Y+38	; 0x26
 352:	90 93 00 00 	sts	0x0000, r25
 356:	80 93 00 00 	sts	0x0000, r24
        timer2_pin_mask = digitalPinToBitMask(_pin);
 35a:	fe 01       	movw	r30, r28
 35c:	e8 5b       	subi	r30, 0xB8	; 184
 35e:	ff 4f       	sbci	r31, 0xFF	; 255
 360:	80 81       	ld	r24, Z
 362:	88 2f       	mov	r24, r24
 364:	90 e0       	ldi	r25, 0x00	; 0
 366:	80 50       	subi	r24, 0x00	; 0
 368:	90 40       	sbci	r25, 0x00	; 0
 36a:	99 a3       	std	Y+33, r25	; 0x21
 36c:	88 a3       	std	Y+32, r24	; 0x20
 36e:	e8 a1       	ldd	r30, Y+32	; 0x20
 370:	f9 a1       	ldd	r31, Y+33	; 0x21
 372:	84 91       	lpm	r24, Z+
 374:	8f 8f       	std	Y+31, r24	; 0x1f
 376:	8f 8d       	ldd	r24, Y+31	; 0x1f
 378:	80 93 00 00 	sts	0x0000, r24
 37c:	00 c0       	rjmp	.+0      	; 0x37e <_ZL9toneBeginh+0x37e>
      #endif

      #if defined(TCCR3A) && defined(TCCR3B) &&  defined(TIMSK3)
      case 3:
        // 16 bit timer
        TCCR3A = 0;
 37e:	e0 e9       	ldi	r30, 0x90	; 144
 380:	f0 e0       	ldi	r31, 0x00	; 0
 382:	10 82       	st	Z, r1
        TCCR3B = 0;
 384:	e1 e9       	ldi	r30, 0x91	; 145
 386:	f0 e0       	ldi	r31, 0x00	; 0
 388:	10 82       	st	Z, r1
        bitWrite(TCCR3B, WGM32, 1);
 38a:	a1 e9       	ldi	r26, 0x91	; 145
 38c:	b0 e0       	ldi	r27, 0x00	; 0
 38e:	e1 e9       	ldi	r30, 0x91	; 145
 390:	f0 e0       	ldi	r31, 0x00	; 0
 392:	80 81       	ld	r24, Z
 394:	88 60       	ori	r24, 0x08	; 8
 396:	8c 93       	st	X, r24
        bitWrite(TCCR3B, CS30, 1);
 398:	a1 e9       	ldi	r26, 0x91	; 145
 39a:	b0 e0       	ldi	r27, 0x00	; 0
 39c:	e1 e9       	ldi	r30, 0x91	; 145
 39e:	f0 e0       	ldi	r31, 0x00	; 0
 3a0:	80 81       	ld	r24, Z
 3a2:	81 60       	ori	r24, 0x01	; 1
 3a4:	8c 93       	st	X, r24
        timer3_pin_port = portOutputRegister(digitalPinToPort(_pin));
 3a6:	fe 01       	movw	r30, r28
 3a8:	e8 5b       	subi	r30, 0xB8	; 184
 3aa:	ff 4f       	sbci	r31, 0xFF	; 255
 3ac:	80 81       	ld	r24, Z
 3ae:	88 2f       	mov	r24, r24
 3b0:	90 e0       	ldi	r25, 0x00	; 0
 3b2:	80 50       	subi	r24, 0x00	; 0
 3b4:	90 40       	sbci	r25, 0x00	; 0
 3b6:	9a 8f       	std	Y+26, r25	; 0x1a
 3b8:	89 8f       	std	Y+25, r24	; 0x19
 3ba:	e9 8d       	ldd	r30, Y+25	; 0x19
 3bc:	fa 8d       	ldd	r31, Y+26	; 0x1a
 3be:	84 91       	lpm	r24, Z+
 3c0:	88 8f       	std	Y+24, r24	; 0x18
 3c2:	88 8d       	ldd	r24, Y+24	; 0x18
 3c4:	88 2f       	mov	r24, r24
 3c6:	90 e0       	ldi	r25, 0x00	; 0
 3c8:	88 0f       	add	r24, r24
 3ca:	99 1f       	adc	r25, r25
 3cc:	80 50       	subi	r24, 0x00	; 0
 3ce:	90 40       	sbci	r25, 0x00	; 0
 3d0:	9e 8f       	std	Y+30, r25	; 0x1e
 3d2:	8d 8f       	std	Y+29, r24	; 0x1d
 3d4:	8d 8d       	ldd	r24, Y+29	; 0x1d
 3d6:	9e 8d       	ldd	r25, Y+30	; 0x1e
 3d8:	fc 01       	movw	r30, r24
 3da:	85 91       	lpm	r24, Z+
 3dc:	94 91       	lpm	r25, Z+
 3de:	9c 8f       	std	Y+28, r25	; 0x1c
 3e0:	8b 8f       	std	Y+27, r24	; 0x1b
 3e2:	fe 8f       	std	Y+30, r31	; 0x1e
 3e4:	ed 8f       	std	Y+29, r30	; 0x1d
 3e6:	8b 8d       	ldd	r24, Y+27	; 0x1b
 3e8:	9c 8d       	ldd	r25, Y+28	; 0x1c
 3ea:	90 93 00 00 	sts	0x0000, r25
 3ee:	80 93 00 00 	sts	0x0000, r24
        timer3_pin_mask = digitalPinToBitMask(_pin);
 3f2:	fe 01       	movw	r30, r28
 3f4:	e8 5b       	subi	r30, 0xB8	; 184
 3f6:	ff 4f       	sbci	r31, 0xFF	; 255
 3f8:	80 81       	ld	r24, Z
 3fa:	88 2f       	mov	r24, r24
 3fc:	90 e0       	ldi	r25, 0x00	; 0
 3fe:	80 50       	subi	r24, 0x00	; 0
 400:	90 40       	sbci	r25, 0x00	; 0
 402:	9f 8b       	std	Y+23, r25	; 0x17
 404:	8e 8b       	std	Y+22, r24	; 0x16
 406:	ee 89       	ldd	r30, Y+22	; 0x16
 408:	ff 89       	ldd	r31, Y+23	; 0x17
 40a:	84 91       	lpm	r24, Z+
 40c:	8d 8b       	std	Y+21, r24	; 0x15
 40e:	8d 89       	ldd	r24, Y+21	; 0x15
 410:	80 93 00 00 	sts	0x0000, r24
 414:	00 c0       	rjmp	.+0      	; 0x416 <_ZL9toneBeginh+0x416>
      #endif

      #if defined(TCCR4A) && defined(TCCR4B) &&  defined(TIMSK4)
      case 4:
        // 16 bit timer
        TCCR4A = 0;
 416:	e0 ea       	ldi	r30, 0xA0	; 160
 418:	f0 e0       	ldi	r31, 0x00	; 0
 41a:	10 82       	st	Z, r1
        TCCR4B = 0;
 41c:	e1 ea       	ldi	r30, 0xA1	; 161
 41e:	f0 e0       	ldi	r31, 0x00	; 0
 420:	10 82       	st	Z, r1
        #if defined(WGM42)
          bitWrite(TCCR4B, WGM42, 1);
 422:	a1 ea       	ldi	r26, 0xA1	; 161
 424:	b0 e0       	ldi	r27, 0x00	; 0
 426:	e1 ea       	ldi	r30, 0xA1	; 161
 428:	f0 e0       	ldi	r31, 0x00	; 0
 42a:	80 81       	ld	r24, Z
 42c:	88 60       	ori	r24, 0x08	; 8
 42e:	8c 93       	st	X, r24
        #elif defined(CS43)
          #warning this may not be correct
          // atmega32u4
          bitWrite(TCCR4B, CS43, 1);
        #endif
        bitWrite(TCCR4B, CS40, 1);
 430:	a1 ea       	ldi	r26, 0xA1	; 161
 432:	b0 e0       	ldi	r27, 0x00	; 0
 434:	e1 ea       	ldi	r30, 0xA1	; 161
 436:	f0 e0       	ldi	r31, 0x00	; 0
 438:	80 81       	ld	r24, Z
 43a:	81 60       	ori	r24, 0x01	; 1
 43c:	8c 93       	st	X, r24
        timer4_pin_port = portOutputRegister(digitalPinToPort(_pin));
 43e:	fe 01       	movw	r30, r28
 440:	e8 5b       	subi	r30, 0xB8	; 184
 442:	ff 4f       	sbci	r31, 0xFF	; 255
 444:	80 81       	ld	r24, Z
 446:	88 2f       	mov	r24, r24
 448:	90 e0       	ldi	r25, 0x00	; 0
 44a:	80 50       	subi	r24, 0x00	; 0
 44c:	90 40       	sbci	r25, 0x00	; 0
 44e:	98 8b       	std	Y+16, r25	; 0x10
 450:	8f 87       	std	Y+15, r24	; 0x0f
 452:	ef 85       	ldd	r30, Y+15	; 0x0f
 454:	f8 89       	ldd	r31, Y+16	; 0x10
 456:	84 91       	lpm	r24, Z+
 458:	8e 87       	std	Y+14, r24	; 0x0e
 45a:	8e 85       	ldd	r24, Y+14	; 0x0e
 45c:	88 2f       	mov	r24, r24
 45e:	90 e0       	ldi	r25, 0x00	; 0
 460:	88 0f       	add	r24, r24
 462:	99 1f       	adc	r25, r25
 464:	80 50       	subi	r24, 0x00	; 0
 466:	90 40       	sbci	r25, 0x00	; 0
 468:	9c 8b       	std	Y+20, r25	; 0x14
 46a:	8b 8b       	std	Y+19, r24	; 0x13
 46c:	8b 89       	ldd	r24, Y+19	; 0x13
 46e:	9c 89       	ldd	r25, Y+20	; 0x14
 470:	fc 01       	movw	r30, r24
 472:	85 91       	lpm	r24, Z+
 474:	94 91       	lpm	r25, Z+
 476:	9a 8b       	std	Y+18, r25	; 0x12
 478:	89 8b       	std	Y+17, r24	; 0x11
 47a:	fc 8b       	std	Y+20, r31	; 0x14
 47c:	eb 8b       	std	Y+19, r30	; 0x13
 47e:	89 89       	ldd	r24, Y+17	; 0x11
 480:	9a 89       	ldd	r25, Y+18	; 0x12
 482:	90 93 00 00 	sts	0x0000, r25
 486:	80 93 00 00 	sts	0x0000, r24
        timer4_pin_mask = digitalPinToBitMask(_pin);
 48a:	fe 01       	movw	r30, r28
 48c:	e8 5b       	subi	r30, 0xB8	; 184
 48e:	ff 4f       	sbci	r31, 0xFF	; 255
 490:	80 81       	ld	r24, Z
 492:	88 2f       	mov	r24, r24
 494:	90 e0       	ldi	r25, 0x00	; 0
 496:	80 50       	subi	r24, 0x00	; 0
 498:	90 40       	sbci	r25, 0x00	; 0
 49a:	9d 87       	std	Y+13, r25	; 0x0d
 49c:	8c 87       	std	Y+12, r24	; 0x0c
 49e:	ec 85       	ldd	r30, Y+12	; 0x0c
 4a0:	fd 85       	ldd	r31, Y+13	; 0x0d
 4a2:	84 91       	lpm	r24, Z+
 4a4:	8b 87       	std	Y+11, r24	; 0x0b
 4a6:	8b 85       	ldd	r24, Y+11	; 0x0b
 4a8:	80 93 00 00 	sts	0x0000, r24
 4ac:	00 c0       	rjmp	.+0      	; 0x4ae <_ZL9toneBeginh+0x4ae>
      #endif

      #if defined(TCCR5A) && defined(TCCR5B) &&  defined(TIMSK5)
      case 5:
        // 16 bit timer
        TCCR5A = 0;
 4ae:	e0 e2       	ldi	r30, 0x20	; 32
 4b0:	f1 e0       	ldi	r31, 0x01	; 1
 4b2:	10 82       	st	Z, r1
        TCCR5B = 0;
 4b4:	e1 e2       	ldi	r30, 0x21	; 33
 4b6:	f1 e0       	ldi	r31, 0x01	; 1
 4b8:	10 82       	st	Z, r1
        bitWrite(TCCR5B, WGM52, 1);
 4ba:	a1 e2       	ldi	r26, 0x21	; 33
 4bc:	b1 e0       	ldi	r27, 0x01	; 1
 4be:	e1 e2       	ldi	r30, 0x21	; 33
 4c0:	f1 e0       	ldi	r31, 0x01	; 1
 4c2:	80 81       	ld	r24, Z
 4c4:	88 60       	ori	r24, 0x08	; 8
 4c6:	8c 93       	st	X, r24
        bitWrite(TCCR5B, CS50, 1);
 4c8:	a1 e2       	ldi	r26, 0x21	; 33
 4ca:	b1 e0       	ldi	r27, 0x01	; 1
 4cc:	e1 e2       	ldi	r30, 0x21	; 33
 4ce:	f1 e0       	ldi	r31, 0x01	; 1
 4d0:	80 81       	ld	r24, Z
 4d2:	81 60       	ori	r24, 0x01	; 1
 4d4:	8c 93       	st	X, r24
        timer5_pin_port = portOutputRegister(digitalPinToPort(_pin));
 4d6:	fe 01       	movw	r30, r28
 4d8:	e8 5b       	subi	r30, 0xB8	; 184
 4da:	ff 4f       	sbci	r31, 0xFF	; 255
 4dc:	80 81       	ld	r24, Z
 4de:	88 2f       	mov	r24, r24
 4e0:	90 e0       	ldi	r25, 0x00	; 0
 4e2:	80 50       	subi	r24, 0x00	; 0
 4e4:	90 40       	sbci	r25, 0x00	; 0
 4e6:	9e 83       	std	Y+6, r25	; 0x06
 4e8:	8d 83       	std	Y+5, r24	; 0x05
 4ea:	ed 81       	ldd	r30, Y+5	; 0x05
 4ec:	fe 81       	ldd	r31, Y+6	; 0x06
 4ee:	84 91       	lpm	r24, Z+
 4f0:	8c 83       	std	Y+4, r24	; 0x04
 4f2:	8c 81       	ldd	r24, Y+4	; 0x04
 4f4:	88 2f       	mov	r24, r24
 4f6:	90 e0       	ldi	r25, 0x00	; 0
 4f8:	88 0f       	add	r24, r24
 4fa:	99 1f       	adc	r25, r25
 4fc:	80 50       	subi	r24, 0x00	; 0
 4fe:	90 40       	sbci	r25, 0x00	; 0
 500:	9a 87       	std	Y+10, r25	; 0x0a
 502:	89 87       	std	Y+9, r24	; 0x09
 504:	89 85       	ldd	r24, Y+9	; 0x09
 506:	9a 85       	ldd	r25, Y+10	; 0x0a
 508:	fc 01       	movw	r30, r24
 50a:	85 91       	lpm	r24, Z+
 50c:	94 91       	lpm	r25, Z+
 50e:	98 87       	std	Y+8, r25	; 0x08
 510:	8f 83       	std	Y+7, r24	; 0x07
 512:	fa 87       	std	Y+10, r31	; 0x0a
 514:	e9 87       	std	Y+9, r30	; 0x09
 516:	8f 81       	ldd	r24, Y+7	; 0x07
 518:	98 85       	ldd	r25, Y+8	; 0x08
 51a:	90 93 00 00 	sts	0x0000, r25
 51e:	80 93 00 00 	sts	0x0000, r24
        timer5_pin_mask = digitalPinToBitMask(_pin);
 522:	fe 01       	movw	r30, r28
 524:	e8 5b       	subi	r30, 0xB8	; 184
 526:	ff 4f       	sbci	r31, 0xFF	; 255
 528:	80 81       	ld	r24, Z
 52a:	88 2f       	mov	r24, r24
 52c:	90 e0       	ldi	r25, 0x00	; 0
 52e:	80 50       	subi	r24, 0x00	; 0
 530:	90 40       	sbci	r25, 0x00	; 0
 532:	9b 83       	std	Y+3, r25	; 0x03
 534:	8a 83       	std	Y+2, r24	; 0x02
 536:	ea 81       	ldd	r30, Y+2	; 0x02
 538:	fb 81       	ldd	r31, Y+3	; 0x03
 53a:	84 91       	lpm	r24, Z+
 53c:	89 83       	std	Y+1, r24	; 0x01
 53e:	89 81       	ldd	r24, Y+1	; 0x01
 540:	80 93 00 00 	sts	0x0000, r24
        break;
      #endif
    }
  }

  return _timer;
 544:	fe 01       	movw	r30, r28
 546:	e9 5b       	subi	r30, 0xB9	; 185
 548:	ff 4f       	sbci	r31, 0xFF	; 255
 54a:	80 81       	ld	r24, Z
 54c:	2a 96       	adiw	r28, 0x0a	; 10
 54e:	8f af       	std	Y+63, r24	; 0x3f
 550:	2a 97       	sbiw	r28, 0x0a	; 10
 552:	2a 96       	adiw	r28, 0x0a	; 10
 554:	8f ad       	ldd	r24, Y+63	; 0x3f
 556:	2a 97       	sbiw	r28, 0x0a	; 10
}
 558:	c6 5b       	subi	r28, 0xB6	; 182
 55a:	df 4f       	sbci	r29, 0xFF	; 255
 55c:	0f b6       	in	r0, 0x3f	; 63
 55e:	f8 94       	cli
 560:	de bf       	out	0x3e, r29	; 62
 562:	0f be       	out	0x3f, r0	; 63
 564:	cd bf       	out	0x3d, r28	; 61
 566:	cf 91       	pop	r28
 568:	df 91       	pop	r29
 56a:	08 95       	ret

0000056c <_Z12disableTimerh>:


// XXX: this function only works properly for timer 2 (the only one we use
// currently).  for the others, it should end the tone, but won't restore
// proper PWM functionality for the timer.
void disableTimer(uint8_t _timer)
 56c:	df 93       	push	r29
 56e:	cf 93       	push	r28
 570:	00 d0       	rcall	.+0      	; 0x572 <_Z12disableTimerh+0x6>
 572:	cd b7       	in	r28, 0x3d	; 61
 574:	de b7       	in	r29, 0x3e	; 62
 576:	89 83       	std	Y+1, r24	; 0x01
{
  switch (_timer)
 578:	89 81       	ldd	r24, Y+1	; 0x01
 57a:	28 2f       	mov	r18, r24
 57c:	30 e0       	ldi	r19, 0x00	; 0
 57e:	3b 83       	std	Y+3, r19	; 0x03
 580:	2a 83       	std	Y+2, r18	; 0x02
 582:	8a 81       	ldd	r24, Y+2	; 0x02
 584:	9b 81       	ldd	r25, Y+3	; 0x03
 586:	82 30       	cpi	r24, 0x02	; 2
 588:	91 05       	cpc	r25, r1
 58a:	01 f0       	breq	.+0      	; 0x58c <_Z12disableTimerh+0x20>
 58c:	2a 81       	ldd	r18, Y+2	; 0x02
 58e:	3b 81       	ldd	r19, Y+3	; 0x03
 590:	23 30       	cpi	r18, 0x03	; 3
 592:	31 05       	cpc	r19, r1
 594:	04 f4       	brge	.+0      	; 0x596 <_Z12disableTimerh+0x2a>
 596:	8a 81       	ldd	r24, Y+2	; 0x02
 598:	9b 81       	ldd	r25, Y+3	; 0x03
 59a:	00 97       	sbiw	r24, 0x00	; 0
 59c:	01 f0       	breq	.+0      	; 0x59e <_Z12disableTimerh+0x32>
 59e:	2a 81       	ldd	r18, Y+2	; 0x02
 5a0:	3b 81       	ldd	r19, Y+3	; 0x03
 5a2:	21 30       	cpi	r18, 0x01	; 1
 5a4:	31 05       	cpc	r19, r1
 5a6:	01 f0       	breq	.+0      	; 0x5a8 <_Z12disableTimerh+0x3c>
 5a8:	00 c0       	rjmp	.+0      	; 0x5aa <_Z12disableTimerh+0x3e>
 5aa:	8a 81       	ldd	r24, Y+2	; 0x02
 5ac:	9b 81       	ldd	r25, Y+3	; 0x03
 5ae:	84 30       	cpi	r24, 0x04	; 4
 5b0:	91 05       	cpc	r25, r1
 5b2:	01 f0       	breq	.+0      	; 0x5b4 <_Z12disableTimerh+0x48>
 5b4:	2a 81       	ldd	r18, Y+2	; 0x02
 5b6:	3b 81       	ldd	r19, Y+3	; 0x03
 5b8:	24 30       	cpi	r18, 0x04	; 4
 5ba:	31 05       	cpc	r19, r1
 5bc:	04 f0       	brlt	.+0      	; 0x5be <_Z12disableTimerh+0x52>
 5be:	8a 81       	ldd	r24, Y+2	; 0x02
 5c0:	9b 81       	ldd	r25, Y+3	; 0x03
 5c2:	85 30       	cpi	r24, 0x05	; 5
 5c4:	91 05       	cpc	r25, r1
 5c6:	01 f0       	breq	.+0      	; 0x5c8 <_Z12disableTimerh+0x5c>
 5c8:	00 c0       	rjmp	.+0      	; 0x5ca <_Z12disableTimerh+0x5e>
  {
    case 0:
      #if defined(TIMSK0)
        TIMSK0 = 0;
 5ca:	ee e6       	ldi	r30, 0x6E	; 110
 5cc:	f0 e0       	ldi	r31, 0x00	; 0
 5ce:	10 82       	st	Z, r1
 5d0:	00 c0       	rjmp	.+0      	; 0x5d2 <_Z12disableTimerh+0x66>
      #endif
      break;

#if defined(TIMSK1) && defined(OCIE1A)
    case 1:
      bitWrite(TIMSK1, OCIE1A, 0);
 5d2:	af e6       	ldi	r26, 0x6F	; 111
 5d4:	b0 e0       	ldi	r27, 0x00	; 0
 5d6:	ef e6       	ldi	r30, 0x6F	; 111
 5d8:	f0 e0       	ldi	r31, 0x00	; 0
 5da:	80 81       	ld	r24, Z
 5dc:	8d 7f       	andi	r24, 0xFD	; 253
 5de:	8c 93       	st	X, r24
 5e0:	00 c0       	rjmp	.+0      	; 0x5e2 <_Z12disableTimerh+0x76>
      break;
#endif

    case 2:
      #if defined(TIMSK2) && defined(OCIE2A)
        bitWrite(TIMSK2, OCIE2A, 0); // disable interrupt
 5e2:	a0 e7       	ldi	r26, 0x70	; 112
 5e4:	b0 e0       	ldi	r27, 0x00	; 0
 5e6:	e0 e7       	ldi	r30, 0x70	; 112
 5e8:	f0 e0       	ldi	r31, 0x00	; 0
 5ea:	80 81       	ld	r24, Z
 5ec:	8d 7f       	andi	r24, 0xFD	; 253
 5ee:	8c 93       	st	X, r24
      #endif
      #if defined(TCCR2A) && defined(WGM20)
        TCCR2A = (1 << WGM20);
 5f0:	e0 eb       	ldi	r30, 0xB0	; 176
 5f2:	f0 e0       	ldi	r31, 0x00	; 0
 5f4:	81 e0       	ldi	r24, 0x01	; 1
 5f6:	80 83       	st	Z, r24
      #endif
      #if defined(TCCR2B) && defined(CS22)
        TCCR2B = (TCCR2B & 0b11111000) | (1 << CS22);
 5f8:	a1 eb       	ldi	r26, 0xB1	; 177
 5fa:	b0 e0       	ldi	r27, 0x00	; 0
 5fc:	e1 eb       	ldi	r30, 0xB1	; 177
 5fe:	f0 e0       	ldi	r31, 0x00	; 0
 600:	80 81       	ld	r24, Z
 602:	88 7f       	andi	r24, 0xF8	; 248
 604:	84 60       	ori	r24, 0x04	; 4
 606:	8c 93       	st	X, r24
      #endif
      #if defined(OCR2A)
        OCR2A = 0;
 608:	e3 eb       	ldi	r30, 0xB3	; 179
 60a:	f0 e0       	ldi	r31, 0x00	; 0
 60c:	10 82       	st	Z, r1
 60e:	00 c0       	rjmp	.+0      	; 0x610 <_Z12disableTimerh+0xa4>
      #endif
      break;

#if defined(TIMSK3)
    case 3:
      TIMSK3 = 0;
 610:	e1 e7       	ldi	r30, 0x71	; 113
 612:	f0 e0       	ldi	r31, 0x00	; 0
 614:	10 82       	st	Z, r1
 616:	00 c0       	rjmp	.+0      	; 0x618 <_Z12disableTimerh+0xac>
      break;
#endif

#if defined(TIMSK4)
    case 4:
      TIMSK4 = 0;
 618:	e2 e7       	ldi	r30, 0x72	; 114
 61a:	f0 e0       	ldi	r31, 0x00	; 0
 61c:	10 82       	st	Z, r1
 61e:	00 c0       	rjmp	.+0      	; 0x620 <_Z12disableTimerh+0xb4>
      break;
#endif

#if defined(TIMSK5)
    case 5:
      TIMSK5 = 0;
 620:	e3 e7       	ldi	r30, 0x73	; 115
 622:	f0 e0       	ldi	r31, 0x00	; 0
 624:	10 82       	st	Z, r1
      break;
#endif
  }
}
 626:	0f 90       	pop	r0
 628:	0f 90       	pop	r0
 62a:	0f 90       	pop	r0
 62c:	cf 91       	pop	r28
 62e:	df 91       	pop	r29
 630:	08 95       	ret

00000632 <_Z6noToneh>:


void noTone(uint8_t _pin)
 632:	df 93       	push	r29
 634:	cf 93       	push	r28
 636:	cd b7       	in	r28, 0x3d	; 61
 638:	de b7       	in	r29, 0x3e	; 62
 63a:	27 97       	sbiw	r28, 0x07	; 7
 63c:	0f b6       	in	r0, 0x3f	; 63
 63e:	f8 94       	cli
 640:	de bf       	out	0x3e, r29	; 62
 642:	0f be       	out	0x3f, r0	; 63
 644:	cd bf       	out	0x3d, r28	; 61
 646:	8f 83       	std	Y+7, r24	; 0x07
{
  int8_t _timer = -1;
 648:	8f ef       	ldi	r24, 0xFF	; 255
 64a:	8e 83       	std	Y+6, r24	; 0x06
  
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
 64c:	1d 82       	std	Y+5, r1	; 0x05
 64e:	1c 82       	std	Y+4, r1	; 0x04
 650:	00 c0       	rjmp	.+0      	; 0x652 <_Z6noToneh+0x20>
    if (tone_pins[i] == _pin) {
 652:	8c 81       	ldd	r24, Y+4	; 0x04
 654:	9d 81       	ldd	r25, Y+5	; 0x05
 656:	fc 01       	movw	r30, r24
 658:	e0 50       	subi	r30, 0x00	; 0
 65a:	f0 40       	sbci	r31, 0x00	; 0
 65c:	90 81       	ld	r25, Z
 65e:	8f 81       	ldd	r24, Y+7	; 0x07
 660:	98 17       	cp	r25, r24
 662:	01 f4       	brne	.+0      	; 0x664 <_Z6noToneh+0x32>
      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);
 664:	8c 81       	ldd	r24, Y+4	; 0x04
 666:	9d 81       	ldd	r25, Y+5	; 0x05
 668:	80 50       	subi	r24, 0x00	; 0
 66a:	90 40       	sbci	r25, 0x00	; 0
 66c:	9b 83       	std	Y+3, r25	; 0x03
 66e:	8a 83       	std	Y+2, r24	; 0x02
 670:	ea 81       	ldd	r30, Y+2	; 0x02
 672:	fb 81       	ldd	r31, Y+3	; 0x03
 674:	84 91       	lpm	r24, Z+
 676:	89 83       	std	Y+1, r24	; 0x01
 678:	89 81       	ldd	r24, Y+1	; 0x01
 67a:	8e 83       	std	Y+6, r24	; 0x06
      tone_pins[i] = 255;
 67c:	8c 81       	ldd	r24, Y+4	; 0x04
 67e:	9d 81       	ldd	r25, Y+5	; 0x05
 680:	fc 01       	movw	r30, r24
 682:	e0 50       	subi	r30, 0x00	; 0
 684:	f0 40       	sbci	r31, 0x00	; 0
 686:	8f ef       	ldi	r24, 0xFF	; 255
 688:	80 83       	st	Z, r24

void noTone(uint8_t _pin)
{
  int8_t _timer = -1;
  
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
 68a:	8c 81       	ldd	r24, Y+4	; 0x04
 68c:	9d 81       	ldd	r25, Y+5	; 0x05
 68e:	01 96       	adiw	r24, 0x01	; 1
 690:	9d 83       	std	Y+5, r25	; 0x05
 692:	8c 83       	std	Y+4, r24	; 0x04
 694:	8c 81       	ldd	r24, Y+4	; 0x04
 696:	9d 81       	ldd	r25, Y+5	; 0x05
 698:	18 16       	cp	r1, r24
 69a:	19 06       	cpc	r1, r25
 69c:	04 f4       	brge	.+0      	; 0x69e <_Z6noToneh+0x6c>
      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);
      tone_pins[i] = 255;
    }
  }
  
  disableTimer(_timer);
 69e:	8e 81       	ldd	r24, Y+6	; 0x06
 6a0:	0e 94 00 00 	call	0	; 0x0 <_ZL9toneBeginh>

  digitalWrite(_pin, 0);
 6a4:	8f 81       	ldd	r24, Y+7	; 0x07
 6a6:	60 e0       	ldi	r22, 0x00	; 0
 6a8:	0e 94 00 00 	call	0	; 0x0 <_ZL9toneBeginh>
}
 6ac:	27 96       	adiw	r28, 0x07	; 7
 6ae:	0f b6       	in	r0, 0x3f	; 63
 6b0:	f8 94       	cli
 6b2:	de bf       	out	0x3e, r29	; 62
 6b4:	0f be       	out	0x3f, r0	; 63
 6b6:	cd bf       	out	0x3d, r28	; 61
 6b8:	cf 91       	pop	r28
 6ba:	df 91       	pop	r29
 6bc:	08 95       	ret

000006be <__vector_13>:
  }
}
#endif


ISR(TIMER2_COMPA_vect)
 6be:	1f 92       	push	r1
 6c0:	0f 92       	push	r0
 6c2:	0f b6       	in	r0, 0x3f	; 63
 6c4:	0f 92       	push	r0
 6c6:	00 90 5b 00 	lds	r0, 0x005B
 6ca:	0f 92       	push	r0
 6cc:	11 24       	eor	r1, r1
 6ce:	2f 93       	push	r18
 6d0:	3f 93       	push	r19
 6d2:	4f 93       	push	r20
 6d4:	5f 93       	push	r21
 6d6:	6f 93       	push	r22
 6d8:	7f 93       	push	r23
 6da:	8f 93       	push	r24
 6dc:	9f 93       	push	r25
 6de:	af 93       	push	r26
 6e0:	bf 93       	push	r27
 6e2:	ef 93       	push	r30
 6e4:	ff 93       	push	r31
 6e6:	df 93       	push	r29
 6e8:	cf 93       	push	r28
 6ea:	0f 92       	push	r0
 6ec:	0f 92       	push	r0
 6ee:	cd b7       	in	r28, 0x3d	; 61
 6f0:	de b7       	in	r29, 0x3e	; 62
{

  if (timer2_toggle_count != 0)
 6f2:	80 91 00 00 	lds	r24, 0x0000
 6f6:	90 91 00 00 	lds	r25, 0x0000
 6fa:	a0 91 00 00 	lds	r26, 0x0000
 6fe:	b0 91 00 00 	lds	r27, 0x0000
 702:	1a 82       	std	Y+2, r1	; 0x02
 704:	00 97       	sbiw	r24, 0x00	; 0
 706:	a1 05       	cpc	r26, r1
 708:	b1 05       	cpc	r27, r1
 70a:	01 f0       	breq	.+0      	; 0x70c <__vector_13+0x4e>
 70c:	81 e0       	ldi	r24, 0x01	; 1
 70e:	8a 83       	std	Y+2, r24	; 0x02
 710:	8a 81       	ldd	r24, Y+2	; 0x02
 712:	88 23       	and	r24, r24
 714:	01 f0       	breq	.+0      	; 0x716 <__vector_13+0x58>
  {
    // toggle the pin
    *timer2_pin_port ^= timer2_pin_mask;
 716:	a0 91 00 00 	lds	r26, 0x0000
 71a:	b0 91 00 00 	lds	r27, 0x0000
 71e:	e0 91 00 00 	lds	r30, 0x0000
 722:	f0 91 00 00 	lds	r31, 0x0000
 726:	90 81       	ld	r25, Z
 728:	80 91 00 00 	lds	r24, 0x0000
 72c:	89 27       	eor	r24, r25
 72e:	8c 93       	st	X, r24

    if (timer2_toggle_count > 0)
 730:	80 91 00 00 	lds	r24, 0x0000
 734:	90 91 00 00 	lds	r25, 0x0000
 738:	a0 91 00 00 	lds	r26, 0x0000
 73c:	b0 91 00 00 	lds	r27, 0x0000
 740:	19 82       	std	Y+1, r1	; 0x01
 742:	18 16       	cp	r1, r24
 744:	19 06       	cpc	r1, r25
 746:	1a 06       	cpc	r1, r26
 748:	1b 06       	cpc	r1, r27
 74a:	04 f4       	brge	.+0      	; 0x74c <__vector_13+0x8e>
 74c:	81 e0       	ldi	r24, 0x01	; 1
 74e:	89 83       	std	Y+1, r24	; 0x01
 750:	89 81       	ldd	r24, Y+1	; 0x01
 752:	88 23       	and	r24, r24
 754:	01 f0       	breq	.+0      	; 0x756 <__vector_13+0x98>
      timer2_toggle_count--;
 756:	80 91 00 00 	lds	r24, 0x0000
 75a:	90 91 00 00 	lds	r25, 0x0000
 75e:	a0 91 00 00 	lds	r26, 0x0000
 762:	b0 91 00 00 	lds	r27, 0x0000
 766:	01 97       	sbiw	r24, 0x01	; 1
 768:	a1 09       	sbc	r26, r1
 76a:	b1 09       	sbc	r27, r1
 76c:	80 93 00 00 	sts	0x0000, r24
 770:	90 93 00 00 	sts	0x0000, r25
 774:	a0 93 00 00 	sts	0x0000, r26
 778:	b0 93 00 00 	sts	0x0000, r27
 77c:	00 c0       	rjmp	.+0      	; 0x77e <__vector_13+0xc0>
  else
  {
    // need to call noTone() so that the tone_pins[] entry is reset, so the
    // timer gets initialized next time we call tone().
    // XXX: this assumes timer 2 is always the first one used.
    noTone(tone_pins[0]);
 77e:	80 91 00 00 	lds	r24, 0x0000
 782:	0e 94 00 00 	call	0	; 0x0 <_ZL9toneBeginh>
//    disableTimer(2);
//    *timer2_pin_port &= ~(timer2_pin_mask);  // keep pin low after stop
  }
}
 786:	0f 90       	pop	r0
 788:	0f 90       	pop	r0
 78a:	cf 91       	pop	r28
 78c:	df 91       	pop	r29
 78e:	ff 91       	pop	r31
 790:	ef 91       	pop	r30
 792:	bf 91       	pop	r27
 794:	af 91       	pop	r26
 796:	9f 91       	pop	r25
 798:	8f 91       	pop	r24
 79a:	7f 91       	pop	r23
 79c:	6f 91       	pop	r22
 79e:	5f 91       	pop	r21
 7a0:	4f 91       	pop	r20
 7a2:	3f 91       	pop	r19
 7a4:	2f 91       	pop	r18
 7a6:	0f 90       	pop	r0
 7a8:	00 92 5b 00 	sts	0x005B, r0
 7ac:	0f 90       	pop	r0
 7ae:	0f be       	out	0x3f, r0	; 63
 7b0:	0f 90       	pop	r0
 7b2:	1f 90       	pop	r1
 7b4:	18 95       	reti

000007b6 <_Z4tonehjm>:



// frequency (in hertz) and duration (in milliseconds).

void tone(uint8_t _pin, unsigned int frequency, unsigned long duration)
 7b6:	df 93       	push	r29
 7b8:	cf 93       	push	r28
 7ba:	cd b7       	in	r28, 0x3d	; 61
 7bc:	de b7       	in	r29, 0x3e	; 62
 7be:	65 97       	sbiw	r28, 0x15	; 21
 7c0:	0f b6       	in	r0, 0x3f	; 63
 7c2:	f8 94       	cli
 7c4:	de bf       	out	0x3e, r29	; 62
 7c6:	0f be       	out	0x3f, r0	; 63
 7c8:	cd bf       	out	0x3d, r28	; 61
 7ca:	8b 87       	std	Y+11, r24	; 0x0b
 7cc:	7d 87       	std	Y+13, r23	; 0x0d
 7ce:	6c 87       	std	Y+12, r22	; 0x0c
 7d0:	2e 87       	std	Y+14, r18	; 0x0e
 7d2:	3f 87       	std	Y+15, r19	; 0x0f
 7d4:	48 8b       	std	Y+16, r20	; 0x10
 7d6:	59 8b       	std	Y+17, r21	; 0x11
{
  uint8_t prescalarbits = 0b001;
 7d8:	81 e0       	ldi	r24, 0x01	; 1
 7da:	8a 87       	std	Y+10, r24	; 0x0a
  long toggle_count = 0;
 7dc:	1e 82       	std	Y+6, r1	; 0x06
 7de:	1f 82       	std	Y+7, r1	; 0x07
 7e0:	18 86       	std	Y+8, r1	; 0x08
 7e2:	19 86       	std	Y+9, r1	; 0x09
  uint32_t ocr = 0;
 7e4:	1a 82       	std	Y+2, r1	; 0x02
 7e6:	1b 82       	std	Y+3, r1	; 0x03
 7e8:	1c 82       	std	Y+4, r1	; 0x04
 7ea:	1d 82       	std	Y+5, r1	; 0x05
  int8_t _timer;

  _timer = toneBegin(_pin);
 7ec:	8b 85       	ldd	r24, Y+11	; 0x0b
 7ee:	0e 94 00 00 	call	0	; 0x0 <_ZL9toneBeginh>
 7f2:	89 83       	std	Y+1, r24	; 0x01

  if (_timer >= 0)
 7f4:	89 81       	ldd	r24, Y+1	; 0x01
 7f6:	88 23       	and	r24, r24
 7f8:	04 f4       	brge	.+0      	; 0x7fa <_Z4tonehjm+0x44>
 7fa:	00 c0       	rjmp	.+0      	; 0x7fc <_Z4tonehjm+0x46>
  {
    // Set the pinMode as OUTPUT
    pinMode(_pin, OUTPUT);
 7fc:	8b 85       	ldd	r24, Y+11	; 0x0b
 7fe:	61 e0       	ldi	r22, 0x01	; 1
 800:	0e 94 00 00 	call	0	; 0x0 <_ZL9toneBeginh>
    
    // if we are using an 8 bit timer, scan through prescalars to find the best fit
    if (_timer == 0 || _timer == 2)
 804:	89 81       	ldd	r24, Y+1	; 0x01
 806:	88 23       	and	r24, r24
 808:	01 f0       	breq	.+0      	; 0x80a <_Z4tonehjm+0x54>
 80a:	89 81       	ldd	r24, Y+1	; 0x01
 80c:	82 30       	cpi	r24, 0x02	; 2
 80e:	01 f0       	breq	.+0      	; 0x810 <_Z4tonehjm+0x5a>
 810:	00 c0       	rjmp	.+0      	; 0x812 <_Z4tonehjm+0x5c>
    {
      ocr = F_CPU / frequency / 2 - 1;
 812:	8c 85       	ldd	r24, Y+12	; 0x0c
 814:	9d 85       	ldd	r25, Y+13	; 0x0d
 816:	9c 01       	movw	r18, r24
 818:	40 e0       	ldi	r20, 0x00	; 0
 81a:	50 e0       	ldi	r21, 0x00	; 0
 81c:	80 e0       	ldi	r24, 0x00	; 0
 81e:	92 e1       	ldi	r25, 0x12	; 18
 820:	aa e7       	ldi	r26, 0x7A	; 122
 822:	b0 e0       	ldi	r27, 0x00	; 0
 824:	bc 01       	movw	r22, r24
 826:	cd 01       	movw	r24, r26
 828:	0e 94 00 00 	call	0	; 0x0 <_ZL9toneBeginh>
 82c:	da 01       	movw	r26, r20
 82e:	c9 01       	movw	r24, r18
 830:	01 97       	sbiw	r24, 0x01	; 1
 832:	a1 09       	sbc	r26, r1
 834:	b1 09       	sbc	r27, r1
 836:	8a 83       	std	Y+2, r24	; 0x02
 838:	9b 83       	std	Y+3, r25	; 0x03
 83a:	ac 83       	std	Y+4, r26	; 0x04
 83c:	bd 83       	std	Y+5, r27	; 0x05
      prescalarbits = 0b001;  // ck/1: same for both timers
 83e:	81 e0       	ldi	r24, 0x01	; 1
 840:	8a 87       	std	Y+10, r24	; 0x0a
      if (ocr > 255)
 842:	8a 81       	ldd	r24, Y+2	; 0x02
 844:	9b 81       	ldd	r25, Y+3	; 0x03
 846:	ac 81       	ldd	r26, Y+4	; 0x04
 848:	bd 81       	ldd	r27, Y+5	; 0x05
 84a:	8f 3f       	cpi	r24, 0xFF	; 255
 84c:	91 05       	cpc	r25, r1
 84e:	a1 05       	cpc	r26, r1
 850:	b1 05       	cpc	r27, r1
 852:	01 f0       	breq	.+0      	; 0x854 <_Z4tonehjm+0x9e>
 854:	00 f4       	brcc	.+0      	; 0x856 <_Z4tonehjm+0xa0>
 856:	00 c0       	rjmp	.+0      	; 0x858 <_Z4tonehjm+0xa2>
      {
        ocr = F_CPU / frequency / 2 / 8 - 1;
 858:	8c 85       	ldd	r24, Y+12	; 0x0c
 85a:	9d 85       	ldd	r25, Y+13	; 0x0d
 85c:	9c 01       	movw	r18, r24
 85e:	40 e0       	ldi	r20, 0x00	; 0
 860:	50 e0       	ldi	r21, 0x00	; 0
 862:	80 e4       	ldi	r24, 0x40	; 64
 864:	92 e4       	ldi	r25, 0x42	; 66
 866:	af e0       	ldi	r26, 0x0F	; 15
 868:	b0 e0       	ldi	r27, 0x00	; 0
 86a:	bc 01       	movw	r22, r24
 86c:	cd 01       	movw	r24, r26
 86e:	0e 94 00 00 	call	0	; 0x0 <_ZL9toneBeginh>
 872:	da 01       	movw	r26, r20
 874:	c9 01       	movw	r24, r18
 876:	01 97       	sbiw	r24, 0x01	; 1
 878:	a1 09       	sbc	r26, r1
 87a:	b1 09       	sbc	r27, r1
 87c:	8a 83       	std	Y+2, r24	; 0x02
 87e:	9b 83       	std	Y+3, r25	; 0x03
 880:	ac 83       	std	Y+4, r26	; 0x04
 882:	bd 83       	std	Y+5, r27	; 0x05
        prescalarbits = 0b010;  // ck/8: same for both timers
 884:	82 e0       	ldi	r24, 0x02	; 2
 886:	8a 87       	std	Y+10, r24	; 0x0a

        if (_timer == 2 && ocr > 255)
 888:	89 81       	ldd	r24, Y+1	; 0x01
 88a:	82 30       	cpi	r24, 0x02	; 2
 88c:	01 f4       	brne	.+0      	; 0x88e <_Z4tonehjm+0xd8>
 88e:	8a 81       	ldd	r24, Y+2	; 0x02
 890:	9b 81       	ldd	r25, Y+3	; 0x03
 892:	ac 81       	ldd	r26, Y+4	; 0x04
 894:	bd 81       	ldd	r27, Y+5	; 0x05
 896:	8f 3f       	cpi	r24, 0xFF	; 255
 898:	91 05       	cpc	r25, r1
 89a:	a1 05       	cpc	r26, r1
 89c:	b1 05       	cpc	r27, r1
 89e:	01 f0       	breq	.+0      	; 0x8a0 <_Z4tonehjm+0xea>
 8a0:	00 f0       	brcs	.+0      	; 0x8a2 <_Z4tonehjm+0xec>
        {
          ocr = F_CPU / frequency / 2 / 32 - 1;
 8a2:	8c 85       	ldd	r24, Y+12	; 0x0c
 8a4:	9d 85       	ldd	r25, Y+13	; 0x0d
 8a6:	9c 01       	movw	r18, r24
 8a8:	40 e0       	ldi	r20, 0x00	; 0
 8aa:	50 e0       	ldi	r21, 0x00	; 0
 8ac:	80 e9       	ldi	r24, 0x90	; 144
 8ae:	90 ed       	ldi	r25, 0xD0	; 208
 8b0:	a3 e0       	ldi	r26, 0x03	; 3
 8b2:	b0 e0       	ldi	r27, 0x00	; 0
 8b4:	bc 01       	movw	r22, r24
 8b6:	cd 01       	movw	r24, r26
 8b8:	0e 94 00 00 	call	0	; 0x0 <_ZL9toneBeginh>
 8bc:	da 01       	movw	r26, r20
 8be:	c9 01       	movw	r24, r18
 8c0:	01 97       	sbiw	r24, 0x01	; 1
 8c2:	a1 09       	sbc	r26, r1
 8c4:	b1 09       	sbc	r27, r1
 8c6:	8a 83       	std	Y+2, r24	; 0x02
 8c8:	9b 83       	std	Y+3, r25	; 0x03
 8ca:	ac 83       	std	Y+4, r26	; 0x04
 8cc:	bd 83       	std	Y+5, r27	; 0x05
          prescalarbits = 0b011;
 8ce:	83 e0       	ldi	r24, 0x03	; 3
 8d0:	8a 87       	std	Y+10, r24	; 0x0a
        }

        if (ocr > 255)
 8d2:	8a 81       	ldd	r24, Y+2	; 0x02
 8d4:	9b 81       	ldd	r25, Y+3	; 0x03
 8d6:	ac 81       	ldd	r26, Y+4	; 0x04
 8d8:	bd 81       	ldd	r27, Y+5	; 0x05
 8da:	8f 3f       	cpi	r24, 0xFF	; 255
 8dc:	91 05       	cpc	r25, r1
 8de:	a1 05       	cpc	r26, r1
 8e0:	b1 05       	cpc	r27, r1
 8e2:	01 f0       	breq	.+0      	; 0x8e4 <_Z4tonehjm+0x12e>
 8e4:	00 f4       	brcc	.+0      	; 0x8e6 <_Z4tonehjm+0x130>
 8e6:	00 c0       	rjmp	.+0      	; 0x8e8 <_Z4tonehjm+0x132>
        {
          ocr = F_CPU / frequency / 2 / 64 - 1;
 8e8:	8c 85       	ldd	r24, Y+12	; 0x0c
 8ea:	9d 85       	ldd	r25, Y+13	; 0x0d
 8ec:	9c 01       	movw	r18, r24
 8ee:	40 e0       	ldi	r20, 0x00	; 0
 8f0:	50 e0       	ldi	r21, 0x00	; 0
 8f2:	88 e4       	ldi	r24, 0x48	; 72
 8f4:	98 ee       	ldi	r25, 0xE8	; 232
 8f6:	a1 e0       	ldi	r26, 0x01	; 1
 8f8:	b0 e0       	ldi	r27, 0x00	; 0
 8fa:	bc 01       	movw	r22, r24
 8fc:	cd 01       	movw	r24, r26
 8fe:	0e 94 00 00 	call	0	; 0x0 <_ZL9toneBeginh>
 902:	da 01       	movw	r26, r20
 904:	c9 01       	movw	r24, r18
 906:	01 97       	sbiw	r24, 0x01	; 1
 908:	a1 09       	sbc	r26, r1
 90a:	b1 09       	sbc	r27, r1
 90c:	8a 83       	std	Y+2, r24	; 0x02
 90e:	9b 83       	std	Y+3, r25	; 0x03
 910:	ac 83       	std	Y+4, r26	; 0x04
 912:	bd 83       	std	Y+5, r27	; 0x05
          prescalarbits = _timer == 0 ? 0b011 : 0b100;
 914:	89 81       	ldd	r24, Y+1	; 0x01
 916:	88 23       	and	r24, r24
 918:	01 f4       	brne	.+0      	; 0x91a <_Z4tonehjm+0x164>
 91a:	23 e0       	ldi	r18, 0x03	; 3
 91c:	2c 8b       	std	Y+20, r18	; 0x14
 91e:	00 c0       	rjmp	.+0      	; 0x920 <_Z4tonehjm+0x16a>
 920:	84 e0       	ldi	r24, 0x04	; 4
 922:	8c 8b       	std	Y+20, r24	; 0x14
 924:	2c 89       	ldd	r18, Y+20	; 0x14
 926:	2a 87       	std	Y+10, r18	; 0x0a

          if (_timer == 2 && ocr > 255)
 928:	89 81       	ldd	r24, Y+1	; 0x01
 92a:	82 30       	cpi	r24, 0x02	; 2
 92c:	01 f4       	brne	.+0      	; 0x92e <_Z4tonehjm+0x178>
 92e:	8a 81       	ldd	r24, Y+2	; 0x02
 930:	9b 81       	ldd	r25, Y+3	; 0x03
 932:	ac 81       	ldd	r26, Y+4	; 0x04
 934:	bd 81       	ldd	r27, Y+5	; 0x05
 936:	8f 3f       	cpi	r24, 0xFF	; 255
 938:	91 05       	cpc	r25, r1
 93a:	a1 05       	cpc	r26, r1
 93c:	b1 05       	cpc	r27, r1
 93e:	01 f0       	breq	.+0      	; 0x940 <_Z4tonehjm+0x18a>
 940:	00 f0       	brcs	.+0      	; 0x942 <_Z4tonehjm+0x18c>
          {
            ocr = F_CPU / frequency / 2 / 128 - 1;
 942:	8c 85       	ldd	r24, Y+12	; 0x0c
 944:	9d 85       	ldd	r25, Y+13	; 0x0d
 946:	9c 01       	movw	r18, r24
 948:	40 e0       	ldi	r20, 0x00	; 0
 94a:	50 e0       	ldi	r21, 0x00	; 0
 94c:	84 e2       	ldi	r24, 0x24	; 36
 94e:	94 ef       	ldi	r25, 0xF4	; 244
 950:	a0 e0       	ldi	r26, 0x00	; 0
 952:	b0 e0       	ldi	r27, 0x00	; 0
 954:	bc 01       	movw	r22, r24
 956:	cd 01       	movw	r24, r26
 958:	0e 94 00 00 	call	0	; 0x0 <_ZL9toneBeginh>
 95c:	da 01       	movw	r26, r20
 95e:	c9 01       	movw	r24, r18
 960:	01 97       	sbiw	r24, 0x01	; 1
 962:	a1 09       	sbc	r26, r1
 964:	b1 09       	sbc	r27, r1
 966:	8a 83       	std	Y+2, r24	; 0x02
 968:	9b 83       	std	Y+3, r25	; 0x03
 96a:	ac 83       	std	Y+4, r26	; 0x04
 96c:	bd 83       	std	Y+5, r27	; 0x05
            prescalarbits = 0b101;
 96e:	85 e0       	ldi	r24, 0x05	; 5
 970:	8a 87       	std	Y+10, r24	; 0x0a
          }

          if (ocr > 255)
 972:	8a 81       	ldd	r24, Y+2	; 0x02
 974:	9b 81       	ldd	r25, Y+3	; 0x03
 976:	ac 81       	ldd	r26, Y+4	; 0x04
 978:	bd 81       	ldd	r27, Y+5	; 0x05
 97a:	8f 3f       	cpi	r24, 0xFF	; 255
 97c:	91 05       	cpc	r25, r1
 97e:	a1 05       	cpc	r26, r1
 980:	b1 05       	cpc	r27, r1
 982:	01 f0       	breq	.+0      	; 0x984 <_Z4tonehjm+0x1ce>
 984:	00 f4       	brcc	.+0      	; 0x986 <_Z4tonehjm+0x1d0>
 986:	00 c0       	rjmp	.+0      	; 0x988 <_Z4tonehjm+0x1d2>
          {
            ocr = F_CPU / frequency / 2 / 256 - 1;
 988:	8c 85       	ldd	r24, Y+12	; 0x0c
 98a:	9d 85       	ldd	r25, Y+13	; 0x0d
 98c:	9c 01       	movw	r18, r24
 98e:	40 e0       	ldi	r20, 0x00	; 0
 990:	50 e0       	ldi	r21, 0x00	; 0
 992:	82 e1       	ldi	r24, 0x12	; 18
 994:	9a e7       	ldi	r25, 0x7A	; 122
 996:	a0 e0       	ldi	r26, 0x00	; 0
 998:	b0 e0       	ldi	r27, 0x00	; 0
 99a:	bc 01       	movw	r22, r24
 99c:	cd 01       	movw	r24, r26
 99e:	0e 94 00 00 	call	0	; 0x0 <_ZL9toneBeginh>
 9a2:	da 01       	movw	r26, r20
 9a4:	c9 01       	movw	r24, r18
 9a6:	01 97       	sbiw	r24, 0x01	; 1
 9a8:	a1 09       	sbc	r26, r1
 9aa:	b1 09       	sbc	r27, r1
 9ac:	8a 83       	std	Y+2, r24	; 0x02
 9ae:	9b 83       	std	Y+3, r25	; 0x03
 9b0:	ac 83       	std	Y+4, r26	; 0x04
 9b2:	bd 83       	std	Y+5, r27	; 0x05
            prescalarbits = _timer == 0 ? 0b100 : 0b110;
 9b4:	89 81       	ldd	r24, Y+1	; 0x01
 9b6:	88 23       	and	r24, r24
 9b8:	01 f4       	brne	.+0      	; 0x9ba <_Z4tonehjm+0x204>
 9ba:	84 e0       	ldi	r24, 0x04	; 4
 9bc:	8b 8b       	std	Y+19, r24	; 0x13
 9be:	00 c0       	rjmp	.+0      	; 0x9c0 <_Z4tonehjm+0x20a>
 9c0:	26 e0       	ldi	r18, 0x06	; 6
 9c2:	2b 8b       	std	Y+19, r18	; 0x13
 9c4:	8b 89       	ldd	r24, Y+19	; 0x13
 9c6:	8a 87       	std	Y+10, r24	; 0x0a
            if (ocr > 255)
 9c8:	8a 81       	ldd	r24, Y+2	; 0x02
 9ca:	9b 81       	ldd	r25, Y+3	; 0x03
 9cc:	ac 81       	ldd	r26, Y+4	; 0x04
 9ce:	bd 81       	ldd	r27, Y+5	; 0x05
 9d0:	8f 3f       	cpi	r24, 0xFF	; 255
 9d2:	91 05       	cpc	r25, r1
 9d4:	a1 05       	cpc	r26, r1
 9d6:	b1 05       	cpc	r27, r1
 9d8:	01 f0       	breq	.+0      	; 0x9da <_Z4tonehjm+0x224>
 9da:	00 f0       	brcs	.+0      	; 0x9dc <_Z4tonehjm+0x226>
            {
              // can't do any better than /1024
              ocr = F_CPU / frequency / 2 / 1024 - 1;
 9dc:	8c 85       	ldd	r24, Y+12	; 0x0c
 9de:	9d 85       	ldd	r25, Y+13	; 0x0d
 9e0:	9c 01       	movw	r18, r24
 9e2:	40 e0       	ldi	r20, 0x00	; 0
 9e4:	50 e0       	ldi	r21, 0x00	; 0
 9e6:	80 e0       	ldi	r24, 0x00	; 0
 9e8:	92 e1       	ldi	r25, 0x12	; 18
 9ea:	aa e7       	ldi	r26, 0x7A	; 122
 9ec:	b0 e0       	ldi	r27, 0x00	; 0
 9ee:	bc 01       	movw	r22, r24
 9f0:	cd 01       	movw	r24, r26
 9f2:	0e 94 00 00 	call	0	; 0x0 <_ZL9toneBeginh>
 9f6:	da 01       	movw	r26, r20
 9f8:	c9 01       	movw	r24, r18
 9fa:	07 2e       	mov	r0, r23
 9fc:	7a e0       	ldi	r23, 0x0A	; 10
 9fe:	b6 95       	lsr	r27
 a00:	a7 95       	ror	r26
 a02:	97 95       	ror	r25
 a04:	87 95       	ror	r24
 a06:	7a 95       	dec	r23
 a08:	01 f4       	brne	.+0      	; 0xa0a <_Z4tonehjm+0x254>
 a0a:	70 2d       	mov	r23, r0
 a0c:	01 97       	sbiw	r24, 0x01	; 1
 a0e:	a1 09       	sbc	r26, r1
 a10:	b1 09       	sbc	r27, r1
 a12:	8a 83       	std	Y+2, r24	; 0x02
 a14:	9b 83       	std	Y+3, r25	; 0x03
 a16:	ac 83       	std	Y+4, r26	; 0x04
 a18:	bd 83       	std	Y+5, r27	; 0x05
              prescalarbits = _timer == 0 ? 0b101 : 0b111;
 a1a:	89 81       	ldd	r24, Y+1	; 0x01
 a1c:	88 23       	and	r24, r24
 a1e:	01 f4       	brne	.+0      	; 0xa20 <_Z4tonehjm+0x26a>
 a20:	25 e0       	ldi	r18, 0x05	; 5
 a22:	2a 8b       	std	Y+18, r18	; 0x12
 a24:	00 c0       	rjmp	.+0      	; 0xa26 <_Z4tonehjm+0x270>
 a26:	87 e0       	ldi	r24, 0x07	; 7
 a28:	8a 8b       	std	Y+18, r24	; 0x12
 a2a:	2a 89       	ldd	r18, Y+18	; 0x12
 a2c:	2a 87       	std	Y+10, r18	; 0x0a
          }
        }
      }

#if defined(TCCR0B)
      if (_timer == 0)
 a2e:	89 81       	ldd	r24, Y+1	; 0x01
 a30:	88 23       	and	r24, r24
 a32:	01 f4       	brne	.+0      	; 0xa34 <_Z4tonehjm+0x27e>
      {
        TCCR0B = prescalarbits;
 a34:	e5 e4       	ldi	r30, 0x45	; 69
 a36:	f0 e0       	ldi	r31, 0x00	; 0
 a38:	8a 85       	ldd	r24, Y+10	; 0x0a
 a3a:	80 83       	st	Z, r24
 a3c:	00 c0       	rjmp	.+0      	; 0xa3e <_Z4tonehjm+0x288>
      }
      else
#endif
#if defined(TCCR2B)
      {
        TCCR2B = prescalarbits;
 a3e:	e1 eb       	ldi	r30, 0xB1	; 177
 a40:	f0 e0       	ldi	r31, 0x00	; 0
 a42:	8a 85       	ldd	r24, Y+10	; 0x0a
 a44:	80 83       	st	Z, r24
 a46:	00 c0       	rjmp	.+0      	; 0xa48 <_Z4tonehjm+0x292>
#endif
    }
    else
    {
      // two choices for the 16 bit timers: ck/1 or ck/64
      ocr = F_CPU / frequency / 2 - 1;
 a48:	8c 85       	ldd	r24, Y+12	; 0x0c
 a4a:	9d 85       	ldd	r25, Y+13	; 0x0d
 a4c:	9c 01       	movw	r18, r24
 a4e:	40 e0       	ldi	r20, 0x00	; 0
 a50:	50 e0       	ldi	r21, 0x00	; 0
 a52:	80 e0       	ldi	r24, 0x00	; 0
 a54:	92 e1       	ldi	r25, 0x12	; 18
 a56:	aa e7       	ldi	r26, 0x7A	; 122
 a58:	b0 e0       	ldi	r27, 0x00	; 0
 a5a:	bc 01       	movw	r22, r24
 a5c:	cd 01       	movw	r24, r26
 a5e:	0e 94 00 00 	call	0	; 0x0 <_ZL9toneBeginh>
 a62:	da 01       	movw	r26, r20
 a64:	c9 01       	movw	r24, r18
 a66:	01 97       	sbiw	r24, 0x01	; 1
 a68:	a1 09       	sbc	r26, r1
 a6a:	b1 09       	sbc	r27, r1
 a6c:	8a 83       	std	Y+2, r24	; 0x02
 a6e:	9b 83       	std	Y+3, r25	; 0x03
 a70:	ac 83       	std	Y+4, r26	; 0x04
 a72:	bd 83       	std	Y+5, r27	; 0x05

      prescalarbits = 0b001;
 a74:	81 e0       	ldi	r24, 0x01	; 1
 a76:	8a 87       	std	Y+10, r24	; 0x0a
      if (ocr > 0xffff)
 a78:	8a 81       	ldd	r24, Y+2	; 0x02
 a7a:	9b 81       	ldd	r25, Y+3	; 0x03
 a7c:	ac 81       	ldd	r26, Y+4	; 0x04
 a7e:	bd 81       	ldd	r27, Y+5	; 0x05
 a80:	80 30       	cpi	r24, 0x00	; 0
 a82:	20 e0       	ldi	r18, 0x00	; 0
 a84:	92 07       	cpc	r25, r18
 a86:	21 e0       	ldi	r18, 0x01	; 1
 a88:	a2 07       	cpc	r26, r18
 a8a:	20 e0       	ldi	r18, 0x00	; 0
 a8c:	b2 07       	cpc	r27, r18
 a8e:	00 f0       	brcs	.+0      	; 0xa90 <_Z4tonehjm+0x2da>
      {
        ocr = F_CPU / frequency / 2 / 64 - 1;
 a90:	8c 85       	ldd	r24, Y+12	; 0x0c
 a92:	9d 85       	ldd	r25, Y+13	; 0x0d
 a94:	9c 01       	movw	r18, r24
 a96:	40 e0       	ldi	r20, 0x00	; 0
 a98:	50 e0       	ldi	r21, 0x00	; 0
 a9a:	88 e4       	ldi	r24, 0x48	; 72
 a9c:	98 ee       	ldi	r25, 0xE8	; 232
 a9e:	a1 e0       	ldi	r26, 0x01	; 1
 aa0:	b0 e0       	ldi	r27, 0x00	; 0
 aa2:	bc 01       	movw	r22, r24
 aa4:	cd 01       	movw	r24, r26
 aa6:	0e 94 00 00 	call	0	; 0x0 <_ZL9toneBeginh>
 aaa:	da 01       	movw	r26, r20
 aac:	c9 01       	movw	r24, r18
 aae:	01 97       	sbiw	r24, 0x01	; 1
 ab0:	a1 09       	sbc	r26, r1
 ab2:	b1 09       	sbc	r27, r1
 ab4:	8a 83       	std	Y+2, r24	; 0x02
 ab6:	9b 83       	std	Y+3, r25	; 0x03
 ab8:	ac 83       	std	Y+4, r26	; 0x04
 aba:	bd 83       	std	Y+5, r27	; 0x05
        prescalarbits = 0b011;
 abc:	83 e0       	ldi	r24, 0x03	; 3
 abe:	8a 87       	std	Y+10, r24	; 0x0a
      }

      if (_timer == 1)
 ac0:	89 81       	ldd	r24, Y+1	; 0x01
 ac2:	81 30       	cpi	r24, 0x01	; 1
 ac4:	01 f4       	brne	.+0      	; 0xac6 <_Z4tonehjm+0x310>
      {
#if defined(TCCR1B)
        TCCR1B = (TCCR1B & 0b11111000) | prescalarbits;
 ac6:	a1 e8       	ldi	r26, 0x81	; 129
 ac8:	b0 e0       	ldi	r27, 0x00	; 0
 aca:	e1 e8       	ldi	r30, 0x81	; 129
 acc:	f0 e0       	ldi	r31, 0x00	; 0
 ace:	80 81       	ld	r24, Z
 ad0:	98 2f       	mov	r25, r24
 ad2:	98 7f       	andi	r25, 0xF8	; 248
 ad4:	8a 85       	ldd	r24, Y+10	; 0x0a
 ad6:	89 2b       	or	r24, r25
 ad8:	8c 93       	st	X, r24
 ada:	00 c0       	rjmp	.+0      	; 0xadc <_Z4tonehjm+0x326>
#endif
      }
#if defined(TCCR3B)
      else if (_timer == 3)
 adc:	89 81       	ldd	r24, Y+1	; 0x01
 ade:	83 30       	cpi	r24, 0x03	; 3
 ae0:	01 f4       	brne	.+0      	; 0xae2 <_Z4tonehjm+0x32c>
        TCCR3B = (TCCR3B & 0b11111000) | prescalarbits;
 ae2:	a1 e9       	ldi	r26, 0x91	; 145
 ae4:	b0 e0       	ldi	r27, 0x00	; 0
 ae6:	e1 e9       	ldi	r30, 0x91	; 145
 ae8:	f0 e0       	ldi	r31, 0x00	; 0
 aea:	80 81       	ld	r24, Z
 aec:	98 2f       	mov	r25, r24
 aee:	98 7f       	andi	r25, 0xF8	; 248
 af0:	8a 85       	ldd	r24, Y+10	; 0x0a
 af2:	89 2b       	or	r24, r25
 af4:	8c 93       	st	X, r24
 af6:	00 c0       	rjmp	.+0      	; 0xaf8 <_Z4tonehjm+0x342>
#endif
#if defined(TCCR4B)
      else if (_timer == 4)
 af8:	89 81       	ldd	r24, Y+1	; 0x01
 afa:	84 30       	cpi	r24, 0x04	; 4
 afc:	01 f4       	brne	.+0      	; 0xafe <_Z4tonehjm+0x348>
        TCCR4B = (TCCR4B & 0b11111000) | prescalarbits;
 afe:	a1 ea       	ldi	r26, 0xA1	; 161
 b00:	b0 e0       	ldi	r27, 0x00	; 0
 b02:	e1 ea       	ldi	r30, 0xA1	; 161
 b04:	f0 e0       	ldi	r31, 0x00	; 0
 b06:	80 81       	ld	r24, Z
 b08:	98 2f       	mov	r25, r24
 b0a:	98 7f       	andi	r25, 0xF8	; 248
 b0c:	8a 85       	ldd	r24, Y+10	; 0x0a
 b0e:	89 2b       	or	r24, r25
 b10:	8c 93       	st	X, r24
 b12:	00 c0       	rjmp	.+0      	; 0xb14 <_Z4tonehjm+0x35e>
#endif
#if defined(TCCR5B)
      else if (_timer == 5)
 b14:	89 81       	ldd	r24, Y+1	; 0x01
 b16:	85 30       	cpi	r24, 0x05	; 5
 b18:	01 f4       	brne	.+0      	; 0xb1a <_Z4tonehjm+0x364>
        TCCR5B = (TCCR5B & 0b11111000) | prescalarbits;
 b1a:	a1 e2       	ldi	r26, 0x21	; 33
 b1c:	b1 e0       	ldi	r27, 0x01	; 1
 b1e:	e1 e2       	ldi	r30, 0x21	; 33
 b20:	f1 e0       	ldi	r31, 0x01	; 1
 b22:	80 81       	ld	r24, Z
 b24:	98 2f       	mov	r25, r24
 b26:	98 7f       	andi	r25, 0xF8	; 248
 b28:	8a 85       	ldd	r24, Y+10	; 0x0a
 b2a:	89 2b       	or	r24, r25
 b2c:	8c 93       	st	X, r24

    }
    

    // Calculate the toggle count
    if (duration > 0)
 b2e:	8e 85       	ldd	r24, Y+14	; 0x0e
 b30:	9f 85       	ldd	r25, Y+15	; 0x0f
 b32:	a8 89       	ldd	r26, Y+16	; 0x10
 b34:	b9 89       	ldd	r27, Y+17	; 0x11
 b36:	00 97       	sbiw	r24, 0x00	; 0
 b38:	a1 05       	cpc	r26, r1
 b3a:	b1 05       	cpc	r27, r1
 b3c:	01 f0       	breq	.+0      	; 0xb3e <_Z4tonehjm+0x388>
    {
      toggle_count = 2 * frequency * duration / 1000;
 b3e:	8c 85       	ldd	r24, Y+12	; 0x0c
 b40:	9d 85       	ldd	r25, Y+13	; 0x0d
 b42:	88 0f       	add	r24, r24
 b44:	99 1f       	adc	r25, r25
 b46:	cc 01       	movw	r24, r24
 b48:	a0 e0       	ldi	r26, 0x00	; 0
 b4a:	b0 e0       	ldi	r27, 0x00	; 0
 b4c:	2e 85       	ldd	r18, Y+14	; 0x0e
 b4e:	3f 85       	ldd	r19, Y+15	; 0x0f
 b50:	48 89       	ldd	r20, Y+16	; 0x10
 b52:	59 89       	ldd	r21, Y+17	; 0x11
 b54:	bc 01       	movw	r22, r24
 b56:	cd 01       	movw	r24, r26
 b58:	0e 94 00 00 	call	0	; 0x0 <_ZL9toneBeginh>
 b5c:	dc 01       	movw	r26, r24
 b5e:	cb 01       	movw	r24, r22
 b60:	28 ee       	ldi	r18, 0xE8	; 232
 b62:	33 e0       	ldi	r19, 0x03	; 3
 b64:	40 e0       	ldi	r20, 0x00	; 0
 b66:	50 e0       	ldi	r21, 0x00	; 0
 b68:	bc 01       	movw	r22, r24
 b6a:	cd 01       	movw	r24, r26
 b6c:	0e 94 00 00 	call	0	; 0x0 <_ZL9toneBeginh>
 b70:	da 01       	movw	r26, r20
 b72:	c9 01       	movw	r24, r18
 b74:	8e 83       	std	Y+6, r24	; 0x06
 b76:	9f 83       	std	Y+7, r25	; 0x07
 b78:	a8 87       	std	Y+8, r26	; 0x08
 b7a:	b9 87       	std	Y+9, r27	; 0x09
 b7c:	00 c0       	rjmp	.+0      	; 0xb7e <_Z4tonehjm+0x3c8>
    }
    else
    {
      toggle_count = -1;
 b7e:	8f ef       	ldi	r24, 0xFF	; 255
 b80:	9f ef       	ldi	r25, 0xFF	; 255
 b82:	af ef       	ldi	r26, 0xFF	; 255
 b84:	bf ef       	ldi	r27, 0xFF	; 255
 b86:	8e 83       	std	Y+6, r24	; 0x06
 b88:	9f 83       	std	Y+7, r25	; 0x07
 b8a:	a8 87       	std	Y+8, r26	; 0x08
 b8c:	b9 87       	std	Y+9, r27	; 0x09
    }

    // Set the OCR for the given timer,
    // set the toggle count,
    // then turn on the interrupts
    switch (_timer)
 b8e:	89 81       	ldd	r24, Y+1	; 0x01
 b90:	8d 8b       	std	Y+21, r24	; 0x15
 b92:	2d 89       	ldd	r18, Y+21	; 0x15
 b94:	22 30       	cpi	r18, 0x02	; 2
 b96:	01 f4       	brne	.+0      	; 0xb98 <_Z4tonehjm+0x3e2>
 b98:	00 c0       	rjmp	.+0      	; 0xb9a <_Z4tonehjm+0x3e4>
 b9a:	8d 89       	ldd	r24, Y+21	; 0x15
 b9c:	83 30       	cpi	r24, 0x03	; 3
 b9e:	04 f4       	brge	.+0      	; 0xba0 <_Z4tonehjm+0x3ea>
 ba0:	2d 89       	ldd	r18, Y+21	; 0x15
 ba2:	22 23       	and	r18, r18
 ba4:	01 f0       	breq	.+0      	; 0xba6 <_Z4tonehjm+0x3f0>
 ba6:	8d 89       	ldd	r24, Y+21	; 0x15
 ba8:	81 30       	cpi	r24, 0x01	; 1
 baa:	01 f0       	breq	.+0      	; 0xbac <_Z4tonehjm+0x3f6>
 bac:	00 c0       	rjmp	.+0      	; 0xbae <_Z4tonehjm+0x3f8>
 bae:	2d 89       	ldd	r18, Y+21	; 0x15
 bb0:	24 30       	cpi	r18, 0x04	; 4
 bb2:	01 f4       	brne	.+0      	; 0xbb4 <_Z4tonehjm+0x3fe>
 bb4:	00 c0       	rjmp	.+0      	; 0xbb6 <_Z4tonehjm+0x400>
 bb6:	8d 89       	ldd	r24, Y+21	; 0x15
 bb8:	84 30       	cpi	r24, 0x04	; 4
 bba:	04 f4       	brge	.+0      	; 0xbbc <_Z4tonehjm+0x406>
 bbc:	00 c0       	rjmp	.+0      	; 0xbbe <_Z4tonehjm+0x408>
 bbe:	2d 89       	ldd	r18, Y+21	; 0x15
 bc0:	25 30       	cpi	r18, 0x05	; 5
 bc2:	01 f4       	brne	.+0      	; 0xbc4 <_Z4tonehjm+0x40e>
 bc4:	00 c0       	rjmp	.+0      	; 0xbc6 <_Z4tonehjm+0x410>
 bc6:	00 c0       	rjmp	.+0      	; 0xbc8 <_Z4tonehjm+0x412>
    {

#if defined(OCR0A) && defined(TIMSK0) && defined(OCIE0A)
      case 0:
        OCR0A = ocr;
 bc8:	e7 e4       	ldi	r30, 0x47	; 71
 bca:	f0 e0       	ldi	r31, 0x00	; 0
 bcc:	8a 81       	ldd	r24, Y+2	; 0x02
 bce:	80 83       	st	Z, r24
        timer0_toggle_count = toggle_count;
 bd0:	8e 81       	ldd	r24, Y+6	; 0x06
 bd2:	9f 81       	ldd	r25, Y+7	; 0x07
 bd4:	a8 85       	ldd	r26, Y+8	; 0x08
 bd6:	b9 85       	ldd	r27, Y+9	; 0x09
 bd8:	80 93 00 00 	sts	0x0000, r24
 bdc:	90 93 00 00 	sts	0x0000, r25
 be0:	a0 93 00 00 	sts	0x0000, r26
 be4:	b0 93 00 00 	sts	0x0000, r27
        bitWrite(TIMSK0, OCIE0A, 1);
 be8:	ae e6       	ldi	r26, 0x6E	; 110
 bea:	b0 e0       	ldi	r27, 0x00	; 0
 bec:	ee e6       	ldi	r30, 0x6E	; 110
 bee:	f0 e0       	ldi	r31, 0x00	; 0
 bf0:	80 81       	ld	r24, Z
 bf2:	82 60       	ori	r24, 0x02	; 2
 bf4:	8c 93       	st	X, r24
 bf6:	00 c0       	rjmp	.+0      	; 0xbf8 <_Z4tonehjm+0x442>
        break;
#endif

      case 1:
#if defined(OCR1A) && defined(TIMSK1) && defined(OCIE1A)
        OCR1A = ocr;
 bf8:	e8 e8       	ldi	r30, 0x88	; 136
 bfa:	f0 e0       	ldi	r31, 0x00	; 0
 bfc:	8a 81       	ldd	r24, Y+2	; 0x02
 bfe:	9b 81       	ldd	r25, Y+3	; 0x03
 c00:	91 83       	std	Z+1, r25	; 0x01
 c02:	80 83       	st	Z, r24
        timer1_toggle_count = toggle_count;
 c04:	8e 81       	ldd	r24, Y+6	; 0x06
 c06:	9f 81       	ldd	r25, Y+7	; 0x07
 c08:	a8 85       	ldd	r26, Y+8	; 0x08
 c0a:	b9 85       	ldd	r27, Y+9	; 0x09
 c0c:	80 93 00 00 	sts	0x0000, r24
 c10:	90 93 00 00 	sts	0x0000, r25
 c14:	a0 93 00 00 	sts	0x0000, r26
 c18:	b0 93 00 00 	sts	0x0000, r27
        bitWrite(TIMSK1, OCIE1A, 1);
 c1c:	af e6       	ldi	r26, 0x6F	; 111
 c1e:	b0 e0       	ldi	r27, 0x00	; 0
 c20:	ef e6       	ldi	r30, 0x6F	; 111
 c22:	f0 e0       	ldi	r31, 0x00	; 0
 c24:	80 81       	ld	r24, Z
 c26:	82 60       	ori	r24, 0x02	; 2
 c28:	8c 93       	st	X, r24
 c2a:	00 c0       	rjmp	.+0      	; 0xc2c <_Z4tonehjm+0x476>
#endif
        break;

#if defined(OCR2A) && defined(TIMSK2) && defined(OCIE2A)
      case 2:
        OCR2A = ocr;
 c2c:	e3 eb       	ldi	r30, 0xB3	; 179
 c2e:	f0 e0       	ldi	r31, 0x00	; 0
 c30:	8a 81       	ldd	r24, Y+2	; 0x02
 c32:	80 83       	st	Z, r24
        timer2_toggle_count = toggle_count;
 c34:	8e 81       	ldd	r24, Y+6	; 0x06
 c36:	9f 81       	ldd	r25, Y+7	; 0x07
 c38:	a8 85       	ldd	r26, Y+8	; 0x08
 c3a:	b9 85       	ldd	r27, Y+9	; 0x09
 c3c:	80 93 00 00 	sts	0x0000, r24
 c40:	90 93 00 00 	sts	0x0000, r25
 c44:	a0 93 00 00 	sts	0x0000, r26
 c48:	b0 93 00 00 	sts	0x0000, r27
        bitWrite(TIMSK2, OCIE2A, 1);
 c4c:	a0 e7       	ldi	r26, 0x70	; 112
 c4e:	b0 e0       	ldi	r27, 0x00	; 0
 c50:	e0 e7       	ldi	r30, 0x70	; 112
 c52:	f0 e0       	ldi	r31, 0x00	; 0
 c54:	80 81       	ld	r24, Z
 c56:	82 60       	ori	r24, 0x02	; 2
 c58:	8c 93       	st	X, r24
 c5a:	00 c0       	rjmp	.+0      	; 0xc5c <_Z4tonehjm+0x4a6>
        break;
#endif

#if defined(TIMSK3)
      case 3:
        OCR3A = ocr;
 c5c:	e8 e9       	ldi	r30, 0x98	; 152
 c5e:	f0 e0       	ldi	r31, 0x00	; 0
 c60:	8a 81       	ldd	r24, Y+2	; 0x02
 c62:	9b 81       	ldd	r25, Y+3	; 0x03
 c64:	91 83       	std	Z+1, r25	; 0x01
 c66:	80 83       	st	Z, r24
        timer3_toggle_count = toggle_count;
 c68:	8e 81       	ldd	r24, Y+6	; 0x06
 c6a:	9f 81       	ldd	r25, Y+7	; 0x07
 c6c:	a8 85       	ldd	r26, Y+8	; 0x08
 c6e:	b9 85       	ldd	r27, Y+9	; 0x09
 c70:	80 93 00 00 	sts	0x0000, r24
 c74:	90 93 00 00 	sts	0x0000, r25
 c78:	a0 93 00 00 	sts	0x0000, r26
 c7c:	b0 93 00 00 	sts	0x0000, r27
        bitWrite(TIMSK3, OCIE3A, 1);
 c80:	a1 e7       	ldi	r26, 0x71	; 113
 c82:	b0 e0       	ldi	r27, 0x00	; 0
 c84:	e1 e7       	ldi	r30, 0x71	; 113
 c86:	f0 e0       	ldi	r31, 0x00	; 0
 c88:	80 81       	ld	r24, Z
 c8a:	82 60       	ori	r24, 0x02	; 2
 c8c:	8c 93       	st	X, r24
 c8e:	00 c0       	rjmp	.+0      	; 0xc90 <_Z4tonehjm+0x4da>
        break;
#endif

#if defined(TIMSK4)
      case 4:
        OCR4A = ocr;
 c90:	e8 ea       	ldi	r30, 0xA8	; 168
 c92:	f0 e0       	ldi	r31, 0x00	; 0
 c94:	8a 81       	ldd	r24, Y+2	; 0x02
 c96:	9b 81       	ldd	r25, Y+3	; 0x03
 c98:	91 83       	std	Z+1, r25	; 0x01
 c9a:	80 83       	st	Z, r24
        timer4_toggle_count = toggle_count;
 c9c:	8e 81       	ldd	r24, Y+6	; 0x06
 c9e:	9f 81       	ldd	r25, Y+7	; 0x07
 ca0:	a8 85       	ldd	r26, Y+8	; 0x08
 ca2:	b9 85       	ldd	r27, Y+9	; 0x09
 ca4:	80 93 00 00 	sts	0x0000, r24
 ca8:	90 93 00 00 	sts	0x0000, r25
 cac:	a0 93 00 00 	sts	0x0000, r26
 cb0:	b0 93 00 00 	sts	0x0000, r27
        bitWrite(TIMSK4, OCIE4A, 1);
 cb4:	a2 e7       	ldi	r26, 0x72	; 114
 cb6:	b0 e0       	ldi	r27, 0x00	; 0
 cb8:	e2 e7       	ldi	r30, 0x72	; 114
 cba:	f0 e0       	ldi	r31, 0x00	; 0
 cbc:	80 81       	ld	r24, Z
 cbe:	82 60       	ori	r24, 0x02	; 2
 cc0:	8c 93       	st	X, r24
 cc2:	00 c0       	rjmp	.+0      	; 0xcc4 <_Z4tonehjm+0x50e>
        break;
#endif

#if defined(OCR5A) && defined(TIMSK5) && defined(OCIE5A)
      case 5:
        OCR5A = ocr;
 cc4:	e8 e2       	ldi	r30, 0x28	; 40
 cc6:	f1 e0       	ldi	r31, 0x01	; 1
 cc8:	8a 81       	ldd	r24, Y+2	; 0x02
 cca:	9b 81       	ldd	r25, Y+3	; 0x03
 ccc:	91 83       	std	Z+1, r25	; 0x01
 cce:	80 83       	st	Z, r24
        timer5_toggle_count = toggle_count;
 cd0:	8e 81       	ldd	r24, Y+6	; 0x06
 cd2:	9f 81       	ldd	r25, Y+7	; 0x07
 cd4:	a8 85       	ldd	r26, Y+8	; 0x08
 cd6:	b9 85       	ldd	r27, Y+9	; 0x09
 cd8:	80 93 00 00 	sts	0x0000, r24
 cdc:	90 93 00 00 	sts	0x0000, r25
 ce0:	a0 93 00 00 	sts	0x0000, r26
 ce4:	b0 93 00 00 	sts	0x0000, r27
        bitWrite(TIMSK5, OCIE5A, 1);
 ce8:	a3 e7       	ldi	r26, 0x73	; 115
 cea:	b0 e0       	ldi	r27, 0x00	; 0
 cec:	e3 e7       	ldi	r30, 0x73	; 115
 cee:	f0 e0       	ldi	r31, 0x00	; 0
 cf0:	80 81       	ld	r24, Z
 cf2:	82 60       	ori	r24, 0x02	; 2
 cf4:	8c 93       	st	X, r24
        break;
#endif

    }
  }
}
 cf6:	65 96       	adiw	r28, 0x15	; 21
 cf8:	0f b6       	in	r0, 0x3f	; 63
 cfa:	f8 94       	cli
 cfc:	de bf       	out	0x3e, r29	; 62
 cfe:	0f be       	out	0x3f, r0	; 63
 d00:	cd bf       	out	0x3d, r28	; 61
 d02:	cf 91       	pop	r28
 d04:	df 91       	pop	r29
 d06:	08 95       	ret

WInterrupts.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000006e2  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000716  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  00000000  00000000  00000716  2**0
                  ALLOC
  3 .stab         00000870  00000000  00000000  00000718  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00000c65  00000000  00000000  00000f88  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <attachInterrupt>:
#include "wiring_private.h"

volatile static voidFuncPtr intFunc[EXTERNAL_NUM_INTERRUPTS];
// volatile static voidFuncPtr twiIntFunc;

void attachInterrupt(uint8_t interruptNum, void (*userFunc)(void), int mode) {
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	cd b7       	in	r28, 0x3d	; 61
   6:	de b7       	in	r29, 0x3e	; 62
   8:	27 97       	sbiw	r28, 0x07	; 7
   a:	0f b6       	in	r0, 0x3f	; 63
   c:	f8 94       	cli
   e:	de bf       	out	0x3e, r29	; 62
  10:	0f be       	out	0x3f, r0	; 63
  12:	cd bf       	out	0x3d, r28	; 61
  14:	89 83       	std	Y+1, r24	; 0x01
  16:	7b 83       	std	Y+3, r23	; 0x03
  18:	6a 83       	std	Y+2, r22	; 0x02
  1a:	5d 83       	std	Y+5, r21	; 0x05
  1c:	4c 83       	std	Y+4, r20	; 0x04
  if(interruptNum < EXTERNAL_NUM_INTERRUPTS) {
  1e:	89 81       	ldd	r24, Y+1	; 0x01
  20:	88 30       	cpi	r24, 0x08	; 8
  22:	00 f0       	brcs	.+0      	; 0x24 <attachInterrupt+0x24>
  24:	00 c0       	rjmp	.+0      	; 0x26 <attachInterrupt+0x26>
    intFunc[interruptNum] = userFunc;
  26:	89 81       	ldd	r24, Y+1	; 0x01
  28:	88 2f       	mov	r24, r24
  2a:	90 e0       	ldi	r25, 0x00	; 0
  2c:	88 0f       	add	r24, r24
  2e:	99 1f       	adc	r25, r25
  30:	fc 01       	movw	r30, r24
  32:	e0 50       	subi	r30, 0x00	; 0
  34:	f0 40       	sbci	r31, 0x00	; 0
  36:	8a 81       	ldd	r24, Y+2	; 0x02
  38:	9b 81       	ldd	r25, Y+3	; 0x03
  3a:	91 83       	std	Z+1, r25	; 0x01
  3c:	80 83       	st	Z, r24
    // to the configuration bits in the hardware register, so we simply shift
    // the mode into place.
      
    // Enable the interrupt.
      
    switch (interruptNum) {
  3e:	89 81       	ldd	r24, Y+1	; 0x01
  40:	28 2f       	mov	r18, r24
  42:	30 e0       	ldi	r19, 0x00	; 0
  44:	3f 83       	std	Y+7, r19	; 0x07
  46:	2e 83       	std	Y+6, r18	; 0x06
  48:	8e 81       	ldd	r24, Y+6	; 0x06
  4a:	9f 81       	ldd	r25, Y+7	; 0x07
  4c:	83 30       	cpi	r24, 0x03	; 3
  4e:	91 05       	cpc	r25, r1
  50:	01 f4       	brne	.+0      	; 0x52 <attachInterrupt+0x52>
  52:	00 c0       	rjmp	.+0      	; 0x54 <attachInterrupt+0x54>
  54:	2e 81       	ldd	r18, Y+6	; 0x06
  56:	3f 81       	ldd	r19, Y+7	; 0x07
  58:	24 30       	cpi	r18, 0x04	; 4
  5a:	31 05       	cpc	r19, r1
  5c:	04 f4       	brge	.+0      	; 0x5e <attachInterrupt+0x5e>
  5e:	8e 81       	ldd	r24, Y+6	; 0x06
  60:	9f 81       	ldd	r25, Y+7	; 0x07
  62:	81 30       	cpi	r24, 0x01	; 1
  64:	91 05       	cpc	r25, r1
  66:	01 f4       	brne	.+0      	; 0x68 <attachInterrupt+0x68>
  68:	00 c0       	rjmp	.+0      	; 0x6a <attachInterrupt+0x6a>
  6a:	2e 81       	ldd	r18, Y+6	; 0x06
  6c:	3f 81       	ldd	r19, Y+7	; 0x07
  6e:	22 30       	cpi	r18, 0x02	; 2
  70:	31 05       	cpc	r19, r1
  72:	04 f4       	brge	.+0      	; 0x74 <attachInterrupt+0x74>
  74:	8e 81       	ldd	r24, Y+6	; 0x06
  76:	9f 81       	ldd	r25, Y+7	; 0x07
  78:	00 97       	sbiw	r24, 0x00	; 0
  7a:	01 f4       	brne	.+0      	; 0x7c <attachInterrupt+0x7c>
  7c:	00 c0       	rjmp	.+0      	; 0x7e <attachInterrupt+0x7e>
  7e:	00 c0       	rjmp	.+0      	; 0x80 <attachInterrupt+0x80>
  80:	2e 81       	ldd	r18, Y+6	; 0x06
  82:	3f 81       	ldd	r19, Y+7	; 0x07
  84:	25 30       	cpi	r18, 0x05	; 5
  86:	31 05       	cpc	r19, r1
  88:	01 f4       	brne	.+0      	; 0x8a <attachInterrupt+0x8a>
  8a:	00 c0       	rjmp	.+0      	; 0x8c <attachInterrupt+0x8c>
  8c:	8e 81       	ldd	r24, Y+6	; 0x06
  8e:	9f 81       	ldd	r25, Y+7	; 0x07
  90:	85 30       	cpi	r24, 0x05	; 5
  92:	91 05       	cpc	r25, r1
  94:	04 f0       	brlt	.+0      	; 0x96 <attachInterrupt+0x96>
  96:	2e 81       	ldd	r18, Y+6	; 0x06
  98:	3f 81       	ldd	r19, Y+7	; 0x07
  9a:	26 30       	cpi	r18, 0x06	; 6
  9c:	31 05       	cpc	r19, r1
  9e:	01 f4       	brne	.+0      	; 0xa0 <attachInterrupt+0xa0>
  a0:	00 c0       	rjmp	.+0      	; 0xa2 <attachInterrupt+0xa2>
  a2:	8e 81       	ldd	r24, Y+6	; 0x06
  a4:	9f 81       	ldd	r25, Y+7	; 0x07
  a6:	87 30       	cpi	r24, 0x07	; 7
  a8:	91 05       	cpc	r25, r1
  aa:	01 f4       	brne	.+0      	; 0xac <attachInterrupt+0xac>
  ac:	00 c0       	rjmp	.+0      	; 0xae <attachInterrupt+0xae>
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <attachInterrupt+0xb0>
#if defined(EICRA) && defined(EICRB) && defined(EIMSK)
    case 2:
      EICRA = (EICRA & ~((1 << ISC00) | (1 << ISC01))) | (mode << ISC00);
  b0:	a9 e6       	ldi	r26, 0x69	; 105
  b2:	b0 e0       	ldi	r27, 0x00	; 0
  b4:	e9 e6       	ldi	r30, 0x69	; 105
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	80 81       	ld	r24, Z
  ba:	98 2f       	mov	r25, r24
  bc:	9c 7f       	andi	r25, 0xFC	; 252
  be:	8c 81       	ldd	r24, Y+4	; 0x04
  c0:	89 2b       	or	r24, r25
  c2:	8c 93       	st	X, r24
      EIMSK |= (1 << INT0);
  c4:	ad e3       	ldi	r26, 0x3D	; 61
  c6:	b0 e0       	ldi	r27, 0x00	; 0
  c8:	ed e3       	ldi	r30, 0x3D	; 61
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	80 81       	ld	r24, Z
  ce:	81 60       	ori	r24, 0x01	; 1
  d0:	8c 93       	st	X, r24
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <attachInterrupt+0xd4>
      break;
    case 3:
      EICRA = (EICRA & ~((1 << ISC10) | (1 << ISC11))) | (mode << ISC10);
  d4:	a9 e6       	ldi	r26, 0x69	; 105
  d6:	b0 e0       	ldi	r27, 0x00	; 0
  d8:	e9 e6       	ldi	r30, 0x69	; 105
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	80 81       	ld	r24, Z
  de:	28 2f       	mov	r18, r24
  e0:	23 7f       	andi	r18, 0xF3	; 243
  e2:	8c 81       	ldd	r24, Y+4	; 0x04
  e4:	9d 81       	ldd	r25, Y+5	; 0x05
  e6:	88 0f       	add	r24, r24
  e8:	99 1f       	adc	r25, r25
  ea:	88 0f       	add	r24, r24
  ec:	99 1f       	adc	r25, r25
  ee:	82 2b       	or	r24, r18
  f0:	8c 93       	st	X, r24
      EIMSK |= (1 << INT1);
  f2:	ad e3       	ldi	r26, 0x3D	; 61
  f4:	b0 e0       	ldi	r27, 0x00	; 0
  f6:	ed e3       	ldi	r30, 0x3D	; 61
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	80 81       	ld	r24, Z
  fc:	82 60       	ori	r24, 0x02	; 2
  fe:	8c 93       	st	X, r24
 100:	00 c0       	rjmp	.+0      	; 0x102 <attachInterrupt+0x102>
      break;
    case 4:
      EICRA = (EICRA & ~((1 << ISC20) | (1 << ISC21))) | (mode << ISC20);
 102:	a9 e6       	ldi	r26, 0x69	; 105
 104:	b0 e0       	ldi	r27, 0x00	; 0
 106:	e9 e6       	ldi	r30, 0x69	; 105
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	80 81       	ld	r24, Z
 10c:	28 2f       	mov	r18, r24
 10e:	2f 7c       	andi	r18, 0xCF	; 207
 110:	8c 81       	ldd	r24, Y+4	; 0x04
 112:	9d 81       	ldd	r25, Y+5	; 0x05
 114:	82 95       	swap	r24
 116:	92 95       	swap	r25
 118:	90 7f       	andi	r25, 0xF0	; 240
 11a:	98 27       	eor	r25, r24
 11c:	80 7f       	andi	r24, 0xF0	; 240
 11e:	98 27       	eor	r25, r24
 120:	82 2b       	or	r24, r18
 122:	8c 93       	st	X, r24
      EIMSK |= (1 << INT2);
 124:	ad e3       	ldi	r26, 0x3D	; 61
 126:	b0 e0       	ldi	r27, 0x00	; 0
 128:	ed e3       	ldi	r30, 0x3D	; 61
 12a:	f0 e0       	ldi	r31, 0x00	; 0
 12c:	80 81       	ld	r24, Z
 12e:	84 60       	ori	r24, 0x04	; 4
 130:	8c 93       	st	X, r24
 132:	00 c0       	rjmp	.+0      	; 0x134 <attachInterrupt+0x134>
      break;
    case 5:
      EICRA = (EICRA & ~((1 << ISC30) | (1 << ISC31))) | (mode << ISC30);
 134:	a9 e6       	ldi	r26, 0x69	; 105
 136:	b0 e0       	ldi	r27, 0x00	; 0
 138:	e9 e6       	ldi	r30, 0x69	; 105
 13a:	f0 e0       	ldi	r31, 0x00	; 0
 13c:	80 81       	ld	r24, Z
 13e:	28 2f       	mov	r18, r24
 140:	2f 73       	andi	r18, 0x3F	; 63
 142:	8c 81       	ldd	r24, Y+4	; 0x04
 144:	9d 81       	ldd	r25, Y+5	; 0x05
 146:	00 24       	eor	r0, r0
 148:	96 95       	lsr	r25
 14a:	87 95       	ror	r24
 14c:	07 94       	ror	r0
 14e:	96 95       	lsr	r25
 150:	87 95       	ror	r24
 152:	07 94       	ror	r0
 154:	98 2f       	mov	r25, r24
 156:	80 2d       	mov	r24, r0
 158:	82 2b       	or	r24, r18
 15a:	8c 93       	st	X, r24
      EIMSK |= (1 << INT3);
 15c:	ad e3       	ldi	r26, 0x3D	; 61
 15e:	b0 e0       	ldi	r27, 0x00	; 0
 160:	ed e3       	ldi	r30, 0x3D	; 61
 162:	f0 e0       	ldi	r31, 0x00	; 0
 164:	80 81       	ld	r24, Z
 166:	88 60       	ori	r24, 0x08	; 8
 168:	8c 93       	st	X, r24
 16a:	00 c0       	rjmp	.+0      	; 0x16c <attachInterrupt+0x16c>
      break;
    case 0:
      EICRB = (EICRB & ~((1 << ISC40) | (1 << ISC41))) | (mode << ISC40);
 16c:	aa e6       	ldi	r26, 0x6A	; 106
 16e:	b0 e0       	ldi	r27, 0x00	; 0
 170:	ea e6       	ldi	r30, 0x6A	; 106
 172:	f0 e0       	ldi	r31, 0x00	; 0
 174:	80 81       	ld	r24, Z
 176:	98 2f       	mov	r25, r24
 178:	9c 7f       	andi	r25, 0xFC	; 252
 17a:	8c 81       	ldd	r24, Y+4	; 0x04
 17c:	89 2b       	or	r24, r25
 17e:	8c 93       	st	X, r24
      EIMSK |= (1 << INT4);
 180:	ad e3       	ldi	r26, 0x3D	; 61
 182:	b0 e0       	ldi	r27, 0x00	; 0
 184:	ed e3       	ldi	r30, 0x3D	; 61
 186:	f0 e0       	ldi	r31, 0x00	; 0
 188:	80 81       	ld	r24, Z
 18a:	80 61       	ori	r24, 0x10	; 16
 18c:	8c 93       	st	X, r24
 18e:	00 c0       	rjmp	.+0      	; 0x190 <attachInterrupt+0x190>
      break;
    case 1:
      EICRB = (EICRB & ~((1 << ISC50) | (1 << ISC51))) | (mode << ISC50);
 190:	aa e6       	ldi	r26, 0x6A	; 106
 192:	b0 e0       	ldi	r27, 0x00	; 0
 194:	ea e6       	ldi	r30, 0x6A	; 106
 196:	f0 e0       	ldi	r31, 0x00	; 0
 198:	80 81       	ld	r24, Z
 19a:	28 2f       	mov	r18, r24
 19c:	23 7f       	andi	r18, 0xF3	; 243
 19e:	8c 81       	ldd	r24, Y+4	; 0x04
 1a0:	9d 81       	ldd	r25, Y+5	; 0x05
 1a2:	88 0f       	add	r24, r24
 1a4:	99 1f       	adc	r25, r25
 1a6:	88 0f       	add	r24, r24
 1a8:	99 1f       	adc	r25, r25
 1aa:	82 2b       	or	r24, r18
 1ac:	8c 93       	st	X, r24
      EIMSK |= (1 << INT5);
 1ae:	ad e3       	ldi	r26, 0x3D	; 61
 1b0:	b0 e0       	ldi	r27, 0x00	; 0
 1b2:	ed e3       	ldi	r30, 0x3D	; 61
 1b4:	f0 e0       	ldi	r31, 0x00	; 0
 1b6:	80 81       	ld	r24, Z
 1b8:	80 62       	ori	r24, 0x20	; 32
 1ba:	8c 93       	st	X, r24
 1bc:	00 c0       	rjmp	.+0      	; 0x1be <attachInterrupt+0x1be>
      break;
    case 6:
      EICRB = (EICRB & ~((1 << ISC60) | (1 << ISC61))) | (mode << ISC60);
 1be:	aa e6       	ldi	r26, 0x6A	; 106
 1c0:	b0 e0       	ldi	r27, 0x00	; 0
 1c2:	ea e6       	ldi	r30, 0x6A	; 106
 1c4:	f0 e0       	ldi	r31, 0x00	; 0
 1c6:	80 81       	ld	r24, Z
 1c8:	28 2f       	mov	r18, r24
 1ca:	2f 7c       	andi	r18, 0xCF	; 207
 1cc:	8c 81       	ldd	r24, Y+4	; 0x04
 1ce:	9d 81       	ldd	r25, Y+5	; 0x05
 1d0:	82 95       	swap	r24
 1d2:	92 95       	swap	r25
 1d4:	90 7f       	andi	r25, 0xF0	; 240
 1d6:	98 27       	eor	r25, r24
 1d8:	80 7f       	andi	r24, 0xF0	; 240
 1da:	98 27       	eor	r25, r24
 1dc:	82 2b       	or	r24, r18
 1de:	8c 93       	st	X, r24
      EIMSK |= (1 << INT6);
 1e0:	ad e3       	ldi	r26, 0x3D	; 61
 1e2:	b0 e0       	ldi	r27, 0x00	; 0
 1e4:	ed e3       	ldi	r30, 0x3D	; 61
 1e6:	f0 e0       	ldi	r31, 0x00	; 0
 1e8:	80 81       	ld	r24, Z
 1ea:	80 64       	ori	r24, 0x40	; 64
 1ec:	8c 93       	st	X, r24
 1ee:	00 c0       	rjmp	.+0      	; 0x1f0 <attachInterrupt+0x1f0>
      break;
    case 7:
      EICRB = (EICRB & ~((1 << ISC70) | (1 << ISC71))) | (mode << ISC70);
 1f0:	aa e6       	ldi	r26, 0x6A	; 106
 1f2:	b0 e0       	ldi	r27, 0x00	; 0
 1f4:	ea e6       	ldi	r30, 0x6A	; 106
 1f6:	f0 e0       	ldi	r31, 0x00	; 0
 1f8:	80 81       	ld	r24, Z
 1fa:	28 2f       	mov	r18, r24
 1fc:	2f 73       	andi	r18, 0x3F	; 63
 1fe:	8c 81       	ldd	r24, Y+4	; 0x04
 200:	9d 81       	ldd	r25, Y+5	; 0x05
 202:	00 24       	eor	r0, r0
 204:	96 95       	lsr	r25
 206:	87 95       	ror	r24
 208:	07 94       	ror	r0
 20a:	96 95       	lsr	r25
 20c:	87 95       	ror	r24
 20e:	07 94       	ror	r0
 210:	98 2f       	mov	r25, r24
 212:	80 2d       	mov	r24, r0
 214:	82 2b       	or	r24, r18
 216:	8c 93       	st	X, r24
      EIMSK |= (1 << INT7);
 218:	ad e3       	ldi	r26, 0x3D	; 61
 21a:	b0 e0       	ldi	r27, 0x00	; 0
 21c:	ed e3       	ldi	r30, 0x3D	; 61
 21e:	f0 e0       	ldi	r31, 0x00	; 0
 220:	80 81       	ld	r24, Z
 222:	80 68       	ori	r24, 0x80	; 128
 224:	8c 93       	st	X, r24
    #endif
      break;
#endif
    }
  }
}
 226:	27 96       	adiw	r28, 0x07	; 7
 228:	0f b6       	in	r0, 0x3f	; 63
 22a:	f8 94       	cli
 22c:	de bf       	out	0x3e, r29	; 62
 22e:	0f be       	out	0x3f, r0	; 63
 230:	cd bf       	out	0x3d, r28	; 61
 232:	cf 91       	pop	r28
 234:	df 91       	pop	r29
 236:	08 95       	ret

00000238 <detachInterrupt>:

void detachInterrupt(uint8_t interruptNum) {
 238:	df 93       	push	r29
 23a:	cf 93       	push	r28
 23c:	00 d0       	rcall	.+0      	; 0x23e <detachInterrupt+0x6>
 23e:	cd b7       	in	r28, 0x3d	; 61
 240:	de b7       	in	r29, 0x3e	; 62
 242:	89 83       	std	Y+1, r24	; 0x01
  if(interruptNum < EXTERNAL_NUM_INTERRUPTS) {
 244:	89 81       	ldd	r24, Y+1	; 0x01
 246:	88 30       	cpi	r24, 0x08	; 8
 248:	00 f0       	brcs	.+0      	; 0x24a <detachInterrupt+0x12>
 24a:	00 c0       	rjmp	.+0      	; 0x24c <detachInterrupt+0x14>
    // Disable the interrupt.  (We can't assume that interruptNum is equal
    // to the number of the EIMSK bit to clear, as this isn't true on the 
    // ATmega8.  There, INT0 is 6 and INT1 is 7.)
    switch (interruptNum) {
 24c:	89 81       	ldd	r24, Y+1	; 0x01
 24e:	28 2f       	mov	r18, r24
 250:	30 e0       	ldi	r19, 0x00	; 0
 252:	3b 83       	std	Y+3, r19	; 0x03
 254:	2a 83       	std	Y+2, r18	; 0x02
 256:	8a 81       	ldd	r24, Y+2	; 0x02
 258:	9b 81       	ldd	r25, Y+3	; 0x03
 25a:	83 30       	cpi	r24, 0x03	; 3
 25c:	91 05       	cpc	r25, r1
 25e:	01 f0       	breq	.+0      	; 0x260 <detachInterrupt+0x28>
 260:	2a 81       	ldd	r18, Y+2	; 0x02
 262:	3b 81       	ldd	r19, Y+3	; 0x03
 264:	24 30       	cpi	r18, 0x04	; 4
 266:	31 05       	cpc	r19, r1
 268:	04 f4       	brge	.+0      	; 0x26a <detachInterrupt+0x32>
 26a:	8a 81       	ldd	r24, Y+2	; 0x02
 26c:	9b 81       	ldd	r25, Y+3	; 0x03
 26e:	81 30       	cpi	r24, 0x01	; 1
 270:	91 05       	cpc	r25, r1
 272:	01 f4       	brne	.+0      	; 0x274 <detachInterrupt+0x3c>
 274:	00 c0       	rjmp	.+0      	; 0x276 <detachInterrupt+0x3e>
 276:	2a 81       	ldd	r18, Y+2	; 0x02
 278:	3b 81       	ldd	r19, Y+3	; 0x03
 27a:	22 30       	cpi	r18, 0x02	; 2
 27c:	31 05       	cpc	r19, r1
 27e:	04 f4       	brge	.+0      	; 0x280 <detachInterrupt+0x48>
 280:	8a 81       	ldd	r24, Y+2	; 0x02
 282:	9b 81       	ldd	r25, Y+3	; 0x03
 284:	00 97       	sbiw	r24, 0x00	; 0
 286:	01 f0       	breq	.+0      	; 0x288 <detachInterrupt+0x50>
 288:	00 c0       	rjmp	.+0      	; 0x28a <detachInterrupt+0x52>
 28a:	2a 81       	ldd	r18, Y+2	; 0x02
 28c:	3b 81       	ldd	r19, Y+3	; 0x03
 28e:	25 30       	cpi	r18, 0x05	; 5
 290:	31 05       	cpc	r19, r1
 292:	01 f0       	breq	.+0      	; 0x294 <detachInterrupt+0x5c>
 294:	8a 81       	ldd	r24, Y+2	; 0x02
 296:	9b 81       	ldd	r25, Y+3	; 0x03
 298:	85 30       	cpi	r24, 0x05	; 5
 29a:	91 05       	cpc	r25, r1
 29c:	04 f0       	brlt	.+0      	; 0x29e <detachInterrupt+0x66>
 29e:	2a 81       	ldd	r18, Y+2	; 0x02
 2a0:	3b 81       	ldd	r19, Y+3	; 0x03
 2a2:	26 30       	cpi	r18, 0x06	; 6
 2a4:	31 05       	cpc	r19, r1
 2a6:	01 f0       	breq	.+0      	; 0x2a8 <detachInterrupt+0x70>
 2a8:	8a 81       	ldd	r24, Y+2	; 0x02
 2aa:	9b 81       	ldd	r25, Y+3	; 0x03
 2ac:	87 30       	cpi	r24, 0x07	; 7
 2ae:	91 05       	cpc	r25, r1
 2b0:	01 f0       	breq	.+0      	; 0x2b2 <detachInterrupt+0x7a>
 2b2:	00 c0       	rjmp	.+0      	; 0x2b4 <detachInterrupt+0x7c>
#if defined(EICRA) && defined(EICRB) && defined(EIMSK)
    case 2:
      EIMSK &= ~(1 << INT0);
 2b4:	ad e3       	ldi	r26, 0x3D	; 61
 2b6:	b0 e0       	ldi	r27, 0x00	; 0
 2b8:	ed e3       	ldi	r30, 0x3D	; 61
 2ba:	f0 e0       	ldi	r31, 0x00	; 0
 2bc:	80 81       	ld	r24, Z
 2be:	8e 7f       	andi	r24, 0xFE	; 254
 2c0:	8c 93       	st	X, r24
 2c2:	00 c0       	rjmp	.+0      	; 0x2c4 <detachInterrupt+0x8c>
      break;
    case 3:
      EIMSK &= ~(1 << INT1);
 2c4:	ad e3       	ldi	r26, 0x3D	; 61
 2c6:	b0 e0       	ldi	r27, 0x00	; 0
 2c8:	ed e3       	ldi	r30, 0x3D	; 61
 2ca:	f0 e0       	ldi	r31, 0x00	; 0
 2cc:	80 81       	ld	r24, Z
 2ce:	8d 7f       	andi	r24, 0xFD	; 253
 2d0:	8c 93       	st	X, r24
 2d2:	00 c0       	rjmp	.+0      	; 0x2d4 <detachInterrupt+0x9c>
      break;
    case 4:
      EIMSK &= ~(1 << INT2);
 2d4:	ad e3       	ldi	r26, 0x3D	; 61
 2d6:	b0 e0       	ldi	r27, 0x00	; 0
 2d8:	ed e3       	ldi	r30, 0x3D	; 61
 2da:	f0 e0       	ldi	r31, 0x00	; 0
 2dc:	80 81       	ld	r24, Z
 2de:	8b 7f       	andi	r24, 0xFB	; 251
 2e0:	8c 93       	st	X, r24
 2e2:	00 c0       	rjmp	.+0      	; 0x2e4 <detachInterrupt+0xac>
      break;
    case 5:
      EIMSK &= ~(1 << INT3);
 2e4:	ad e3       	ldi	r26, 0x3D	; 61
 2e6:	b0 e0       	ldi	r27, 0x00	; 0
 2e8:	ed e3       	ldi	r30, 0x3D	; 61
 2ea:	f0 e0       	ldi	r31, 0x00	; 0
 2ec:	80 81       	ld	r24, Z
 2ee:	87 7f       	andi	r24, 0xF7	; 247
 2f0:	8c 93       	st	X, r24
 2f2:	00 c0       	rjmp	.+0      	; 0x2f4 <detachInterrupt+0xbc>
      break;
    case 0:
      EIMSK &= ~(1 << INT4);
 2f4:	ad e3       	ldi	r26, 0x3D	; 61
 2f6:	b0 e0       	ldi	r27, 0x00	; 0
 2f8:	ed e3       	ldi	r30, 0x3D	; 61
 2fa:	f0 e0       	ldi	r31, 0x00	; 0
 2fc:	80 81       	ld	r24, Z
 2fe:	8f 7e       	andi	r24, 0xEF	; 239
 300:	8c 93       	st	X, r24
 302:	00 c0       	rjmp	.+0      	; 0x304 <detachInterrupt+0xcc>
      break;
    case 1:
      EIMSK &= ~(1 << INT5);
 304:	ad e3       	ldi	r26, 0x3D	; 61
 306:	b0 e0       	ldi	r27, 0x00	; 0
 308:	ed e3       	ldi	r30, 0x3D	; 61
 30a:	f0 e0       	ldi	r31, 0x00	; 0
 30c:	80 81       	ld	r24, Z
 30e:	8f 7d       	andi	r24, 0xDF	; 223
 310:	8c 93       	st	X, r24
 312:	00 c0       	rjmp	.+0      	; 0x314 <detachInterrupt+0xdc>
      break;
    case 6:
      EIMSK &= ~(1 << INT6);
 314:	ad e3       	ldi	r26, 0x3D	; 61
 316:	b0 e0       	ldi	r27, 0x00	; 0
 318:	ed e3       	ldi	r30, 0x3D	; 61
 31a:	f0 e0       	ldi	r31, 0x00	; 0
 31c:	80 81       	ld	r24, Z
 31e:	8f 7b       	andi	r24, 0xBF	; 191
 320:	8c 93       	st	X, r24
 322:	00 c0       	rjmp	.+0      	; 0x324 <detachInterrupt+0xec>
      break;
    case 7:
      EIMSK &= ~(1 << INT7);
 324:	ad e3       	ldi	r26, 0x3D	; 61
 326:	b0 e0       	ldi	r27, 0x00	; 0
 328:	ed e3       	ldi	r30, 0x3D	; 61
 32a:	f0 e0       	ldi	r31, 0x00	; 0
 32c:	80 81       	ld	r24, Z
 32e:	8f 77       	andi	r24, 0x7F	; 127
 330:	8c 93       	st	X, r24
    #endif
      break;
#endif
    }
      
    intFunc[interruptNum] = 0;
 332:	89 81       	ldd	r24, Y+1	; 0x01
 334:	88 2f       	mov	r24, r24
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	88 0f       	add	r24, r24
 33a:	99 1f       	adc	r25, r25
 33c:	fc 01       	movw	r30, r24
 33e:	e0 50       	subi	r30, 0x00	; 0
 340:	f0 40       	sbci	r31, 0x00	; 0
 342:	11 82       	std	Z+1, r1	; 0x01
 344:	10 82       	st	Z, r1
  }
}
 346:	0f 90       	pop	r0
 348:	0f 90       	pop	r0
 34a:	0f 90       	pop	r0
 34c:	cf 91       	pop	r28
 34e:	df 91       	pop	r29
 350:	08 95       	ret

00000352 <__vector_1>:
}
*/

#if defined(EICRA) && defined(EICRB)

SIGNAL(INT0_vect) {
 352:	1f 92       	push	r1
 354:	0f 92       	push	r0
 356:	0f b6       	in	r0, 0x3f	; 63
 358:	0f 92       	push	r0
 35a:	00 90 5b 00 	lds	r0, 0x005B
 35e:	0f 92       	push	r0
 360:	11 24       	eor	r1, r1
 362:	2f 93       	push	r18
 364:	3f 93       	push	r19
 366:	4f 93       	push	r20
 368:	5f 93       	push	r21
 36a:	6f 93       	push	r22
 36c:	7f 93       	push	r23
 36e:	8f 93       	push	r24
 370:	9f 93       	push	r25
 372:	af 93       	push	r26
 374:	bf 93       	push	r27
 376:	ef 93       	push	r30
 378:	ff 93       	push	r31
 37a:	df 93       	push	r29
 37c:	cf 93       	push	r28
 37e:	cd b7       	in	r28, 0x3d	; 61
 380:	de b7       	in	r29, 0x3e	; 62
  if(intFunc[EXTERNAL_INT_2])
 382:	80 91 00 00 	lds	r24, 0x0000
 386:	90 91 00 00 	lds	r25, 0x0000
 38a:	00 97       	sbiw	r24, 0x00	; 0
 38c:	01 f0       	breq	.+0      	; 0x38e <__vector_1+0x3c>
    intFunc[EXTERNAL_INT_2]();
 38e:	e0 91 00 00 	lds	r30, 0x0000
 392:	f0 91 00 00 	lds	r31, 0x0000
 396:	19 95       	eicall
}
 398:	cf 91       	pop	r28
 39a:	df 91       	pop	r29
 39c:	ff 91       	pop	r31
 39e:	ef 91       	pop	r30
 3a0:	bf 91       	pop	r27
 3a2:	af 91       	pop	r26
 3a4:	9f 91       	pop	r25
 3a6:	8f 91       	pop	r24
 3a8:	7f 91       	pop	r23
 3aa:	6f 91       	pop	r22
 3ac:	5f 91       	pop	r21
 3ae:	4f 91       	pop	r20
 3b0:	3f 91       	pop	r19
 3b2:	2f 91       	pop	r18
 3b4:	0f 90       	pop	r0
 3b6:	00 92 5b 00 	sts	0x005B, r0
 3ba:	0f 90       	pop	r0
 3bc:	0f be       	out	0x3f, r0	; 63
 3be:	0f 90       	pop	r0
 3c0:	1f 90       	pop	r1
 3c2:	18 95       	reti

000003c4 <__vector_2>:

SIGNAL(INT1_vect) {
 3c4:	1f 92       	push	r1
 3c6:	0f 92       	push	r0
 3c8:	0f b6       	in	r0, 0x3f	; 63
 3ca:	0f 92       	push	r0
 3cc:	00 90 5b 00 	lds	r0, 0x005B
 3d0:	0f 92       	push	r0
 3d2:	11 24       	eor	r1, r1
 3d4:	2f 93       	push	r18
 3d6:	3f 93       	push	r19
 3d8:	4f 93       	push	r20
 3da:	5f 93       	push	r21
 3dc:	6f 93       	push	r22
 3de:	7f 93       	push	r23
 3e0:	8f 93       	push	r24
 3e2:	9f 93       	push	r25
 3e4:	af 93       	push	r26
 3e6:	bf 93       	push	r27
 3e8:	ef 93       	push	r30
 3ea:	ff 93       	push	r31
 3ec:	df 93       	push	r29
 3ee:	cf 93       	push	r28
 3f0:	cd b7       	in	r28, 0x3d	; 61
 3f2:	de b7       	in	r29, 0x3e	; 62
  if(intFunc[EXTERNAL_INT_3])
 3f4:	80 91 00 00 	lds	r24, 0x0000
 3f8:	90 91 00 00 	lds	r25, 0x0000
 3fc:	00 97       	sbiw	r24, 0x00	; 0
 3fe:	01 f0       	breq	.+0      	; 0x400 <__vector_2+0x3c>
    intFunc[EXTERNAL_INT_3]();
 400:	e0 91 00 00 	lds	r30, 0x0000
 404:	f0 91 00 00 	lds	r31, 0x0000
 408:	19 95       	eicall
}
 40a:	cf 91       	pop	r28
 40c:	df 91       	pop	r29
 40e:	ff 91       	pop	r31
 410:	ef 91       	pop	r30
 412:	bf 91       	pop	r27
 414:	af 91       	pop	r26
 416:	9f 91       	pop	r25
 418:	8f 91       	pop	r24
 41a:	7f 91       	pop	r23
 41c:	6f 91       	pop	r22
 41e:	5f 91       	pop	r21
 420:	4f 91       	pop	r20
 422:	3f 91       	pop	r19
 424:	2f 91       	pop	r18
 426:	0f 90       	pop	r0
 428:	00 92 5b 00 	sts	0x005B, r0
 42c:	0f 90       	pop	r0
 42e:	0f be       	out	0x3f, r0	; 63
 430:	0f 90       	pop	r0
 432:	1f 90       	pop	r1
 434:	18 95       	reti

00000436 <__vector_3>:

SIGNAL(INT2_vect) {
 436:	1f 92       	push	r1
 438:	0f 92       	push	r0
 43a:	0f b6       	in	r0, 0x3f	; 63
 43c:	0f 92       	push	r0
 43e:	00 90 5b 00 	lds	r0, 0x005B
 442:	0f 92       	push	r0
 444:	11 24       	eor	r1, r1
 446:	2f 93       	push	r18
 448:	3f 93       	push	r19
 44a:	4f 93       	push	r20
 44c:	5f 93       	push	r21
 44e:	6f 93       	push	r22
 450:	7f 93       	push	r23
 452:	8f 93       	push	r24
 454:	9f 93       	push	r25
 456:	af 93       	push	r26
 458:	bf 93       	push	r27
 45a:	ef 93       	push	r30
 45c:	ff 93       	push	r31
 45e:	df 93       	push	r29
 460:	cf 93       	push	r28
 462:	cd b7       	in	r28, 0x3d	; 61
 464:	de b7       	in	r29, 0x3e	; 62
  if(intFunc[EXTERNAL_INT_4])
 466:	80 91 00 00 	lds	r24, 0x0000
 46a:	90 91 00 00 	lds	r25, 0x0000
 46e:	00 97       	sbiw	r24, 0x00	; 0
 470:	01 f0       	breq	.+0      	; 0x472 <__vector_3+0x3c>
    intFunc[EXTERNAL_INT_4]();
 472:	e0 91 00 00 	lds	r30, 0x0000
 476:	f0 91 00 00 	lds	r31, 0x0000
 47a:	19 95       	eicall
}
 47c:	cf 91       	pop	r28
 47e:	df 91       	pop	r29
 480:	ff 91       	pop	r31
 482:	ef 91       	pop	r30
 484:	bf 91       	pop	r27
 486:	af 91       	pop	r26
 488:	9f 91       	pop	r25
 48a:	8f 91       	pop	r24
 48c:	7f 91       	pop	r23
 48e:	6f 91       	pop	r22
 490:	5f 91       	pop	r21
 492:	4f 91       	pop	r20
 494:	3f 91       	pop	r19
 496:	2f 91       	pop	r18
 498:	0f 90       	pop	r0
 49a:	00 92 5b 00 	sts	0x005B, r0
 49e:	0f 90       	pop	r0
 4a0:	0f be       	out	0x3f, r0	; 63
 4a2:	0f 90       	pop	r0
 4a4:	1f 90       	pop	r1
 4a6:	18 95       	reti

000004a8 <__vector_4>:

SIGNAL(INT3_vect) {
 4a8:	1f 92       	push	r1
 4aa:	0f 92       	push	r0
 4ac:	0f b6       	in	r0, 0x3f	; 63
 4ae:	0f 92       	push	r0
 4b0:	00 90 5b 00 	lds	r0, 0x005B
 4b4:	0f 92       	push	r0
 4b6:	11 24       	eor	r1, r1
 4b8:	2f 93       	push	r18
 4ba:	3f 93       	push	r19
 4bc:	4f 93       	push	r20
 4be:	5f 93       	push	r21
 4c0:	6f 93       	push	r22
 4c2:	7f 93       	push	r23
 4c4:	8f 93       	push	r24
 4c6:	9f 93       	push	r25
 4c8:	af 93       	push	r26
 4ca:	bf 93       	push	r27
 4cc:	ef 93       	push	r30
 4ce:	ff 93       	push	r31
 4d0:	df 93       	push	r29
 4d2:	cf 93       	push	r28
 4d4:	cd b7       	in	r28, 0x3d	; 61
 4d6:	de b7       	in	r29, 0x3e	; 62
  if(intFunc[EXTERNAL_INT_5])
 4d8:	80 91 00 00 	lds	r24, 0x0000
 4dc:	90 91 00 00 	lds	r25, 0x0000
 4e0:	00 97       	sbiw	r24, 0x00	; 0
 4e2:	01 f0       	breq	.+0      	; 0x4e4 <__vector_4+0x3c>
    intFunc[EXTERNAL_INT_5]();
 4e4:	e0 91 00 00 	lds	r30, 0x0000
 4e8:	f0 91 00 00 	lds	r31, 0x0000
 4ec:	19 95       	eicall
}
 4ee:	cf 91       	pop	r28
 4f0:	df 91       	pop	r29
 4f2:	ff 91       	pop	r31
 4f4:	ef 91       	pop	r30
 4f6:	bf 91       	pop	r27
 4f8:	af 91       	pop	r26
 4fa:	9f 91       	pop	r25
 4fc:	8f 91       	pop	r24
 4fe:	7f 91       	pop	r23
 500:	6f 91       	pop	r22
 502:	5f 91       	pop	r21
 504:	4f 91       	pop	r20
 506:	3f 91       	pop	r19
 508:	2f 91       	pop	r18
 50a:	0f 90       	pop	r0
 50c:	00 92 5b 00 	sts	0x005B, r0
 510:	0f 90       	pop	r0
 512:	0f be       	out	0x3f, r0	; 63
 514:	0f 90       	pop	r0
 516:	1f 90       	pop	r1
 518:	18 95       	reti

0000051a <__vector_5>:

SIGNAL(INT4_vect) {
 51a:	1f 92       	push	r1
 51c:	0f 92       	push	r0
 51e:	0f b6       	in	r0, 0x3f	; 63
 520:	0f 92       	push	r0
 522:	00 90 5b 00 	lds	r0, 0x005B
 526:	0f 92       	push	r0
 528:	11 24       	eor	r1, r1
 52a:	2f 93       	push	r18
 52c:	3f 93       	push	r19
 52e:	4f 93       	push	r20
 530:	5f 93       	push	r21
 532:	6f 93       	push	r22
 534:	7f 93       	push	r23
 536:	8f 93       	push	r24
 538:	9f 93       	push	r25
 53a:	af 93       	push	r26
 53c:	bf 93       	push	r27
 53e:	ef 93       	push	r30
 540:	ff 93       	push	r31
 542:	df 93       	push	r29
 544:	cf 93       	push	r28
 546:	cd b7       	in	r28, 0x3d	; 61
 548:	de b7       	in	r29, 0x3e	; 62
  if(intFunc[EXTERNAL_INT_0])
 54a:	80 91 00 00 	lds	r24, 0x0000
 54e:	90 91 00 00 	lds	r25, 0x0000
 552:	00 97       	sbiw	r24, 0x00	; 0
 554:	01 f0       	breq	.+0      	; 0x556 <__vector_5+0x3c>
    intFunc[EXTERNAL_INT_0]();
 556:	e0 91 00 00 	lds	r30, 0x0000
 55a:	f0 91 00 00 	lds	r31, 0x0000
 55e:	19 95       	eicall
}
 560:	cf 91       	pop	r28
 562:	df 91       	pop	r29
 564:	ff 91       	pop	r31
 566:	ef 91       	pop	r30
 568:	bf 91       	pop	r27
 56a:	af 91       	pop	r26
 56c:	9f 91       	pop	r25
 56e:	8f 91       	pop	r24
 570:	7f 91       	pop	r23
 572:	6f 91       	pop	r22
 574:	5f 91       	pop	r21
 576:	4f 91       	pop	r20
 578:	3f 91       	pop	r19
 57a:	2f 91       	pop	r18
 57c:	0f 90       	pop	r0
 57e:	00 92 5b 00 	sts	0x005B, r0
 582:	0f 90       	pop	r0
 584:	0f be       	out	0x3f, r0	; 63
 586:	0f 90       	pop	r0
 588:	1f 90       	pop	r1
 58a:	18 95       	reti

0000058c <__vector_6>:

SIGNAL(INT5_vect) {
 58c:	1f 92       	push	r1
 58e:	0f 92       	push	r0
 590:	0f b6       	in	r0, 0x3f	; 63
 592:	0f 92       	push	r0
 594:	00 90 5b 00 	lds	r0, 0x005B
 598:	0f 92       	push	r0
 59a:	11 24       	eor	r1, r1
 59c:	2f 93       	push	r18
 59e:	3f 93       	push	r19
 5a0:	4f 93       	push	r20
 5a2:	5f 93       	push	r21
 5a4:	6f 93       	push	r22
 5a6:	7f 93       	push	r23
 5a8:	8f 93       	push	r24
 5aa:	9f 93       	push	r25
 5ac:	af 93       	push	r26
 5ae:	bf 93       	push	r27
 5b0:	ef 93       	push	r30
 5b2:	ff 93       	push	r31
 5b4:	df 93       	push	r29
 5b6:	cf 93       	push	r28
 5b8:	cd b7       	in	r28, 0x3d	; 61
 5ba:	de b7       	in	r29, 0x3e	; 62
  if(intFunc[EXTERNAL_INT_1])
 5bc:	80 91 00 00 	lds	r24, 0x0000
 5c0:	90 91 00 00 	lds	r25, 0x0000
 5c4:	00 97       	sbiw	r24, 0x00	; 0
 5c6:	01 f0       	breq	.+0      	; 0x5c8 <__vector_6+0x3c>
    intFunc[EXTERNAL_INT_1]();
 5c8:	e0 91 00 00 	lds	r30, 0x0000
 5cc:	f0 91 00 00 	lds	r31, 0x0000
 5d0:	19 95       	eicall
}
 5d2:	cf 91       	pop	r28
 5d4:	df 91       	pop	r29
 5d6:	ff 91       	pop	r31
 5d8:	ef 91       	pop	r30
 5da:	bf 91       	pop	r27
 5dc:	af 91       	pop	r26
 5de:	9f 91       	pop	r25
 5e0:	8f 91       	pop	r24
 5e2:	7f 91       	pop	r23
 5e4:	6f 91       	pop	r22
 5e6:	5f 91       	pop	r21
 5e8:	4f 91       	pop	r20
 5ea:	3f 91       	pop	r19
 5ec:	2f 91       	pop	r18
 5ee:	0f 90       	pop	r0
 5f0:	00 92 5b 00 	sts	0x005B, r0
 5f4:	0f 90       	pop	r0
 5f6:	0f be       	out	0x3f, r0	; 63
 5f8:	0f 90       	pop	r0
 5fa:	1f 90       	pop	r1
 5fc:	18 95       	reti

000005fe <__vector_7>:

SIGNAL(INT6_vect) {
 5fe:	1f 92       	push	r1
 600:	0f 92       	push	r0
 602:	0f b6       	in	r0, 0x3f	; 63
 604:	0f 92       	push	r0
 606:	00 90 5b 00 	lds	r0, 0x005B
 60a:	0f 92       	push	r0
 60c:	11 24       	eor	r1, r1
 60e:	2f 93       	push	r18
 610:	3f 93       	push	r19
 612:	4f 93       	push	r20
 614:	5f 93       	push	r21
 616:	6f 93       	push	r22
 618:	7f 93       	push	r23
 61a:	8f 93       	push	r24
 61c:	9f 93       	push	r25
 61e:	af 93       	push	r26
 620:	bf 93       	push	r27
 622:	ef 93       	push	r30
 624:	ff 93       	push	r31
 626:	df 93       	push	r29
 628:	cf 93       	push	r28
 62a:	cd b7       	in	r28, 0x3d	; 61
 62c:	de b7       	in	r29, 0x3e	; 62
  if(intFunc[EXTERNAL_INT_6])
 62e:	80 91 00 00 	lds	r24, 0x0000
 632:	90 91 00 00 	lds	r25, 0x0000
 636:	00 97       	sbiw	r24, 0x00	; 0
 638:	01 f0       	breq	.+0      	; 0x63a <__vector_7+0x3c>
    intFunc[EXTERNAL_INT_6]();
 63a:	e0 91 00 00 	lds	r30, 0x0000
 63e:	f0 91 00 00 	lds	r31, 0x0000
 642:	19 95       	eicall
}
 644:	cf 91       	pop	r28
 646:	df 91       	pop	r29
 648:	ff 91       	pop	r31
 64a:	ef 91       	pop	r30
 64c:	bf 91       	pop	r27
 64e:	af 91       	pop	r26
 650:	9f 91       	pop	r25
 652:	8f 91       	pop	r24
 654:	7f 91       	pop	r23
 656:	6f 91       	pop	r22
 658:	5f 91       	pop	r21
 65a:	4f 91       	pop	r20
 65c:	3f 91       	pop	r19
 65e:	2f 91       	pop	r18
 660:	0f 90       	pop	r0
 662:	00 92 5b 00 	sts	0x005B, r0
 666:	0f 90       	pop	r0
 668:	0f be       	out	0x3f, r0	; 63
 66a:	0f 90       	pop	r0
 66c:	1f 90       	pop	r1
 66e:	18 95       	reti

00000670 <__vector_8>:

SIGNAL(INT7_vect) {
 670:	1f 92       	push	r1
 672:	0f 92       	push	r0
 674:	0f b6       	in	r0, 0x3f	; 63
 676:	0f 92       	push	r0
 678:	00 90 5b 00 	lds	r0, 0x005B
 67c:	0f 92       	push	r0
 67e:	11 24       	eor	r1, r1
 680:	2f 93       	push	r18
 682:	3f 93       	push	r19
 684:	4f 93       	push	r20
 686:	5f 93       	push	r21
 688:	6f 93       	push	r22
 68a:	7f 93       	push	r23
 68c:	8f 93       	push	r24
 68e:	9f 93       	push	r25
 690:	af 93       	push	r26
 692:	bf 93       	push	r27
 694:	ef 93       	push	r30
 696:	ff 93       	push	r31
 698:	df 93       	push	r29
 69a:	cf 93       	push	r28
 69c:	cd b7       	in	r28, 0x3d	; 61
 69e:	de b7       	in	r29, 0x3e	; 62
  if(intFunc[EXTERNAL_INT_7])
 6a0:	80 91 00 00 	lds	r24, 0x0000
 6a4:	90 91 00 00 	lds	r25, 0x0000
 6a8:	00 97       	sbiw	r24, 0x00	; 0
 6aa:	01 f0       	breq	.+0      	; 0x6ac <__vector_8+0x3c>
    intFunc[EXTERNAL_INT_7]();
 6ac:	e0 91 00 00 	lds	r30, 0x0000
 6b0:	f0 91 00 00 	lds	r31, 0x0000
 6b4:	19 95       	eicall
}
 6b6:	cf 91       	pop	r28
 6b8:	df 91       	pop	r29
 6ba:	ff 91       	pop	r31
 6bc:	ef 91       	pop	r30
 6be:	bf 91       	pop	r27
 6c0:	af 91       	pop	r26
 6c2:	9f 91       	pop	r25
 6c4:	8f 91       	pop	r24
 6c6:	7f 91       	pop	r23
 6c8:	6f 91       	pop	r22
 6ca:	5f 91       	pop	r21
 6cc:	4f 91       	pop	r20
 6ce:	3f 91       	pop	r19
 6d0:	2f 91       	pop	r18
 6d2:	0f 90       	pop	r0
 6d4:	00 92 5b 00 	sts	0x005B, r0
 6d8:	0f 90       	pop	r0
 6da:	0f be       	out	0x3f, r0	; 63
 6dc:	0f 90       	pop	r0
 6de:	1f 90       	pop	r1
 6e0:	18 95       	reti

WMath.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002b0  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  1 .data         00000000  00000000  00000000  000002e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  000002e4  2**0
                  ALLOC
  3 .stab         000003d8  00000000  00000000  000002e4  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      000005af  00000000  00000000  000006bc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_Z3maplllll>:
  }
  long diff = howbig - howsmall;
  return random(diff) + howsmall;
}

long map(long x, long in_min, long in_max, long out_min, long out_max)
   0:	af 92       	push	r10
   2:	bf 92       	push	r11
   4:	cf 92       	push	r12
   6:	df 92       	push	r13
   8:	ef 92       	push	r14
   a:	ff 92       	push	r15
   c:	0f 93       	push	r16
   e:	1f 93       	push	r17
  10:	df 93       	push	r29
  12:	cf 93       	push	r28
  14:	cd b7       	in	r28, 0x3d	; 61
  16:	de b7       	in	r29, 0x3e	; 62
  18:	60 97       	sbiw	r28, 0x10	; 16
  1a:	0f b6       	in	r0, 0x3f	; 63
  1c:	f8 94       	cli
  1e:	de bf       	out	0x3e, r29	; 62
  20:	0f be       	out	0x3f, r0	; 63
  22:	cd bf       	out	0x3d, r28	; 61
  24:	69 83       	std	Y+1, r22	; 0x01
  26:	7a 83       	std	Y+2, r23	; 0x02
  28:	8b 83       	std	Y+3, r24	; 0x03
  2a:	9c 83       	std	Y+4, r25	; 0x04
  2c:	2d 83       	std	Y+5, r18	; 0x05
  2e:	3e 83       	std	Y+6, r19	; 0x06
  30:	4f 83       	std	Y+7, r20	; 0x07
  32:	58 87       	std	Y+8, r21	; 0x08
  34:	e9 86       	std	Y+9, r14	; 0x09
  36:	fa 86       	std	Y+10, r15	; 0x0a
  38:	0b 87       	std	Y+11, r16	; 0x0b
  3a:	1c 87       	std	Y+12, r17	; 0x0c
  3c:	ad 86       	std	Y+13, r10	; 0x0d
  3e:	be 86       	std	Y+14, r11	; 0x0e
  40:	cf 86       	std	Y+15, r12	; 0x0f
  42:	d8 8a       	std	Y+16, r13	; 0x10
{
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
  44:	29 81       	ldd	r18, Y+1	; 0x01
  46:	3a 81       	ldd	r19, Y+2	; 0x02
  48:	4b 81       	ldd	r20, Y+3	; 0x03
  4a:	5c 81       	ldd	r21, Y+4	; 0x04
  4c:	8d 81       	ldd	r24, Y+5	; 0x05
  4e:	9e 81       	ldd	r25, Y+6	; 0x06
  50:	af 81       	ldd	r26, Y+7	; 0x07
  52:	b8 85       	ldd	r27, Y+8	; 0x08
  54:	79 01       	movw	r14, r18
  56:	8a 01       	movw	r16, r20
  58:	e8 1a       	sub	r14, r24
  5a:	f9 0a       	sbc	r15, r25
  5c:	0a 0b       	sbc	r16, r26
  5e:	1b 0b       	sbc	r17, r27
  60:	2e 8d       	ldd	r18, Y+30	; 0x1e
  62:	3f 8d       	ldd	r19, Y+31	; 0x1f
  64:	48 a1       	ldd	r20, Y+32	; 0x20
  66:	59 a1       	ldd	r21, Y+33	; 0x21
  68:	8d 85       	ldd	r24, Y+13	; 0x0d
  6a:	9e 85       	ldd	r25, Y+14	; 0x0e
  6c:	af 85       	ldd	r26, Y+15	; 0x0f
  6e:	b8 89       	ldd	r27, Y+16	; 0x10
  70:	28 1b       	sub	r18, r24
  72:	39 0b       	sbc	r19, r25
  74:	4a 0b       	sbc	r20, r26
  76:	5b 0b       	sbc	r21, r27
  78:	c8 01       	movw	r24, r16
  7a:	b7 01       	movw	r22, r14
  7c:	0e 94 00 00 	call	0	; 0x0 <_Z3maplllll>
  80:	7b 01       	movw	r14, r22
  82:	8c 01       	movw	r16, r24
  84:	29 85       	ldd	r18, Y+9	; 0x09
  86:	3a 85       	ldd	r19, Y+10	; 0x0a
  88:	4b 85       	ldd	r20, Y+11	; 0x0b
  8a:	5c 85       	ldd	r21, Y+12	; 0x0c
  8c:	8d 81       	ldd	r24, Y+5	; 0x05
  8e:	9e 81       	ldd	r25, Y+6	; 0x06
  90:	af 81       	ldd	r26, Y+7	; 0x07
  92:	b8 85       	ldd	r27, Y+8	; 0x08
  94:	28 1b       	sub	r18, r24
  96:	39 0b       	sbc	r19, r25
  98:	4a 0b       	sbc	r20, r26
  9a:	5b 0b       	sbc	r21, r27
  9c:	c8 01       	movw	r24, r16
  9e:	b7 01       	movw	r22, r14
  a0:	0e 94 00 00 	call	0	; 0x0 <_Z3maplllll>
  a4:	da 01       	movw	r26, r20
  a6:	c9 01       	movw	r24, r18
  a8:	9c 01       	movw	r18, r24
  aa:	ad 01       	movw	r20, r26
  ac:	8d 85       	ldd	r24, Y+13	; 0x0d
  ae:	9e 85       	ldd	r25, Y+14	; 0x0e
  b0:	af 85       	ldd	r26, Y+15	; 0x0f
  b2:	b8 89       	ldd	r27, Y+16	; 0x10
  b4:	82 0f       	add	r24, r18
  b6:	93 1f       	adc	r25, r19
  b8:	a4 1f       	adc	r26, r20
  ba:	b5 1f       	adc	r27, r21
}
  bc:	bc 01       	movw	r22, r24
  be:	cd 01       	movw	r24, r26
  c0:	60 96       	adiw	r28, 0x10	; 16
  c2:	0f b6       	in	r0, 0x3f	; 63
  c4:	f8 94       	cli
  c6:	de bf       	out	0x3e, r29	; 62
  c8:	0f be       	out	0x3f, r0	; 63
  ca:	cd bf       	out	0x3d, r28	; 61
  cc:	cf 91       	pop	r28
  ce:	df 91       	pop	r29
  d0:	1f 91       	pop	r17
  d2:	0f 91       	pop	r16
  d4:	ff 90       	pop	r15
  d6:	ef 90       	pop	r14
  d8:	df 90       	pop	r13
  da:	cf 90       	pop	r12
  dc:	bf 90       	pop	r11
  de:	af 90       	pop	r10
  e0:	08 95       	ret

000000e2 <_Z8makeWordj>:

unsigned int makeWord(unsigned int w) { return w; }
  e2:	df 93       	push	r29
  e4:	cf 93       	push	r28
  e6:	0f 92       	push	r0
  e8:	0f 92       	push	r0
  ea:	cd b7       	in	r28, 0x3d	; 61
  ec:	de b7       	in	r29, 0x3e	; 62
  ee:	9a 83       	std	Y+2, r25	; 0x02
  f0:	89 83       	std	Y+1, r24	; 0x01
  f2:	89 81       	ldd	r24, Y+1	; 0x01
  f4:	9a 81       	ldd	r25, Y+2	; 0x02
  f6:	0f 90       	pop	r0
  f8:	0f 90       	pop	r0
  fa:	cf 91       	pop	r28
  fc:	df 91       	pop	r29
  fe:	08 95       	ret

00000100 <_Z8makeWordhh>:
 100:	df 93       	push	r29
 102:	cf 93       	push	r28
 104:	0f 92       	push	r0
 106:	0f 92       	push	r0
 108:	cd b7       	in	r28, 0x3d	; 61
 10a:	de b7       	in	r29, 0x3e	; 62
 10c:	89 83       	std	Y+1, r24	; 0x01
 10e:	6a 83       	std	Y+2, r22	; 0x02
 110:	89 81       	ldd	r24, Y+1	; 0x01
 112:	88 2f       	mov	r24, r24
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	38 2f       	mov	r19, r24
 118:	22 27       	eor	r18, r18
 11a:	8a 81       	ldd	r24, Y+2	; 0x02
 11c:	88 2f       	mov	r24, r24
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	82 2b       	or	r24, r18
 122:	93 2b       	or	r25, r19
 124:	0f 90       	pop	r0
 126:	0f 90       	pop	r0
 128:	cf 91       	pop	r28
 12a:	df 91       	pop	r29
 12c:	08 95       	ret

0000012e <_Z6randoml>:
  if (seed != 0) {
    srandom(seed);
  }
}

long random(long howbig)
 12e:	df 93       	push	r29
 130:	cf 93       	push	r28
 132:	cd b7       	in	r28, 0x3d	; 61
 134:	de b7       	in	r29, 0x3e	; 62
 136:	28 97       	sbiw	r28, 0x08	; 8
 138:	0f b6       	in	r0, 0x3f	; 63
 13a:	f8 94       	cli
 13c:	de bf       	out	0x3e, r29	; 62
 13e:	0f be       	out	0x3f, r0	; 63
 140:	cd bf       	out	0x3d, r28	; 61
 142:	69 83       	std	Y+1, r22	; 0x01
 144:	7a 83       	std	Y+2, r23	; 0x02
 146:	8b 83       	std	Y+3, r24	; 0x03
 148:	9c 83       	std	Y+4, r25	; 0x04
{
  if (howbig == 0) {
 14a:	89 81       	ldd	r24, Y+1	; 0x01
 14c:	9a 81       	ldd	r25, Y+2	; 0x02
 14e:	ab 81       	ldd	r26, Y+3	; 0x03
 150:	bc 81       	ldd	r27, Y+4	; 0x04
 152:	00 97       	sbiw	r24, 0x00	; 0
 154:	a1 05       	cpc	r26, r1
 156:	b1 05       	cpc	r27, r1
 158:	01 f4       	brne	.+0      	; 0x15a <_Z6randoml+0x2c>
    return 0;
 15a:	1d 82       	std	Y+5, r1	; 0x05
 15c:	1e 82       	std	Y+6, r1	; 0x06
 15e:	1f 82       	std	Y+7, r1	; 0x07
 160:	18 86       	std	Y+8, r1	; 0x08
 162:	00 c0       	rjmp	.+0      	; 0x164 <_Z6randoml+0x36>
  }
  return random() % howbig;
 164:	0e 94 00 00 	call	0	; 0x0 <_Z3maplllll>
 168:	dc 01       	movw	r26, r24
 16a:	cb 01       	movw	r24, r22
 16c:	29 81       	ldd	r18, Y+1	; 0x01
 16e:	3a 81       	ldd	r19, Y+2	; 0x02
 170:	4b 81       	ldd	r20, Y+3	; 0x03
 172:	5c 81       	ldd	r21, Y+4	; 0x04
 174:	bc 01       	movw	r22, r24
 176:	cd 01       	movw	r24, r26
 178:	0e 94 00 00 	call	0	; 0x0 <_Z3maplllll>
 17c:	dc 01       	movw	r26, r24
 17e:	cb 01       	movw	r24, r22
 180:	8d 83       	std	Y+5, r24	; 0x05
 182:	9e 83       	std	Y+6, r25	; 0x06
 184:	af 83       	std	Y+7, r26	; 0x07
 186:	b8 87       	std	Y+8, r27	; 0x08
 188:	8d 81       	ldd	r24, Y+5	; 0x05
 18a:	9e 81       	ldd	r25, Y+6	; 0x06
 18c:	af 81       	ldd	r26, Y+7	; 0x07
 18e:	b8 85       	ldd	r27, Y+8	; 0x08
}
 190:	bc 01       	movw	r22, r24
 192:	cd 01       	movw	r24, r26
 194:	28 96       	adiw	r28, 0x08	; 8
 196:	0f b6       	in	r0, 0x3f	; 63
 198:	f8 94       	cli
 19a:	de bf       	out	0x3e, r29	; 62
 19c:	0f be       	out	0x3f, r0	; 63
 19e:	cd bf       	out	0x3d, r28	; 61
 1a0:	cf 91       	pop	r28
 1a2:	df 91       	pop	r29
 1a4:	08 95       	ret

000001a6 <_Z6randomll>:

long random(long howsmall, long howbig)
 1a6:	ef 92       	push	r14
 1a8:	ff 92       	push	r15
 1aa:	0f 93       	push	r16
 1ac:	1f 93       	push	r17
 1ae:	df 93       	push	r29
 1b0:	cf 93       	push	r28
 1b2:	cd b7       	in	r28, 0x3d	; 61
 1b4:	de b7       	in	r29, 0x3e	; 62
 1b6:	60 97       	sbiw	r28, 0x10	; 16
 1b8:	0f b6       	in	r0, 0x3f	; 63
 1ba:	f8 94       	cli
 1bc:	de bf       	out	0x3e, r29	; 62
 1be:	0f be       	out	0x3f, r0	; 63
 1c0:	cd bf       	out	0x3d, r28	; 61
 1c2:	6d 83       	std	Y+5, r22	; 0x05
 1c4:	7e 83       	std	Y+6, r23	; 0x06
 1c6:	8f 83       	std	Y+7, r24	; 0x07
 1c8:	98 87       	std	Y+8, r25	; 0x08
 1ca:	29 87       	std	Y+9, r18	; 0x09
 1cc:	3a 87       	std	Y+10, r19	; 0x0a
 1ce:	4b 87       	std	Y+11, r20	; 0x0b
 1d0:	5c 87       	std	Y+12, r21	; 0x0c
{
  if (howsmall >= howbig) {
 1d2:	2d 81       	ldd	r18, Y+5	; 0x05
 1d4:	3e 81       	ldd	r19, Y+6	; 0x06
 1d6:	4f 81       	ldd	r20, Y+7	; 0x07
 1d8:	58 85       	ldd	r21, Y+8	; 0x08
 1da:	89 85       	ldd	r24, Y+9	; 0x09
 1dc:	9a 85       	ldd	r25, Y+10	; 0x0a
 1de:	ab 85       	ldd	r26, Y+11	; 0x0b
 1e0:	bc 85       	ldd	r27, Y+12	; 0x0c
 1e2:	28 17       	cp	r18, r24
 1e4:	39 07       	cpc	r19, r25
 1e6:	4a 07       	cpc	r20, r26
 1e8:	5b 07       	cpc	r21, r27
 1ea:	04 f0       	brlt	.+0      	; 0x1ec <_Z6randomll+0x46>
    return howsmall;
 1ec:	ed 80       	ldd	r14, Y+5	; 0x05
 1ee:	fe 80       	ldd	r15, Y+6	; 0x06
 1f0:	0f 81       	ldd	r16, Y+7	; 0x07
 1f2:	18 85       	ldd	r17, Y+8	; 0x08
 1f4:	ed 86       	std	Y+13, r14	; 0x0d
 1f6:	fe 86       	std	Y+14, r15	; 0x0e
 1f8:	0f 87       	std	Y+15, r16	; 0x0f
 1fa:	18 8b       	std	Y+16, r17	; 0x10
 1fc:	00 c0       	rjmp	.+0      	; 0x1fe <_Z6randomll+0x58>
  }
  long diff = howbig - howsmall;
 1fe:	29 85       	ldd	r18, Y+9	; 0x09
 200:	3a 85       	ldd	r19, Y+10	; 0x0a
 202:	4b 85       	ldd	r20, Y+11	; 0x0b
 204:	5c 85       	ldd	r21, Y+12	; 0x0c
 206:	8d 81       	ldd	r24, Y+5	; 0x05
 208:	9e 81       	ldd	r25, Y+6	; 0x06
 20a:	af 81       	ldd	r26, Y+7	; 0x07
 20c:	b8 85       	ldd	r27, Y+8	; 0x08
 20e:	79 01       	movw	r14, r18
 210:	8a 01       	movw	r16, r20
 212:	e8 1a       	sub	r14, r24
 214:	f9 0a       	sbc	r15, r25
 216:	0a 0b       	sbc	r16, r26
 218:	1b 0b       	sbc	r17, r27
 21a:	d8 01       	movw	r26, r16
 21c:	c7 01       	movw	r24, r14
 21e:	89 83       	std	Y+1, r24	; 0x01
 220:	9a 83       	std	Y+2, r25	; 0x02
 222:	ab 83       	std	Y+3, r26	; 0x03
 224:	bc 83       	std	Y+4, r27	; 0x04
  return random(diff) + howsmall;
 226:	89 81       	ldd	r24, Y+1	; 0x01
 228:	9a 81       	ldd	r25, Y+2	; 0x02
 22a:	ab 81       	ldd	r26, Y+3	; 0x03
 22c:	bc 81       	ldd	r27, Y+4	; 0x04
 22e:	bc 01       	movw	r22, r24
 230:	cd 01       	movw	r24, r26
 232:	0e 94 00 00 	call	0	; 0x0 <_Z3maplllll>
 236:	9b 01       	movw	r18, r22
 238:	ac 01       	movw	r20, r24
 23a:	8d 81       	ldd	r24, Y+5	; 0x05
 23c:	9e 81       	ldd	r25, Y+6	; 0x06
 23e:	af 81       	ldd	r26, Y+7	; 0x07
 240:	b8 85       	ldd	r27, Y+8	; 0x08
 242:	79 01       	movw	r14, r18
 244:	8a 01       	movw	r16, r20
 246:	e8 0e       	add	r14, r24
 248:	f9 1e       	adc	r15, r25
 24a:	0a 1f       	adc	r16, r26
 24c:	1b 1f       	adc	r17, r27
 24e:	ed 86       	std	Y+13, r14	; 0x0d
 250:	fe 86       	std	Y+14, r15	; 0x0e
 252:	0f 87       	std	Y+15, r16	; 0x0f
 254:	18 8b       	std	Y+16, r17	; 0x10
 256:	8d 85       	ldd	r24, Y+13	; 0x0d
 258:	9e 85       	ldd	r25, Y+14	; 0x0e
 25a:	af 85       	ldd	r26, Y+15	; 0x0f
 25c:	b8 89       	ldd	r27, Y+16	; 0x10
}
 25e:	bc 01       	movw	r22, r24
 260:	cd 01       	movw	r24, r26
 262:	60 96       	adiw	r28, 0x10	; 16
 264:	0f b6       	in	r0, 0x3f	; 63
 266:	f8 94       	cli
 268:	de bf       	out	0x3e, r29	; 62
 26a:	0f be       	out	0x3f, r0	; 63
 26c:	cd bf       	out	0x3d, r28	; 61
 26e:	cf 91       	pop	r28
 270:	df 91       	pop	r29
 272:	1f 91       	pop	r17
 274:	0f 91       	pop	r16
 276:	ff 90       	pop	r15
 278:	ef 90       	pop	r14
 27a:	08 95       	ret

0000027c <_Z10randomSeedj>:

extern "C" {
  #include "stdlib.h"
}

void randomSeed(unsigned int seed)
 27c:	df 93       	push	r29
 27e:	cf 93       	push	r28
 280:	0f 92       	push	r0
 282:	0f 92       	push	r0
 284:	cd b7       	in	r28, 0x3d	; 61
 286:	de b7       	in	r29, 0x3e	; 62
 288:	9a 83       	std	Y+2, r25	; 0x02
 28a:	89 83       	std	Y+1, r24	; 0x01
{
  if (seed != 0) {
 28c:	89 81       	ldd	r24, Y+1	; 0x01
 28e:	9a 81       	ldd	r25, Y+2	; 0x02
 290:	00 97       	sbiw	r24, 0x00	; 0
 292:	01 f0       	breq	.+0      	; 0x294 <_Z10randomSeedj+0x18>
    srandom(seed);
 294:	89 81       	ldd	r24, Y+1	; 0x01
 296:	9a 81       	ldd	r25, Y+2	; 0x02
 298:	cc 01       	movw	r24, r24
 29a:	a0 e0       	ldi	r26, 0x00	; 0
 29c:	b0 e0       	ldi	r27, 0x00	; 0
 29e:	bc 01       	movw	r22, r24
 2a0:	cd 01       	movw	r24, r26
 2a2:	0e 94 00 00 	call	0	; 0x0 <_Z3maplllll>
  }
}
 2a6:	0f 90       	pop	r0
 2a8:	0f 90       	pop	r0
 2aa:	cf 91       	pop	r28
 2ac:	df 91       	pop	r29
 2ae:	08 95       	ret

WString.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001b22  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  1 .data         00000001  00000000  00000000  00001b56  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00000000  00000000  00001b57  2**0
                  ALLOC
  3 .stab         0000207c  00000000  00000000  00001b58  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      0000197a  00000000  00000000  00003bd4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_ZNK6String6lengthEv>:
    int	indexOf( const String &str, unsigned int fromIndex ) const;
    int	lastIndexOf( char ch ) const;
    int	lastIndexOf( char ch, unsigned int fromIndex ) const;
    int	lastIndexOf( const String &str ) const;
    int	lastIndexOf( const String &str, unsigned int fromIndex ) const;
    const unsigned int length( ) const { return _length; }
       0:	df 93       	push	r29
       2:	cf 93       	push	r28
       4:	0f 92       	push	r0
       6:	0f 92       	push	r0
       8:	cd b7       	in	r28, 0x3d	; 61
       a:	de b7       	in	r29, 0x3e	; 62
       c:	9a 83       	std	Y+2, r25	; 0x02
       e:	89 83       	std	Y+1, r24	; 0x01
      10:	e9 81       	ldd	r30, Y+1	; 0x01
      12:	fa 81       	ldd	r31, Y+2	; 0x02
      14:	84 81       	ldd	r24, Z+4	; 0x04
      16:	95 81       	ldd	r25, Z+5	; 0x05
      18:	0f 90       	pop	r0
      1a:	0f 90       	pop	r0
      1c:	cf 91       	pop	r28
      1e:	df 91       	pop	r29
      20:	08 95       	ret

00000022 <_ZN6String9setCharAtEjc>:
char String::charAt( unsigned int loc ) const
{
  return operator[]( loc );
}

void String::setCharAt( unsigned int loc, const char aChar ) 
      22:	df 93       	push	r29
      24:	cf 93       	push	r28
      26:	00 d0       	rcall	.+0      	; 0x28 <_ZN6String9setCharAtEjc+0x6>
      28:	0f 92       	push	r0
      2a:	0f 92       	push	r0
      2c:	cd b7       	in	r28, 0x3d	; 61
      2e:	de b7       	in	r29, 0x3e	; 62
      30:	9a 83       	std	Y+2, r25	; 0x02
      32:	89 83       	std	Y+1, r24	; 0x01
      34:	7c 83       	std	Y+4, r23	; 0x04
      36:	6b 83       	std	Y+3, r22	; 0x03
      38:	4d 83       	std	Y+5, r20	; 0x05
{
  if(_buffer == NULL) return;
      3a:	e9 81       	ldd	r30, Y+1	; 0x01
      3c:	fa 81       	ldd	r31, Y+2	; 0x02
      3e:	80 81       	ld	r24, Z
      40:	91 81       	ldd	r25, Z+1	; 0x01
      42:	00 97       	sbiw	r24, 0x00	; 0
      44:	01 f0       	breq	.+0      	; 0x46 <_ZN6String9setCharAtEjc+0x24>
  if(_length > loc) {
      46:	e9 81       	ldd	r30, Y+1	; 0x01
      48:	fa 81       	ldd	r31, Y+2	; 0x02
      4a:	24 81       	ldd	r18, Z+4	; 0x04
      4c:	35 81       	ldd	r19, Z+5	; 0x05
      4e:	8b 81       	ldd	r24, Y+3	; 0x03
      50:	9c 81       	ldd	r25, Y+4	; 0x04
      52:	82 17       	cp	r24, r18
      54:	93 07       	cpc	r25, r19
      56:	00 f4       	brcc	.+0      	; 0x58 <_ZN6String9setCharAtEjc+0x36>
    _buffer[loc] = aChar;
      58:	e9 81       	ldd	r30, Y+1	; 0x01
      5a:	fa 81       	ldd	r31, Y+2	; 0x02
      5c:	20 81       	ld	r18, Z
      5e:	31 81       	ldd	r19, Z+1	; 0x01
      60:	8b 81       	ldd	r24, Y+3	; 0x03
      62:	9c 81       	ldd	r25, Y+4	; 0x04
      64:	f9 01       	movw	r30, r18
      66:	e8 0f       	add	r30, r24
      68:	f9 1f       	adc	r31, r25
      6a:	8d 81       	ldd	r24, Y+5	; 0x05
      6c:	80 83       	st	Z, r24
  }
}
      6e:	0f 90       	pop	r0
      70:	0f 90       	pop	r0
      72:	0f 90       	pop	r0
      74:	0f 90       	pop	r0
      76:	0f 90       	pop	r0
      78:	cf 91       	pop	r28
      7a:	df 91       	pop	r29
      7c:	08 95       	ret

0000007e <_ZN6StringixEj>:
int String::operator>=( const String & rhs ) const
{
  return strcmp( _buffer, rhs._buffer ) >= 0;
}

char & String::operator[]( unsigned int index )
      7e:	df 93       	push	r29
      80:	cf 93       	push	r28
      82:	00 d0       	rcall	.+0      	; 0x84 <_ZN6StringixEj+0x6>
      84:	00 d0       	rcall	.+0      	; 0x86 <_ZN6StringixEj+0x8>
      86:	cd b7       	in	r28, 0x3d	; 61
      88:	de b7       	in	r29, 0x3e	; 62
      8a:	9a 83       	std	Y+2, r25	; 0x02
      8c:	89 83       	std	Y+1, r24	; 0x01
      8e:	7c 83       	std	Y+4, r23	; 0x04
      90:	6b 83       	std	Y+3, r22	; 0x03
{
  static char dummy_writable_char;
  if (index >= _length || !_buffer) {
      92:	e9 81       	ldd	r30, Y+1	; 0x01
      94:	fa 81       	ldd	r31, Y+2	; 0x02
      96:	24 81       	ldd	r18, Z+4	; 0x04
      98:	35 81       	ldd	r19, Z+5	; 0x05
      9a:	8b 81       	ldd	r24, Y+3	; 0x03
      9c:	9c 81       	ldd	r25, Y+4	; 0x04
      9e:	82 17       	cp	r24, r18
      a0:	93 07       	cpc	r25, r19
      a2:	00 f4       	brcc	.+0      	; 0xa4 <_ZN6StringixEj+0x26>
      a4:	e9 81       	ldd	r30, Y+1	; 0x01
      a6:	fa 81       	ldd	r31, Y+2	; 0x02
      a8:	80 81       	ld	r24, Z
      aa:	91 81       	ldd	r25, Z+1	; 0x01
      ac:	00 97       	sbiw	r24, 0x00	; 0
      ae:	01 f4       	brne	.+0      	; 0xb0 <_ZN6StringixEj+0x32>
    dummy_writable_char = 0;
      b0:	10 92 00 00 	sts	0x0000, r1
    return dummy_writable_char;
      b4:	40 e0       	ldi	r20, 0x00	; 0
      b6:	50 e0       	ldi	r21, 0x00	; 0
      b8:	5e 83       	std	Y+6, r21	; 0x06
      ba:	4d 83       	std	Y+5, r20	; 0x05
      bc:	00 c0       	rjmp	.+0      	; 0xbe <_ZN6StringixEj+0x40>
  }
  return _buffer[ index ];
      be:	e9 81       	ldd	r30, Y+1	; 0x01
      c0:	fa 81       	ldd	r31, Y+2	; 0x02
      c2:	20 81       	ld	r18, Z
      c4:	31 81       	ldd	r19, Z+1	; 0x01
      c6:	8b 81       	ldd	r24, Y+3	; 0x03
      c8:	9c 81       	ldd	r25, Y+4	; 0x04
      ca:	a9 01       	movw	r20, r18
      cc:	48 0f       	add	r20, r24
      ce:	59 1f       	adc	r21, r25
      d0:	5e 83       	std	Y+6, r21	; 0x06
      d2:	4d 83       	std	Y+5, r20	; 0x05
      d4:	8d 81       	ldd	r24, Y+5	; 0x05
      d6:	9e 81       	ldd	r25, Y+6	; 0x06
}
      d8:	26 96       	adiw	r28, 0x06	; 6
      da:	0f b6       	in	r0, 0x3f	; 63
      dc:	f8 94       	cli
      de:	de bf       	out	0x3e, r29	; 62
      e0:	0f be       	out	0x3f, r0	; 63
      e2:	cd bf       	out	0x3d, r28	; 61
      e4:	cf 91       	pop	r28
      e6:	df 91       	pop	r29
      e8:	08 95       	ret

000000ea <_ZNK6StringixEj>:

char String::operator[]( unsigned int index ) const
      ea:	df 93       	push	r29
      ec:	cf 93       	push	r28
      ee:	00 d0       	rcall	.+0      	; 0xf0 <_ZNK6StringixEj+0x6>
      f0:	0f 92       	push	r0
      f2:	cd b7       	in	r28, 0x3d	; 61
      f4:	de b7       	in	r29, 0x3e	; 62
      f6:	9a 83       	std	Y+2, r25	; 0x02
      f8:	89 83       	std	Y+1, r24	; 0x01
      fa:	7c 83       	std	Y+4, r23	; 0x04
      fc:	6b 83       	std	Y+3, r22	; 0x03
{
  // need to check for valid index, to do later
  return _buffer[ index ];
      fe:	e9 81       	ldd	r30, Y+1	; 0x01
     100:	fa 81       	ldd	r31, Y+2	; 0x02
     102:	20 81       	ld	r18, Z
     104:	31 81       	ldd	r19, Z+1	; 0x01
     106:	8b 81       	ldd	r24, Y+3	; 0x03
     108:	9c 81       	ldd	r25, Y+4	; 0x04
     10a:	f9 01       	movw	r30, r18
     10c:	e8 0f       	add	r30, r24
     10e:	f9 1f       	adc	r31, r25
     110:	80 81       	ld	r24, Z
}
     112:	0f 90       	pop	r0
     114:	0f 90       	pop	r0
     116:	0f 90       	pop	r0
     118:	0f 90       	pop	r0
     11a:	cf 91       	pop	r28
     11c:	df 91       	pop	r29
     11e:	08 95       	ret

00000120 <_ZNK6String6charAtEj>:
  getBuffer( _length = strlen(buf) );
  if ( _buffer != NULL )
    strcpy( _buffer, buf );
}

char String::charAt( unsigned int loc ) const
     120:	df 93       	push	r29
     122:	cf 93       	push	r28
     124:	00 d0       	rcall	.+0      	; 0x126 <_ZNK6String6charAtEj+0x6>
     126:	0f 92       	push	r0
     128:	cd b7       	in	r28, 0x3d	; 61
     12a:	de b7       	in	r29, 0x3e	; 62
     12c:	9a 83       	std	Y+2, r25	; 0x02
     12e:	89 83       	std	Y+1, r24	; 0x01
     130:	7c 83       	std	Y+4, r23	; 0x04
     132:	6b 83       	std	Y+3, r22	; 0x03
{
  return operator[]( loc );
     134:	89 81       	ldd	r24, Y+1	; 0x01
     136:	9a 81       	ldd	r25, Y+2	; 0x02
     138:	2b 81       	ldd	r18, Y+3	; 0x03
     13a:	3c 81       	ldd	r19, Y+4	; 0x04
     13c:	b9 01       	movw	r22, r18
     13e:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
}
     142:	0f 90       	pop	r0
     144:	0f 90       	pop	r0
     146:	0f 90       	pop	r0
     148:	0f 90       	pop	r0
     14a:	cf 91       	pop	r28
     14c:	df 91       	pop	r29
     14e:	08 95       	ret

00000150 <_ZN6String5toIntEv>:
  strncpy(buf, _buffer, len);
  buf[len] = 0;
}


long String::toInt() {
     150:	df 93       	push	r29
     152:	cf 93       	push	r28
     154:	0f 92       	push	r0
     156:	0f 92       	push	r0
     158:	cd b7       	in	r28, 0x3d	; 61
     15a:	de b7       	in	r29, 0x3e	; 62
     15c:	9a 83       	std	Y+2, r25	; 0x02
     15e:	89 83       	std	Y+1, r24	; 0x01
  return atol(_buffer);
     160:	e9 81       	ldd	r30, Y+1	; 0x01
     162:	fa 81       	ldd	r31, Y+2	; 0x02
     164:	80 81       	ld	r24, Z
     166:	91 81       	ldd	r25, Z+1	; 0x01
     168:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
     16c:	dc 01       	movw	r26, r24
     16e:	cb 01       	movw	r24, r22
}
     170:	bc 01       	movw	r22, r24
     172:	cd 01       	movw	r24, r26
     174:	0f 90       	pop	r0
     176:	0f 90       	pop	r0
     178:	cf 91       	pop	r28
     17a:	df 91       	pop	r29
     17c:	08 95       	ret

0000017e <_ZN6String11toCharArrayEPcj>:
  if (len > _length) len = _length;
  strncpy((char *)buf, _buffer, len);
  buf[len] = 0;
}

void String::toCharArray(char *buf, unsigned int bufsize)
     17e:	df 93       	push	r29
     180:	cf 93       	push	r28
     182:	cd b7       	in	r28, 0x3d	; 61
     184:	de b7       	in	r29, 0x3e	; 62
     186:	28 97       	sbiw	r28, 0x08	; 8
     188:	0f b6       	in	r0, 0x3f	; 63
     18a:	f8 94       	cli
     18c:	de bf       	out	0x3e, r29	; 62
     18e:	0f be       	out	0x3f, r0	; 63
     190:	cd bf       	out	0x3d, r28	; 61
     192:	9c 83       	std	Y+4, r25	; 0x04
     194:	8b 83       	std	Y+3, r24	; 0x03
     196:	7e 83       	std	Y+6, r23	; 0x06
     198:	6d 83       	std	Y+5, r22	; 0x05
     19a:	58 87       	std	Y+8, r21	; 0x08
     19c:	4f 83       	std	Y+7, r20	; 0x07
{
  if (!bufsize || !buf) return;
     19e:	8f 81       	ldd	r24, Y+7	; 0x07
     1a0:	98 85       	ldd	r25, Y+8	; 0x08
     1a2:	00 97       	sbiw	r24, 0x00	; 0
     1a4:	01 f0       	breq	.+0      	; 0x1a6 <_ZN6String11toCharArrayEPcj+0x28>
     1a6:	8d 81       	ldd	r24, Y+5	; 0x05
     1a8:	9e 81       	ldd	r25, Y+6	; 0x06
     1aa:	00 97       	sbiw	r24, 0x00	; 0
     1ac:	01 f0       	breq	.+0      	; 0x1ae <_ZN6String11toCharArrayEPcj+0x30>
  unsigned int len = bufsize - 1;
     1ae:	8f 81       	ldd	r24, Y+7	; 0x07
     1b0:	98 85       	ldd	r25, Y+8	; 0x08
     1b2:	01 97       	sbiw	r24, 0x01	; 1
     1b4:	9a 83       	std	Y+2, r25	; 0x02
     1b6:	89 83       	std	Y+1, r24	; 0x01
  if (len > _length) len = _length;
     1b8:	eb 81       	ldd	r30, Y+3	; 0x03
     1ba:	fc 81       	ldd	r31, Y+4	; 0x04
     1bc:	24 81       	ldd	r18, Z+4	; 0x04
     1be:	35 81       	ldd	r19, Z+5	; 0x05
     1c0:	89 81       	ldd	r24, Y+1	; 0x01
     1c2:	9a 81       	ldd	r25, Y+2	; 0x02
     1c4:	28 17       	cp	r18, r24
     1c6:	39 07       	cpc	r19, r25
     1c8:	00 f4       	brcc	.+0      	; 0x1ca <_ZN6String11toCharArrayEPcj+0x4c>
     1ca:	eb 81       	ldd	r30, Y+3	; 0x03
     1cc:	fc 81       	ldd	r31, Y+4	; 0x04
     1ce:	84 81       	ldd	r24, Z+4	; 0x04
     1d0:	95 81       	ldd	r25, Z+5	; 0x05
     1d2:	9a 83       	std	Y+2, r25	; 0x02
     1d4:	89 83       	std	Y+1, r24	; 0x01
  strncpy(buf, _buffer, len);
     1d6:	eb 81       	ldd	r30, Y+3	; 0x03
     1d8:	fc 81       	ldd	r31, Y+4	; 0x04
     1da:	40 81       	ld	r20, Z
     1dc:	51 81       	ldd	r21, Z+1	; 0x01
     1de:	8d 81       	ldd	r24, Y+5	; 0x05
     1e0:	9e 81       	ldd	r25, Y+6	; 0x06
     1e2:	29 81       	ldd	r18, Y+1	; 0x01
     1e4:	3a 81       	ldd	r19, Y+2	; 0x02
     1e6:	ba 01       	movw	r22, r20
     1e8:	a9 01       	movw	r20, r18
     1ea:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
  buf[len] = 0;
     1ee:	2d 81       	ldd	r18, Y+5	; 0x05
     1f0:	3e 81       	ldd	r19, Y+6	; 0x06
     1f2:	89 81       	ldd	r24, Y+1	; 0x01
     1f4:	9a 81       	ldd	r25, Y+2	; 0x02
     1f6:	f9 01       	movw	r30, r18
     1f8:	e8 0f       	add	r30, r24
     1fa:	f9 1f       	adc	r31, r25
     1fc:	10 82       	st	Z, r1
}
     1fe:	28 96       	adiw	r28, 0x08	; 8
     200:	0f b6       	in	r0, 0x3f	; 63
     202:	f8 94       	cli
     204:	de bf       	out	0x3e, r29	; 62
     206:	0f be       	out	0x3f, r0	; 63
     208:	cd bf       	out	0x3d, r28	; 61
     20a:	cf 91       	pop	r28
     20c:	df 91       	pop	r29
     20e:	08 95       	ret

00000210 <_ZN6String8getBytesEPhj>:
  }

  return temp.substring( i, j + 1);
}

void String::getBytes(unsigned char *buf, unsigned int bufsize)
     210:	df 93       	push	r29
     212:	cf 93       	push	r28
     214:	cd b7       	in	r28, 0x3d	; 61
     216:	de b7       	in	r29, 0x3e	; 62
     218:	28 97       	sbiw	r28, 0x08	; 8
     21a:	0f b6       	in	r0, 0x3f	; 63
     21c:	f8 94       	cli
     21e:	de bf       	out	0x3e, r29	; 62
     220:	0f be       	out	0x3f, r0	; 63
     222:	cd bf       	out	0x3d, r28	; 61
     224:	9c 83       	std	Y+4, r25	; 0x04
     226:	8b 83       	std	Y+3, r24	; 0x03
     228:	7e 83       	std	Y+6, r23	; 0x06
     22a:	6d 83       	std	Y+5, r22	; 0x05
     22c:	58 87       	std	Y+8, r21	; 0x08
     22e:	4f 83       	std	Y+7, r20	; 0x07
{
  if (!bufsize || !buf) return;
     230:	8f 81       	ldd	r24, Y+7	; 0x07
     232:	98 85       	ldd	r25, Y+8	; 0x08
     234:	00 97       	sbiw	r24, 0x00	; 0
     236:	01 f0       	breq	.+0      	; 0x238 <_ZN6String8getBytesEPhj+0x28>
     238:	8d 81       	ldd	r24, Y+5	; 0x05
     23a:	9e 81       	ldd	r25, Y+6	; 0x06
     23c:	00 97       	sbiw	r24, 0x00	; 0
     23e:	01 f0       	breq	.+0      	; 0x240 <_ZN6String8getBytesEPhj+0x30>
  unsigned int len = bufsize - 1;
     240:	8f 81       	ldd	r24, Y+7	; 0x07
     242:	98 85       	ldd	r25, Y+8	; 0x08
     244:	01 97       	sbiw	r24, 0x01	; 1
     246:	9a 83       	std	Y+2, r25	; 0x02
     248:	89 83       	std	Y+1, r24	; 0x01
  if (len > _length) len = _length;
     24a:	eb 81       	ldd	r30, Y+3	; 0x03
     24c:	fc 81       	ldd	r31, Y+4	; 0x04
     24e:	24 81       	ldd	r18, Z+4	; 0x04
     250:	35 81       	ldd	r19, Z+5	; 0x05
     252:	89 81       	ldd	r24, Y+1	; 0x01
     254:	9a 81       	ldd	r25, Y+2	; 0x02
     256:	28 17       	cp	r18, r24
     258:	39 07       	cpc	r19, r25
     25a:	00 f4       	brcc	.+0      	; 0x25c <_ZN6String8getBytesEPhj+0x4c>
     25c:	eb 81       	ldd	r30, Y+3	; 0x03
     25e:	fc 81       	ldd	r31, Y+4	; 0x04
     260:	84 81       	ldd	r24, Z+4	; 0x04
     262:	95 81       	ldd	r25, Z+5	; 0x05
     264:	9a 83       	std	Y+2, r25	; 0x02
     266:	89 83       	std	Y+1, r24	; 0x01
  strncpy((char *)buf, _buffer, len);
     268:	eb 81       	ldd	r30, Y+3	; 0x03
     26a:	fc 81       	ldd	r31, Y+4	; 0x04
     26c:	40 81       	ld	r20, Z
     26e:	51 81       	ldd	r21, Z+1	; 0x01
     270:	8d 81       	ldd	r24, Y+5	; 0x05
     272:	9e 81       	ldd	r25, Y+6	; 0x06
     274:	29 81       	ldd	r18, Y+1	; 0x01
     276:	3a 81       	ldd	r19, Y+2	; 0x02
     278:	ba 01       	movw	r22, r20
     27a:	a9 01       	movw	r20, r18
     27c:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
  buf[len] = 0;
     280:	2d 81       	ldd	r18, Y+5	; 0x05
     282:	3e 81       	ldd	r19, Y+6	; 0x06
     284:	89 81       	ldd	r24, Y+1	; 0x01
     286:	9a 81       	ldd	r25, Y+2	; 0x02
     288:	f9 01       	movw	r30, r18
     28a:	e8 0f       	add	r30, r24
     28c:	f9 1f       	adc	r31, r25
     28e:	10 82       	st	Z, r1
}
     290:	28 96       	adiw	r28, 0x08	; 8
     292:	0f b6       	in	r0, 0x3f	; 63
     294:	f8 94       	cli
     296:	de bf       	out	0x3e, r29	; 62
     298:	0f be       	out	0x3f, r0	; 63
     29a:	cd bf       	out	0x3d, r28	; 61
     29c:	cf 91       	pop	r28
     29e:	df 91       	pop	r29
     2a0:	08 95       	ret

000002a2 <_ZN6StringD1Ev>:
    String( const unsigned char );
    String( const int, const int base=10);
    String( const unsigned int, const int base=10 );
    String( const long, const int base=10 );
    String( const unsigned long, const int base=10 );
    ~String() { free(_buffer); _length = _capacity = 0;}     //added _length = _capacity = 0;
     2a2:	df 93       	push	r29
     2a4:	cf 93       	push	r28
     2a6:	0f 92       	push	r0
     2a8:	0f 92       	push	r0
     2aa:	cd b7       	in	r28, 0x3d	; 61
     2ac:	de b7       	in	r29, 0x3e	; 62
     2ae:	9a 83       	std	Y+2, r25	; 0x02
     2b0:	89 83       	std	Y+1, r24	; 0x01
     2b2:	e9 81       	ldd	r30, Y+1	; 0x01
     2b4:	fa 81       	ldd	r31, Y+2	; 0x02
     2b6:	80 81       	ld	r24, Z
     2b8:	91 81       	ldd	r25, Z+1	; 0x01
     2ba:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
     2be:	e9 81       	ldd	r30, Y+1	; 0x01
     2c0:	fa 81       	ldd	r31, Y+2	; 0x02
     2c2:	13 82       	std	Z+3, r1	; 0x03
     2c4:	12 82       	std	Z+2, r1	; 0x02
     2c6:	e9 81       	ldd	r30, Y+1	; 0x01
     2c8:	fa 81       	ldd	r31, Y+2	; 0x02
     2ca:	82 81       	ldd	r24, Z+2	; 0x02
     2cc:	93 81       	ldd	r25, Z+3	; 0x03
     2ce:	e9 81       	ldd	r30, Y+1	; 0x01
     2d0:	fa 81       	ldd	r31, Y+2	; 0x02
     2d2:	95 83       	std	Z+5, r25	; 0x05
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	0f 90       	pop	r0
     2d8:	0f 90       	pop	r0
     2da:	cf 91       	pop	r28
     2dc:	df 91       	pop	r29
     2de:	08 95       	ret

000002e0 <_ZNK6String10startsWithERKS_j>:
    return 0;

  return startsWith( s2, 0 );
}

boolean String::startsWith( const String &s2, unsigned int offset ) const
     2e0:	df 93       	push	r29
     2e2:	cf 93       	push	r28
     2e4:	cd b7       	in	r28, 0x3d	; 61
     2e6:	de b7       	in	r29, 0x3e	; 62
     2e8:	27 97       	sbiw	r28, 0x07	; 7
     2ea:	0f b6       	in	r0, 0x3f	; 63
     2ec:	f8 94       	cli
     2ee:	de bf       	out	0x3e, r29	; 62
     2f0:	0f be       	out	0x3f, r0	; 63
     2f2:	cd bf       	out	0x3d, r28	; 61
     2f4:	9a 83       	std	Y+2, r25	; 0x02
     2f6:	89 83       	std	Y+1, r24	; 0x01
     2f8:	7c 83       	std	Y+4, r23	; 0x04
     2fa:	6b 83       	std	Y+3, r22	; 0x03
     2fc:	5e 83       	std	Y+6, r21	; 0x06
     2fe:	4d 83       	std	Y+5, r20	; 0x05
{
  if ( offset > _length - s2._length )
     300:	e9 81       	ldd	r30, Y+1	; 0x01
     302:	fa 81       	ldd	r31, Y+2	; 0x02
     304:	24 81       	ldd	r18, Z+4	; 0x04
     306:	35 81       	ldd	r19, Z+5	; 0x05
     308:	eb 81       	ldd	r30, Y+3	; 0x03
     30a:	fc 81       	ldd	r31, Y+4	; 0x04
     30c:	84 81       	ldd	r24, Z+4	; 0x04
     30e:	95 81       	ldd	r25, Z+5	; 0x05
     310:	28 1b       	sub	r18, r24
     312:	39 0b       	sbc	r19, r25
     314:	8d 81       	ldd	r24, Y+5	; 0x05
     316:	9e 81       	ldd	r25, Y+6	; 0x06
     318:	28 17       	cp	r18, r24
     31a:	39 07       	cpc	r19, r25
     31c:	00 f4       	brcc	.+0      	; 0x31e <_ZNK6String10startsWithERKS_j+0x3e>
    return 0;
     31e:	1f 82       	std	Y+7, r1	; 0x07
     320:	00 c0       	rjmp	.+0      	; 0x322 <_ZNK6String10startsWithERKS_j+0x42>

  return strncmp( &_buffer[offset], s2._buffer, s2._length ) == 0;
     322:	e9 81       	ldd	r30, Y+1	; 0x01
     324:	fa 81       	ldd	r31, Y+2	; 0x02
     326:	20 81       	ld	r18, Z
     328:	31 81       	ldd	r19, Z+1	; 0x01
     32a:	8d 81       	ldd	r24, Y+5	; 0x05
     32c:	9e 81       	ldd	r25, Y+6	; 0x06
     32e:	82 0f       	add	r24, r18
     330:	93 1f       	adc	r25, r19
     332:	eb 81       	ldd	r30, Y+3	; 0x03
     334:	fc 81       	ldd	r31, Y+4	; 0x04
     336:	40 81       	ld	r20, Z
     338:	51 81       	ldd	r21, Z+1	; 0x01
     33a:	eb 81       	ldd	r30, Y+3	; 0x03
     33c:	fc 81       	ldd	r31, Y+4	; 0x04
     33e:	24 81       	ldd	r18, Z+4	; 0x04
     340:	35 81       	ldd	r19, Z+5	; 0x05
     342:	ba 01       	movw	r22, r20
     344:	a9 01       	movw	r20, r18
     346:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
     34a:	1f 82       	std	Y+7, r1	; 0x07
     34c:	00 97       	sbiw	r24, 0x00	; 0
     34e:	01 f4       	brne	.+0      	; 0x350 <_ZNK6String10startsWithERKS_j+0x70>
     350:	81 e0       	ldi	r24, 0x01	; 1
     352:	8f 83       	std	Y+7, r24	; 0x07
     354:	8f 81       	ldd	r24, Y+7	; 0x07
}
     356:	27 96       	adiw	r28, 0x07	; 7
     358:	0f b6       	in	r0, 0x3f	; 63
     35a:	f8 94       	cli
     35c:	de bf       	out	0x3e, r29	; 62
     35e:	0f be       	out	0x3f, r0	; 63
     360:	cd bf       	out	0x3d, r28	; 61
     362:	cf 91       	pop	r28
     364:	df 91       	pop	r29
     366:	08 95       	ret

00000368 <_ZNK6String10startsWithERKS_>:
    return i;
  }
  return -1;
}

boolean String::startsWith( const String &s2 ) const
     368:	df 93       	push	r29
     36a:	cf 93       	push	r28
     36c:	00 d0       	rcall	.+0      	; 0x36e <_ZNK6String10startsWithERKS_+0x6>
     36e:	0f 92       	push	r0
     370:	0f 92       	push	r0
     372:	cd b7       	in	r28, 0x3d	; 61
     374:	de b7       	in	r29, 0x3e	; 62
     376:	9a 83       	std	Y+2, r25	; 0x02
     378:	89 83       	std	Y+1, r24	; 0x01
     37a:	7c 83       	std	Y+4, r23	; 0x04
     37c:	6b 83       	std	Y+3, r22	; 0x03
{
  if ( _length < s2._length )
     37e:	e9 81       	ldd	r30, Y+1	; 0x01
     380:	fa 81       	ldd	r31, Y+2	; 0x02
     382:	24 81       	ldd	r18, Z+4	; 0x04
     384:	35 81       	ldd	r19, Z+5	; 0x05
     386:	eb 81       	ldd	r30, Y+3	; 0x03
     388:	fc 81       	ldd	r31, Y+4	; 0x04
     38a:	84 81       	ldd	r24, Z+4	; 0x04
     38c:	95 81       	ldd	r25, Z+5	; 0x05
     38e:	28 17       	cp	r18, r24
     390:	39 07       	cpc	r19, r25
     392:	00 f4       	brcc	.+0      	; 0x394 <_ZNK6String10startsWithERKS_+0x2c>
    return 0;
     394:	1d 82       	std	Y+5, r1	; 0x05
     396:	00 c0       	rjmp	.+0      	; 0x398 <_ZNK6String10startsWithERKS_+0x30>

  return startsWith( s2, 0 );
     398:	89 81       	ldd	r24, Y+1	; 0x01
     39a:	9a 81       	ldd	r25, Y+2	; 0x02
     39c:	2b 81       	ldd	r18, Y+3	; 0x03
     39e:	3c 81       	ldd	r19, Y+4	; 0x04
     3a0:	b9 01       	movw	r22, r18
     3a2:	40 e0       	ldi	r20, 0x00	; 0
     3a4:	50 e0       	ldi	r21, 0x00	; 0
     3a6:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
     3aa:	8d 83       	std	Y+5, r24	; 0x05
     3ac:	8d 81       	ldd	r24, Y+5	; 0x05
}
     3ae:	0f 90       	pop	r0
     3b0:	0f 90       	pop	r0
     3b2:	0f 90       	pop	r0
     3b4:	0f 90       	pop	r0
     3b6:	0f 90       	pop	r0
     3b8:	cf 91       	pop	r28
     3ba:	df 91       	pop	r29
     3bc:	08 95       	ret

000003be <_ZNK6String11lastIndexOfEcj>:
int String::lastIndexOf( char theChar ) const
{
  return lastIndexOf( theChar, _length - 1 );
}

int String::lastIndexOf( char ch, unsigned int fromIndex ) const
     3be:	df 93       	push	r29
     3c0:	cf 93       	push	r28
     3c2:	cd b7       	in	r28, 0x3d	; 61
     3c4:	de b7       	in	r29, 0x3e	; 62
     3c6:	2a 97       	sbiw	r28, 0x0a	; 10
     3c8:	0f b6       	in	r0, 0x3f	; 63
     3ca:	f8 94       	cli
     3cc:	de bf       	out	0x3e, r29	; 62
     3ce:	0f be       	out	0x3f, r0	; 63
     3d0:	cd bf       	out	0x3d, r28	; 61
     3d2:	9d 83       	std	Y+5, r25	; 0x05
     3d4:	8c 83       	std	Y+4, r24	; 0x04
     3d6:	6e 83       	std	Y+6, r22	; 0x06
     3d8:	58 87       	std	Y+8, r21	; 0x08
     3da:	4f 83       	std	Y+7, r20	; 0x07
{
  if ( fromIndex >= _length )
     3dc:	ec 81       	ldd	r30, Y+4	; 0x04
     3de:	fd 81       	ldd	r31, Y+5	; 0x05
     3e0:	24 81       	ldd	r18, Z+4	; 0x04
     3e2:	35 81       	ldd	r19, Z+5	; 0x05
     3e4:	8f 81       	ldd	r24, Y+7	; 0x07
     3e6:	98 85       	ldd	r25, Y+8	; 0x08
     3e8:	82 17       	cp	r24, r18
     3ea:	93 07       	cpc	r25, r19
     3ec:	00 f0       	brcs	.+0      	; 0x3ee <_ZNK6String11lastIndexOfEcj+0x30>
    return -1;
     3ee:	4f ef       	ldi	r20, 0xFF	; 255
     3f0:	5f ef       	ldi	r21, 0xFF	; 255
     3f2:	5a 87       	std	Y+10, r21	; 0x0a
     3f4:	49 87       	std	Y+9, r20	; 0x09
     3f6:	00 c0       	rjmp	.+0      	; 0x3f8 <_ZNK6String11lastIndexOfEcj+0x3a>

  char tempchar = _buffer[fromIndex + 1];
     3f8:	ec 81       	ldd	r30, Y+4	; 0x04
     3fa:	fd 81       	ldd	r31, Y+5	; 0x05
     3fc:	20 81       	ld	r18, Z
     3fe:	31 81       	ldd	r19, Z+1	; 0x01
     400:	8f 81       	ldd	r24, Y+7	; 0x07
     402:	98 85       	ldd	r25, Y+8	; 0x08
     404:	01 96       	adiw	r24, 0x01	; 1
     406:	f9 01       	movw	r30, r18
     408:	e8 0f       	add	r30, r24
     40a:	f9 1f       	adc	r31, r25
     40c:	80 81       	ld	r24, Z
     40e:	8b 83       	std	Y+3, r24	; 0x03
  _buffer[fromIndex + 1] = '\0';
     410:	ec 81       	ldd	r30, Y+4	; 0x04
     412:	fd 81       	ldd	r31, Y+5	; 0x05
     414:	20 81       	ld	r18, Z
     416:	31 81       	ldd	r19, Z+1	; 0x01
     418:	8f 81       	ldd	r24, Y+7	; 0x07
     41a:	98 85       	ldd	r25, Y+8	; 0x08
     41c:	01 96       	adiw	r24, 0x01	; 1
     41e:	f9 01       	movw	r30, r18
     420:	e8 0f       	add	r30, r24
     422:	f9 1f       	adc	r31, r25
     424:	10 82       	st	Z, r1
  char* temp = strrchr( _buffer, ch );
     426:	ec 81       	ldd	r30, Y+4	; 0x04
     428:	fd 81       	ldd	r31, Y+5	; 0x05
     42a:	40 81       	ld	r20, Z
     42c:	51 81       	ldd	r21, Z+1	; 0x01
     42e:	8e 81       	ldd	r24, Y+6	; 0x06
     430:	28 2f       	mov	r18, r24
     432:	30 e0       	ldi	r19, 0x00	; 0
     434:	ca 01       	movw	r24, r20
     436:	b9 01       	movw	r22, r18
     438:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
     43c:	9a 83       	std	Y+2, r25	; 0x02
     43e:	89 83       	std	Y+1, r24	; 0x01
  _buffer[fromIndex + 1] = tempchar;
     440:	ec 81       	ldd	r30, Y+4	; 0x04
     442:	fd 81       	ldd	r31, Y+5	; 0x05
     444:	20 81       	ld	r18, Z
     446:	31 81       	ldd	r19, Z+1	; 0x01
     448:	8f 81       	ldd	r24, Y+7	; 0x07
     44a:	98 85       	ldd	r25, Y+8	; 0x08
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	f9 01       	movw	r30, r18
     450:	e8 0f       	add	r30, r24
     452:	f9 1f       	adc	r31, r25
     454:	8b 81       	ldd	r24, Y+3	; 0x03
     456:	80 83       	st	Z, r24

  if ( temp == NULL )
     458:	89 81       	ldd	r24, Y+1	; 0x01
     45a:	9a 81       	ldd	r25, Y+2	; 0x02
     45c:	00 97       	sbiw	r24, 0x00	; 0
     45e:	01 f4       	brne	.+0      	; 0x460 <_ZNK6String11lastIndexOfEcj+0xa2>
    return -1;
     460:	8f ef       	ldi	r24, 0xFF	; 255
     462:	9f ef       	ldi	r25, 0xFF	; 255
     464:	9a 87       	std	Y+10, r25	; 0x0a
     466:	89 87       	std	Y+9, r24	; 0x09
     468:	00 c0       	rjmp	.+0      	; 0x46a <_ZNK6String11lastIndexOfEcj+0xac>

  return temp - _buffer;
     46a:	29 81       	ldd	r18, Y+1	; 0x01
     46c:	3a 81       	ldd	r19, Y+2	; 0x02
     46e:	ec 81       	ldd	r30, Y+4	; 0x04
     470:	fd 81       	ldd	r31, Y+5	; 0x05
     472:	80 81       	ld	r24, Z
     474:	91 81       	ldd	r25, Z+1	; 0x01
     476:	a9 01       	movw	r20, r18
     478:	48 1b       	sub	r20, r24
     47a:	59 0b       	sbc	r21, r25
     47c:	5a 87       	std	Y+10, r21	; 0x0a
     47e:	49 87       	std	Y+9, r20	; 0x09
     480:	89 85       	ldd	r24, Y+9	; 0x09
     482:	9a 85       	ldd	r25, Y+10	; 0x0a
}
     484:	2a 96       	adiw	r28, 0x0a	; 10
     486:	0f b6       	in	r0, 0x3f	; 63
     488:	f8 94       	cli
     48a:	de bf       	out	0x3e, r29	; 62
     48c:	0f be       	out	0x3f, r0	; 63
     48e:	cd bf       	out	0x3d, r28	; 61
     490:	cf 91       	pop	r28
     492:	df 91       	pop	r29
     494:	08 95       	ret

00000496 <_ZNK6String11lastIndexOfEc>:
    return -1;

  return theFind - _buffer; // pointer subtraction
}

int String::lastIndexOf( char theChar ) const
     496:	df 93       	push	r29
     498:	cf 93       	push	r28
     49a:	00 d0       	rcall	.+0      	; 0x49c <_ZNK6String11lastIndexOfEc+0x6>
     49c:	cd b7       	in	r28, 0x3d	; 61
     49e:	de b7       	in	r29, 0x3e	; 62
     4a0:	9a 83       	std	Y+2, r25	; 0x02
     4a2:	89 83       	std	Y+1, r24	; 0x01
     4a4:	6b 83       	std	Y+3, r22	; 0x03
{
  return lastIndexOf( theChar, _length - 1 );
     4a6:	e9 81       	ldd	r30, Y+1	; 0x01
     4a8:	fa 81       	ldd	r31, Y+2	; 0x02
     4aa:	84 81       	ldd	r24, Z+4	; 0x04
     4ac:	95 81       	ldd	r25, Z+5	; 0x05
     4ae:	9c 01       	movw	r18, r24
     4b0:	21 50       	subi	r18, 0x01	; 1
     4b2:	30 40       	sbci	r19, 0x00	; 0
     4b4:	89 81       	ldd	r24, Y+1	; 0x01
     4b6:	9a 81       	ldd	r25, Y+2	; 0x02
     4b8:	6b 81       	ldd	r22, Y+3	; 0x03
     4ba:	a9 01       	movw	r20, r18
     4bc:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
}
     4c0:	0f 90       	pop	r0
     4c2:	0f 90       	pop	r0
     4c4:	0f 90       	pop	r0
     4c6:	cf 91       	pop	r28
     4c8:	df 91       	pop	r29
     4ca:	08 95       	ret

000004cc <_ZNK6String7indexOfERKS_j>:
int String::indexOf( const String &s2 ) const
{
  return indexOf( s2, 0 );
}

int String::indexOf( const String &s2, unsigned int fromIndex ) const
     4cc:	df 93       	push	r29
     4ce:	cf 93       	push	r28
     4d0:	cd b7       	in	r28, 0x3d	; 61
     4d2:	de b7       	in	r29, 0x3e	; 62
     4d4:	2a 97       	sbiw	r28, 0x0a	; 10
     4d6:	0f b6       	in	r0, 0x3f	; 63
     4d8:	f8 94       	cli
     4da:	de bf       	out	0x3e, r29	; 62
     4dc:	0f be       	out	0x3f, r0	; 63
     4de:	cd bf       	out	0x3d, r28	; 61
     4e0:	9c 83       	std	Y+4, r25	; 0x04
     4e2:	8b 83       	std	Y+3, r24	; 0x03
     4e4:	7e 83       	std	Y+6, r23	; 0x06
     4e6:	6d 83       	std	Y+5, r22	; 0x05
     4e8:	58 87       	std	Y+8, r21	; 0x08
     4ea:	4f 83       	std	Y+7, r20	; 0x07
{
  if ( fromIndex >= _length )
     4ec:	eb 81       	ldd	r30, Y+3	; 0x03
     4ee:	fc 81       	ldd	r31, Y+4	; 0x04
     4f0:	24 81       	ldd	r18, Z+4	; 0x04
     4f2:	35 81       	ldd	r19, Z+5	; 0x05
     4f4:	8f 81       	ldd	r24, Y+7	; 0x07
     4f6:	98 85       	ldd	r25, Y+8	; 0x08
     4f8:	82 17       	cp	r24, r18
     4fa:	93 07       	cpc	r25, r19
     4fc:	00 f0       	brcs	.+0      	; 0x4fe <_ZNK6String7indexOfERKS_j+0x32>
    return -1;
     4fe:	4f ef       	ldi	r20, 0xFF	; 255
     500:	5f ef       	ldi	r21, 0xFF	; 255
     502:	5a 87       	std	Y+10, r21	; 0x0a
     504:	49 87       	std	Y+9, r20	; 0x09
     506:	00 c0       	rjmp	.+0      	; 0x508 <_ZNK6String7indexOfERKS_j+0x3c>

  const char *theFind = strstr( &_buffer[ fromIndex ], s2._buffer );
     508:	eb 81       	ldd	r30, Y+3	; 0x03
     50a:	fc 81       	ldd	r31, Y+4	; 0x04
     50c:	20 81       	ld	r18, Z
     50e:	31 81       	ldd	r19, Z+1	; 0x01
     510:	8f 81       	ldd	r24, Y+7	; 0x07
     512:	98 85       	ldd	r25, Y+8	; 0x08
     514:	82 0f       	add	r24, r18
     516:	93 1f       	adc	r25, r19
     518:	ed 81       	ldd	r30, Y+5	; 0x05
     51a:	fe 81       	ldd	r31, Y+6	; 0x06
     51c:	20 81       	ld	r18, Z
     51e:	31 81       	ldd	r19, Z+1	; 0x01
     520:	b9 01       	movw	r22, r18
     522:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
     526:	9a 83       	std	Y+2, r25	; 0x02
     528:	89 83       	std	Y+1, r24	; 0x01

  if ( theFind == NULL )
     52a:	89 81       	ldd	r24, Y+1	; 0x01
     52c:	9a 81       	ldd	r25, Y+2	; 0x02
     52e:	00 97       	sbiw	r24, 0x00	; 0
     530:	01 f4       	brne	.+0      	; 0x532 <_ZNK6String7indexOfERKS_j+0x66>
    return -1;
     532:	8f ef       	ldi	r24, 0xFF	; 255
     534:	9f ef       	ldi	r25, 0xFF	; 255
     536:	9a 87       	std	Y+10, r25	; 0x0a
     538:	89 87       	std	Y+9, r24	; 0x09
     53a:	00 c0       	rjmp	.+0      	; 0x53c <_ZNK6String7indexOfERKS_j+0x70>

  return theFind - _buffer; // pointer subtraction
     53c:	29 81       	ldd	r18, Y+1	; 0x01
     53e:	3a 81       	ldd	r19, Y+2	; 0x02
     540:	eb 81       	ldd	r30, Y+3	; 0x03
     542:	fc 81       	ldd	r31, Y+4	; 0x04
     544:	80 81       	ld	r24, Z
     546:	91 81       	ldd	r25, Z+1	; 0x01
     548:	a9 01       	movw	r20, r18
     54a:	48 1b       	sub	r20, r24
     54c:	59 0b       	sbc	r21, r25
     54e:	5a 87       	std	Y+10, r21	; 0x0a
     550:	49 87       	std	Y+9, r20	; 0x09
     552:	89 85       	ldd	r24, Y+9	; 0x09
     554:	9a 85       	ldd	r25, Y+10	; 0x0a
}
     556:	2a 96       	adiw	r28, 0x0a	; 10
     558:	0f b6       	in	r0, 0x3f	; 63
     55a:	f8 94       	cli
     55c:	de bf       	out	0x3e, r29	; 62
     55e:	0f be       	out	0x3f, r0	; 63
     560:	cd bf       	out	0x3d, r28	; 61
     562:	cf 91       	pop	r28
     564:	df 91       	pop	r29
     566:	08 95       	ret

00000568 <_ZNK6String7indexOfERKS_>:
    return -1;

  return temp - _buffer;
}

int String::indexOf( const String &s2 ) const
     568:	df 93       	push	r29
     56a:	cf 93       	push	r28
     56c:	00 d0       	rcall	.+0      	; 0x56e <_ZNK6String7indexOfERKS_+0x6>
     56e:	0f 92       	push	r0
     570:	cd b7       	in	r28, 0x3d	; 61
     572:	de b7       	in	r29, 0x3e	; 62
     574:	9a 83       	std	Y+2, r25	; 0x02
     576:	89 83       	std	Y+1, r24	; 0x01
     578:	7c 83       	std	Y+4, r23	; 0x04
     57a:	6b 83       	std	Y+3, r22	; 0x03
{
  return indexOf( s2, 0 );
     57c:	89 81       	ldd	r24, Y+1	; 0x01
     57e:	9a 81       	ldd	r25, Y+2	; 0x02
     580:	2b 81       	ldd	r18, Y+3	; 0x03
     582:	3c 81       	ldd	r19, Y+4	; 0x04
     584:	b9 01       	movw	r22, r18
     586:	40 e0       	ldi	r20, 0x00	; 0
     588:	50 e0       	ldi	r21, 0x00	; 0
     58a:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
}
     58e:	0f 90       	pop	r0
     590:	0f 90       	pop	r0
     592:	0f 90       	pop	r0
     594:	0f 90       	pop	r0
     596:	cf 91       	pop	r28
     598:	df 91       	pop	r29
     59a:	08 95       	ret

0000059c <_ZNK6String7indexOfEcj>:
int String::indexOf( char temp ) const
{
  return indexOf( temp, 0 );
}

int String::indexOf( char ch, unsigned int fromIndex ) const
     59c:	df 93       	push	r29
     59e:	cf 93       	push	r28
     5a0:	cd b7       	in	r28, 0x3d	; 61
     5a2:	de b7       	in	r29, 0x3e	; 62
     5a4:	29 97       	sbiw	r28, 0x09	; 9
     5a6:	0f b6       	in	r0, 0x3f	; 63
     5a8:	f8 94       	cli
     5aa:	de bf       	out	0x3e, r29	; 62
     5ac:	0f be       	out	0x3f, r0	; 63
     5ae:	cd bf       	out	0x3d, r28	; 61
     5b0:	9c 83       	std	Y+4, r25	; 0x04
     5b2:	8b 83       	std	Y+3, r24	; 0x03
     5b4:	6d 83       	std	Y+5, r22	; 0x05
     5b6:	5f 83       	std	Y+7, r21	; 0x07
     5b8:	4e 83       	std	Y+6, r20	; 0x06
{
  if ( fromIndex >= _length )
     5ba:	eb 81       	ldd	r30, Y+3	; 0x03
     5bc:	fc 81       	ldd	r31, Y+4	; 0x04
     5be:	24 81       	ldd	r18, Z+4	; 0x04
     5c0:	35 81       	ldd	r19, Z+5	; 0x05
     5c2:	8e 81       	ldd	r24, Y+6	; 0x06
     5c4:	9f 81       	ldd	r25, Y+7	; 0x07
     5c6:	82 17       	cp	r24, r18
     5c8:	93 07       	cpc	r25, r19
     5ca:	00 f0       	brcs	.+0      	; 0x5cc <_ZNK6String7indexOfEcj+0x30>
    return -1;
     5cc:	4f ef       	ldi	r20, 0xFF	; 255
     5ce:	5f ef       	ldi	r21, 0xFF	; 255
     5d0:	59 87       	std	Y+9, r21	; 0x09
     5d2:	48 87       	std	Y+8, r20	; 0x08
     5d4:	00 c0       	rjmp	.+0      	; 0x5d6 <_ZNK6String7indexOfEcj+0x3a>

  const char* temp = strchr( &_buffer[fromIndex], ch );
     5d6:	eb 81       	ldd	r30, Y+3	; 0x03
     5d8:	fc 81       	ldd	r31, Y+4	; 0x04
     5da:	20 81       	ld	r18, Z
     5dc:	31 81       	ldd	r19, Z+1	; 0x01
     5de:	8e 81       	ldd	r24, Y+6	; 0x06
     5e0:	9f 81       	ldd	r25, Y+7	; 0x07
     5e2:	a9 01       	movw	r20, r18
     5e4:	48 0f       	add	r20, r24
     5e6:	59 1f       	adc	r21, r25
     5e8:	8d 81       	ldd	r24, Y+5	; 0x05
     5ea:	28 2f       	mov	r18, r24
     5ec:	30 e0       	ldi	r19, 0x00	; 0
     5ee:	ca 01       	movw	r24, r20
     5f0:	b9 01       	movw	r22, r18
     5f2:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
     5f6:	9a 83       	std	Y+2, r25	; 0x02
     5f8:	89 83       	std	Y+1, r24	; 0x01
  if ( temp == NULL )
     5fa:	89 81       	ldd	r24, Y+1	; 0x01
     5fc:	9a 81       	ldd	r25, Y+2	; 0x02
     5fe:	00 97       	sbiw	r24, 0x00	; 0
     600:	01 f4       	brne	.+0      	; 0x602 <_ZNK6String7indexOfEcj+0x66>
    return -1;
     602:	8f ef       	ldi	r24, 0xFF	; 255
     604:	9f ef       	ldi	r25, 0xFF	; 255
     606:	99 87       	std	Y+9, r25	; 0x09
     608:	88 87       	std	Y+8, r24	; 0x08
     60a:	00 c0       	rjmp	.+0      	; 0x60c <_ZNK6String7indexOfEcj+0x70>

  return temp - _buffer;
     60c:	29 81       	ldd	r18, Y+1	; 0x01
     60e:	3a 81       	ldd	r19, Y+2	; 0x02
     610:	eb 81       	ldd	r30, Y+3	; 0x03
     612:	fc 81       	ldd	r31, Y+4	; 0x04
     614:	80 81       	ld	r24, Z
     616:	91 81       	ldd	r25, Z+1	; 0x01
     618:	a9 01       	movw	r20, r18
     61a:	48 1b       	sub	r20, r24
     61c:	59 0b       	sbc	r21, r25
     61e:	59 87       	std	Y+9, r21	; 0x09
     620:	48 87       	std	Y+8, r20	; 0x08
     622:	88 85       	ldd	r24, Y+8	; 0x08
     624:	99 85       	ldd	r25, Y+9	; 0x09
}
     626:	29 96       	adiw	r28, 0x09	; 9
     628:	0f b6       	in	r0, 0x3f	; 63
     62a:	f8 94       	cli
     62c:	de bf       	out	0x3e, r29	; 62
     62e:	0f be       	out	0x3f, r0	; 63
     630:	cd bf       	out	0x3d, r28	; 61
     632:	cf 91       	pop	r28
     634:	df 91       	pop	r29
     636:	08 95       	ret

00000638 <_ZNK6String7indexOfEc>:
  }
  newString += temp;  
  return newString;
}

int String::indexOf( char temp ) const
     638:	df 93       	push	r29
     63a:	cf 93       	push	r28
     63c:	00 d0       	rcall	.+0      	; 0x63e <_ZNK6String7indexOfEc+0x6>
     63e:	cd b7       	in	r28, 0x3d	; 61
     640:	de b7       	in	r29, 0x3e	; 62
     642:	9a 83       	std	Y+2, r25	; 0x02
     644:	89 83       	std	Y+1, r24	; 0x01
     646:	6b 83       	std	Y+3, r22	; 0x03
{
  return indexOf( temp, 0 );
     648:	89 81       	ldd	r24, Y+1	; 0x01
     64a:	9a 81       	ldd	r25, Y+2	; 0x02
     64c:	6b 81       	ldd	r22, Y+3	; 0x03
     64e:	40 e0       	ldi	r20, 0x00	; 0
     650:	50 e0       	ldi	r21, 0x00	; 0
     652:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
}
     656:	0f 90       	pop	r0
     658:	0f 90       	pop	r0
     65a:	0f 90       	pop	r0
     65c:	cf 91       	pop	r28
     65e:	df 91       	pop	r29
     660:	08 95       	ret

00000662 <_ZNK6String6equalsERKS_>:
    return 0;

  return strcmp( &_buffer[ _length - s2._length], s2._buffer ) == 0;
}

boolean String::equals( const String &s2 ) const
     662:	df 93       	push	r29
     664:	cf 93       	push	r28
     666:	00 d0       	rcall	.+0      	; 0x668 <_ZNK6String6equalsERKS_+0x6>
     668:	0f 92       	push	r0
     66a:	0f 92       	push	r0
     66c:	cd b7       	in	r28, 0x3d	; 61
     66e:	de b7       	in	r29, 0x3e	; 62
     670:	9a 83       	std	Y+2, r25	; 0x02
     672:	89 83       	std	Y+1, r24	; 0x01
     674:	7c 83       	std	Y+4, r23	; 0x04
     676:	6b 83       	std	Y+3, r22	; 0x03
{
  return ( _length == s2._length && strcmp( _buffer,s2._buffer ) == 0 );
     678:	e9 81       	ldd	r30, Y+1	; 0x01
     67a:	fa 81       	ldd	r31, Y+2	; 0x02
     67c:	24 81       	ldd	r18, Z+4	; 0x04
     67e:	35 81       	ldd	r19, Z+5	; 0x05
     680:	eb 81       	ldd	r30, Y+3	; 0x03
     682:	fc 81       	ldd	r31, Y+4	; 0x04
     684:	84 81       	ldd	r24, Z+4	; 0x04
     686:	95 81       	ldd	r25, Z+5	; 0x05
     688:	28 17       	cp	r18, r24
     68a:	39 07       	cpc	r19, r25
     68c:	01 f4       	brne	.+0      	; 0x68e <_ZNK6String6equalsERKS_+0x2c>
     68e:	e9 81       	ldd	r30, Y+1	; 0x01
     690:	fa 81       	ldd	r31, Y+2	; 0x02
     692:	80 81       	ld	r24, Z
     694:	91 81       	ldd	r25, Z+1	; 0x01
     696:	eb 81       	ldd	r30, Y+3	; 0x03
     698:	fc 81       	ldd	r31, Y+4	; 0x04
     69a:	20 81       	ld	r18, Z
     69c:	31 81       	ldd	r19, Z+1	; 0x01
     69e:	b9 01       	movw	r22, r18
     6a0:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
     6a4:	00 97       	sbiw	r24, 0x00	; 0
     6a6:	01 f4       	brne	.+0      	; 0x6a8 <_ZNK6String6equalsERKS_+0x46>
     6a8:	81 e0       	ldi	r24, 0x01	; 1
     6aa:	8d 83       	std	Y+5, r24	; 0x05
     6ac:	00 c0       	rjmp	.+0      	; 0x6ae <_ZNK6String6equalsERKS_+0x4c>
     6ae:	1d 82       	std	Y+5, r1	; 0x05
     6b0:	8d 81       	ldd	r24, Y+5	; 0x05
}
     6b2:	0f 90       	pop	r0
     6b4:	0f 90       	pop	r0
     6b6:	0f 90       	pop	r0
     6b8:	0f 90       	pop	r0
     6ba:	0f 90       	pop	r0
     6bc:	cf 91       	pop	r28
     6be:	df 91       	pop	r29
     6c0:	08 95       	ret

000006c2 <_ZNK6String8endsWithERKS_>:
{
  // need to check for valid index, to do later
  return _buffer[ index ];
}

boolean String::endsWith( const String &s2 ) const
     6c2:	df 93       	push	r29
     6c4:	cf 93       	push	r28
     6c6:	00 d0       	rcall	.+0      	; 0x6c8 <_ZNK6String8endsWithERKS_+0x6>
     6c8:	0f 92       	push	r0
     6ca:	0f 92       	push	r0
     6cc:	cd b7       	in	r28, 0x3d	; 61
     6ce:	de b7       	in	r29, 0x3e	; 62
     6d0:	9a 83       	std	Y+2, r25	; 0x02
     6d2:	89 83       	std	Y+1, r24	; 0x01
     6d4:	7c 83       	std	Y+4, r23	; 0x04
     6d6:	6b 83       	std	Y+3, r22	; 0x03
{
  if ( _length < s2._length )
     6d8:	e9 81       	ldd	r30, Y+1	; 0x01
     6da:	fa 81       	ldd	r31, Y+2	; 0x02
     6dc:	24 81       	ldd	r18, Z+4	; 0x04
     6de:	35 81       	ldd	r19, Z+5	; 0x05
     6e0:	eb 81       	ldd	r30, Y+3	; 0x03
     6e2:	fc 81       	ldd	r31, Y+4	; 0x04
     6e4:	84 81       	ldd	r24, Z+4	; 0x04
     6e6:	95 81       	ldd	r25, Z+5	; 0x05
     6e8:	28 17       	cp	r18, r24
     6ea:	39 07       	cpc	r19, r25
     6ec:	00 f4       	brcc	.+0      	; 0x6ee <_ZNK6String8endsWithERKS_+0x2c>
    return 0;
     6ee:	1d 82       	std	Y+5, r1	; 0x05
     6f0:	00 c0       	rjmp	.+0      	; 0x6f2 <_ZNK6String8endsWithERKS_+0x30>

  return strcmp( &_buffer[ _length - s2._length], s2._buffer ) == 0;
     6f2:	e9 81       	ldd	r30, Y+1	; 0x01
     6f4:	fa 81       	ldd	r31, Y+2	; 0x02
     6f6:	40 81       	ld	r20, Z
     6f8:	51 81       	ldd	r21, Z+1	; 0x01
     6fa:	e9 81       	ldd	r30, Y+1	; 0x01
     6fc:	fa 81       	ldd	r31, Y+2	; 0x02
     6fe:	24 81       	ldd	r18, Z+4	; 0x04
     700:	35 81       	ldd	r19, Z+5	; 0x05
     702:	eb 81       	ldd	r30, Y+3	; 0x03
     704:	fc 81       	ldd	r31, Y+4	; 0x04
     706:	84 81       	ldd	r24, Z+4	; 0x04
     708:	95 81       	ldd	r25, Z+5	; 0x05
     70a:	b9 01       	movw	r22, r18
     70c:	68 1b       	sub	r22, r24
     70e:	79 0b       	sbc	r23, r25
     710:	cb 01       	movw	r24, r22
     712:	84 0f       	add	r24, r20
     714:	95 1f       	adc	r25, r21
     716:	eb 81       	ldd	r30, Y+3	; 0x03
     718:	fc 81       	ldd	r31, Y+4	; 0x04
     71a:	20 81       	ld	r18, Z
     71c:	31 81       	ldd	r19, Z+1	; 0x01
     71e:	b9 01       	movw	r22, r18
     720:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
     724:	1d 82       	std	Y+5, r1	; 0x05
     726:	00 97       	sbiw	r24, 0x00	; 0
     728:	01 f4       	brne	.+0      	; 0x72a <_ZNK6String8endsWithERKS_+0x68>
     72a:	71 e0       	ldi	r23, 0x01	; 1
     72c:	7d 83       	std	Y+5, r23	; 0x05
     72e:	8d 81       	ldd	r24, Y+5	; 0x05
}
     730:	0f 90       	pop	r0
     732:	0f 90       	pop	r0
     734:	0f 90       	pop	r0
     736:	0f 90       	pop	r0
     738:	0f 90       	pop	r0
     73a:	cf 91       	pop	r28
     73c:	df 91       	pop	r29
     73e:	08 95       	ret

00000740 <_ZNK6StringgeERKS_>:
int String::operator<=( const String &rhs ) const
{
  return strcmp( _buffer, rhs._buffer ) <= 0;
}

int String::operator>=( const String & rhs ) const
     740:	df 93       	push	r29
     742:	cf 93       	push	r28
     744:	00 d0       	rcall	.+0      	; 0x746 <_ZNK6StringgeERKS_+0x6>
     746:	00 d0       	rcall	.+0      	; 0x748 <_ZNK6StringgeERKS_+0x8>
     748:	cd b7       	in	r28, 0x3d	; 61
     74a:	de b7       	in	r29, 0x3e	; 62
     74c:	9a 83       	std	Y+2, r25	; 0x02
     74e:	89 83       	std	Y+1, r24	; 0x01
     750:	7c 83       	std	Y+4, r23	; 0x04
     752:	6b 83       	std	Y+3, r22	; 0x03
{
  return strcmp( _buffer, rhs._buffer ) >= 0;
     754:	e9 81       	ldd	r30, Y+1	; 0x01
     756:	fa 81       	ldd	r31, Y+2	; 0x02
     758:	80 81       	ld	r24, Z
     75a:	91 81       	ldd	r25, Z+1	; 0x01
     75c:	eb 81       	ldd	r30, Y+3	; 0x03
     75e:	fc 81       	ldd	r31, Y+4	; 0x04
     760:	20 81       	ld	r18, Z
     762:	31 81       	ldd	r19, Z+1	; 0x01
     764:	b9 01       	movw	r22, r18
     766:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
     76a:	1e 82       	std	Y+6, r1	; 0x06
     76c:	1d 82       	std	Y+5, r1	; 0x05
     76e:	99 23       	and	r25, r25
     770:	04 f0       	brlt	.+0      	; 0x772 <_ZNK6StringgeERKS_+0x32>
     772:	81 e0       	ldi	r24, 0x01	; 1
     774:	90 e0       	ldi	r25, 0x00	; 0
     776:	9e 83       	std	Y+6, r25	; 0x06
     778:	8d 83       	std	Y+5, r24	; 0x05
     77a:	8d 81       	ldd	r24, Y+5	; 0x05
     77c:	9e 81       	ldd	r25, Y+6	; 0x06
}
     77e:	26 96       	adiw	r28, 0x06	; 6
     780:	0f b6       	in	r0, 0x3f	; 63
     782:	f8 94       	cli
     784:	de bf       	out	0x3e, r29	; 62
     786:	0f be       	out	0x3f, r0	; 63
     788:	cd bf       	out	0x3d, r28	; 61
     78a:	cf 91       	pop	r28
     78c:	df 91       	pop	r29
     78e:	08 95       	ret

00000790 <_ZNK6StringleERKS_>:
int String::operator>( const String &rhs ) const
{
  return strcmp( _buffer, rhs._buffer ) > 0;
}

int String::operator<=( const String &rhs ) const
     790:	df 93       	push	r29
     792:	cf 93       	push	r28
     794:	00 d0       	rcall	.+0      	; 0x796 <_ZNK6StringleERKS_+0x6>
     796:	00 d0       	rcall	.+0      	; 0x798 <_ZNK6StringleERKS_+0x8>
     798:	cd b7       	in	r28, 0x3d	; 61
     79a:	de b7       	in	r29, 0x3e	; 62
     79c:	9a 83       	std	Y+2, r25	; 0x02
     79e:	89 83       	std	Y+1, r24	; 0x01
     7a0:	7c 83       	std	Y+4, r23	; 0x04
     7a2:	6b 83       	std	Y+3, r22	; 0x03
{
  return strcmp( _buffer, rhs._buffer ) <= 0;
     7a4:	e9 81       	ldd	r30, Y+1	; 0x01
     7a6:	fa 81       	ldd	r31, Y+2	; 0x02
     7a8:	80 81       	ld	r24, Z
     7aa:	91 81       	ldd	r25, Z+1	; 0x01
     7ac:	eb 81       	ldd	r30, Y+3	; 0x03
     7ae:	fc 81       	ldd	r31, Y+4	; 0x04
     7b0:	20 81       	ld	r18, Z
     7b2:	31 81       	ldd	r19, Z+1	; 0x01
     7b4:	b9 01       	movw	r22, r18
     7b6:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
     7ba:	1e 82       	std	Y+6, r1	; 0x06
     7bc:	1d 82       	std	Y+5, r1	; 0x05
     7be:	18 16       	cp	r1, r24
     7c0:	19 06       	cpc	r1, r25
     7c2:	04 f0       	brlt	.+0      	; 0x7c4 <_ZNK6StringleERKS_+0x34>
     7c4:	81 e0       	ldi	r24, 0x01	; 1
     7c6:	90 e0       	ldi	r25, 0x00	; 0
     7c8:	9e 83       	std	Y+6, r25	; 0x06
     7ca:	8d 83       	std	Y+5, r24	; 0x05
     7cc:	8d 81       	ldd	r24, Y+5	; 0x05
     7ce:	9e 81       	ldd	r25, Y+6	; 0x06
}
     7d0:	26 96       	adiw	r28, 0x06	; 6
     7d2:	0f b6       	in	r0, 0x3f	; 63
     7d4:	f8 94       	cli
     7d6:	de bf       	out	0x3e, r29	; 62
     7d8:	0f be       	out	0x3f, r0	; 63
     7da:	cd bf       	out	0x3d, r28	; 61
     7dc:	cf 91       	pop	r28
     7de:	df 91       	pop	r29
     7e0:	08 95       	ret

000007e2 <_ZNK6StringgtERKS_>:
int String::operator<( const String &rhs ) const
{
  return strcmp( _buffer, rhs._buffer ) < 0;
}

int String::operator>( const String &rhs ) const
     7e2:	df 93       	push	r29
     7e4:	cf 93       	push	r28
     7e6:	00 d0       	rcall	.+0      	; 0x7e8 <_ZNK6StringgtERKS_+0x6>
     7e8:	00 d0       	rcall	.+0      	; 0x7ea <_ZNK6StringgtERKS_+0x8>
     7ea:	cd b7       	in	r28, 0x3d	; 61
     7ec:	de b7       	in	r29, 0x3e	; 62
     7ee:	9a 83       	std	Y+2, r25	; 0x02
     7f0:	89 83       	std	Y+1, r24	; 0x01
     7f2:	7c 83       	std	Y+4, r23	; 0x04
     7f4:	6b 83       	std	Y+3, r22	; 0x03
{
  return strcmp( _buffer, rhs._buffer ) > 0;
     7f6:	e9 81       	ldd	r30, Y+1	; 0x01
     7f8:	fa 81       	ldd	r31, Y+2	; 0x02
     7fa:	80 81       	ld	r24, Z
     7fc:	91 81       	ldd	r25, Z+1	; 0x01
     7fe:	eb 81       	ldd	r30, Y+3	; 0x03
     800:	fc 81       	ldd	r31, Y+4	; 0x04
     802:	20 81       	ld	r18, Z
     804:	31 81       	ldd	r19, Z+1	; 0x01
     806:	b9 01       	movw	r22, r18
     808:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
     80c:	1e 82       	std	Y+6, r1	; 0x06
     80e:	1d 82       	std	Y+5, r1	; 0x05
     810:	18 16       	cp	r1, r24
     812:	19 06       	cpc	r1, r25
     814:	04 f4       	brge	.+0      	; 0x816 <_ZNK6StringgtERKS_+0x34>
     816:	81 e0       	ldi	r24, 0x01	; 1
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	9e 83       	std	Y+6, r25	; 0x06
     81c:	8d 83       	std	Y+5, r24	; 0x05
     81e:	8d 81       	ldd	r24, Y+5	; 0x05
     820:	9e 81       	ldd	r25, Y+6	; 0x06
}
     822:	26 96       	adiw	r28, 0x06	; 6
     824:	0f b6       	in	r0, 0x3f	; 63
     826:	f8 94       	cli
     828:	de bf       	out	0x3e, r29	; 62
     82a:	0f be       	out	0x3f, r0	; 63
     82c:	cd bf       	out	0x3d, r28	; 61
     82e:	cf 91       	pop	r28
     830:	df 91       	pop	r29
     832:	08 95       	ret

00000834 <_ZNK6StringltERKS_>:
int String::operator!=( const String &rhs ) const
{
  return ( _length != rhs.length() || strcmp( _buffer, rhs._buffer ) != 0 );
}

int String::operator<( const String &rhs ) const
     834:	df 93       	push	r29
     836:	cf 93       	push	r28
     838:	00 d0       	rcall	.+0      	; 0x83a <_ZNK6StringltERKS_+0x6>
     83a:	00 d0       	rcall	.+0      	; 0x83c <_ZNK6StringltERKS_+0x8>
     83c:	cd b7       	in	r28, 0x3d	; 61
     83e:	de b7       	in	r29, 0x3e	; 62
     840:	9a 83       	std	Y+2, r25	; 0x02
     842:	89 83       	std	Y+1, r24	; 0x01
     844:	7c 83       	std	Y+4, r23	; 0x04
     846:	6b 83       	std	Y+3, r22	; 0x03
{
  return strcmp( _buffer, rhs._buffer ) < 0;
     848:	e9 81       	ldd	r30, Y+1	; 0x01
     84a:	fa 81       	ldd	r31, Y+2	; 0x02
     84c:	80 81       	ld	r24, Z
     84e:	91 81       	ldd	r25, Z+1	; 0x01
     850:	eb 81       	ldd	r30, Y+3	; 0x03
     852:	fc 81       	ldd	r31, Y+4	; 0x04
     854:	20 81       	ld	r18, Z
     856:	31 81       	ldd	r19, Z+1	; 0x01
     858:	b9 01       	movw	r22, r18
     85a:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
     85e:	1e 82       	std	Y+6, r1	; 0x06
     860:	1d 82       	std	Y+5, r1	; 0x05
     862:	99 23       	and	r25, r25
     864:	04 f4       	brge	.+0      	; 0x866 <_ZNK6StringltERKS_+0x32>
     866:	81 e0       	ldi	r24, 0x01	; 1
     868:	90 e0       	ldi	r25, 0x00	; 0
     86a:	9e 83       	std	Y+6, r25	; 0x06
     86c:	8d 83       	std	Y+5, r24	; 0x05
     86e:	8d 81       	ldd	r24, Y+5	; 0x05
     870:	9e 81       	ldd	r25, Y+6	; 0x06
}
     872:	26 96       	adiw	r28, 0x06	; 6
     874:	0f b6       	in	r0, 0x3f	; 63
     876:	f8 94       	cli
     878:	de bf       	out	0x3e, r29	; 62
     87a:	0f be       	out	0x3f, r0	; 63
     87c:	cd bf       	out	0x3d, r28	; 61
     87e:	cf 91       	pop	r28
     880:	df 91       	pop	r29
     882:	08 95       	ret

00000884 <_ZNK6StringneERKS_>:
int String::operator==( const String &rhs ) const
{
  return ( _length == rhs._length && strcmp( _buffer, rhs._buffer ) == 0 );
}

int String::operator!=( const String &rhs ) const
     884:	0f 93       	push	r16
     886:	1f 93       	push	r17
     888:	df 93       	push	r29
     88a:	cf 93       	push	r28
     88c:	00 d0       	rcall	.+0      	; 0x88e <_ZNK6StringneERKS_+0xa>
     88e:	0f 92       	push	r0
     890:	0f 92       	push	r0
     892:	cd b7       	in	r28, 0x3d	; 61
     894:	de b7       	in	r29, 0x3e	; 62
     896:	9a 83       	std	Y+2, r25	; 0x02
     898:	89 83       	std	Y+1, r24	; 0x01
     89a:	7c 83       	std	Y+4, r23	; 0x04
     89c:	6b 83       	std	Y+3, r22	; 0x03
{
  return ( _length != rhs.length() || strcmp( _buffer, rhs._buffer ) != 0 );
     89e:	e9 81       	ldd	r30, Y+1	; 0x01
     8a0:	fa 81       	ldd	r31, Y+2	; 0x02
     8a2:	04 81       	ldd	r16, Z+4	; 0x04
     8a4:	15 81       	ldd	r17, Z+5	; 0x05
     8a6:	8b 81       	ldd	r24, Y+3	; 0x03
     8a8:	9c 81       	ldd	r25, Y+4	; 0x04
     8aa:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
     8ae:	08 17       	cp	r16, r24
     8b0:	19 07       	cpc	r17, r25
     8b2:	01 f4       	brne	.+0      	; 0x8b4 <_ZNK6StringneERKS_+0x30>
     8b4:	e9 81       	ldd	r30, Y+1	; 0x01
     8b6:	fa 81       	ldd	r31, Y+2	; 0x02
     8b8:	80 81       	ld	r24, Z
     8ba:	91 81       	ldd	r25, Z+1	; 0x01
     8bc:	eb 81       	ldd	r30, Y+3	; 0x03
     8be:	fc 81       	ldd	r31, Y+4	; 0x04
     8c0:	20 81       	ld	r18, Z
     8c2:	31 81       	ldd	r19, Z+1	; 0x01
     8c4:	b9 01       	movw	r22, r18
     8c6:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
     8ca:	00 97       	sbiw	r24, 0x00	; 0
     8cc:	01 f0       	breq	.+0      	; 0x8ce <_ZNK6StringneERKS_+0x4a>
     8ce:	21 e0       	ldi	r18, 0x01	; 1
     8d0:	2d 83       	std	Y+5, r18	; 0x05
     8d2:	00 c0       	rjmp	.+0      	; 0x8d4 <_ZNK6StringneERKS_+0x50>
     8d4:	1d 82       	std	Y+5, r1	; 0x05
     8d6:	2d 81       	ldd	r18, Y+5	; 0x05
     8d8:	82 2f       	mov	r24, r18
     8da:	90 e0       	ldi	r25, 0x00	; 0
}
     8dc:	0f 90       	pop	r0
     8de:	0f 90       	pop	r0
     8e0:	0f 90       	pop	r0
     8e2:	0f 90       	pop	r0
     8e4:	0f 90       	pop	r0
     8e6:	cf 91       	pop	r28
     8e8:	df 91       	pop	r29
     8ea:	1f 91       	pop	r17
     8ec:	0f 91       	pop	r16
     8ee:	08 95       	ret

000008f0 <_ZNK6StringeqERKS_>:
  strcat( _buffer, other._buffer );
  return *this;
}


int String::operator==( const String &rhs ) const
     8f0:	df 93       	push	r29
     8f2:	cf 93       	push	r28
     8f4:	00 d0       	rcall	.+0      	; 0x8f6 <_ZNK6StringeqERKS_+0x6>
     8f6:	0f 92       	push	r0
     8f8:	0f 92       	push	r0
     8fa:	cd b7       	in	r28, 0x3d	; 61
     8fc:	de b7       	in	r29, 0x3e	; 62
     8fe:	9a 83       	std	Y+2, r25	; 0x02
     900:	89 83       	std	Y+1, r24	; 0x01
     902:	7c 83       	std	Y+4, r23	; 0x04
     904:	6b 83       	std	Y+3, r22	; 0x03
{
  return ( _length == rhs._length && strcmp( _buffer, rhs._buffer ) == 0 );
     906:	e9 81       	ldd	r30, Y+1	; 0x01
     908:	fa 81       	ldd	r31, Y+2	; 0x02
     90a:	24 81       	ldd	r18, Z+4	; 0x04
     90c:	35 81       	ldd	r19, Z+5	; 0x05
     90e:	eb 81       	ldd	r30, Y+3	; 0x03
     910:	fc 81       	ldd	r31, Y+4	; 0x04
     912:	84 81       	ldd	r24, Z+4	; 0x04
     914:	95 81       	ldd	r25, Z+5	; 0x05
     916:	28 17       	cp	r18, r24
     918:	39 07       	cpc	r19, r25
     91a:	01 f4       	brne	.+0      	; 0x91c <_ZNK6StringeqERKS_+0x2c>
     91c:	e9 81       	ldd	r30, Y+1	; 0x01
     91e:	fa 81       	ldd	r31, Y+2	; 0x02
     920:	80 81       	ld	r24, Z
     922:	91 81       	ldd	r25, Z+1	; 0x01
     924:	eb 81       	ldd	r30, Y+3	; 0x03
     926:	fc 81       	ldd	r31, Y+4	; 0x04
     928:	20 81       	ld	r18, Z
     92a:	31 81       	ldd	r19, Z+1	; 0x01
     92c:	b9 01       	movw	r22, r18
     92e:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
     932:	00 97       	sbiw	r24, 0x00	; 0
     934:	01 f4       	brne	.+0      	; 0x936 <_ZNK6StringeqERKS_+0x46>
     936:	21 e0       	ldi	r18, 0x01	; 1
     938:	2d 83       	std	Y+5, r18	; 0x05
     93a:	00 c0       	rjmp	.+0      	; 0x93c <_ZNK6StringeqERKS_+0x4c>
     93c:	1d 82       	std	Y+5, r1	; 0x05
     93e:	2d 81       	ldd	r18, Y+5	; 0x05
     940:	82 2f       	mov	r24, r18
     942:	90 e0       	ldi	r25, 0x00	; 0
}
     944:	0f 90       	pop	r0
     946:	0f 90       	pop	r0
     948:	0f 90       	pop	r0
     94a:	0f 90       	pop	r0
     94c:	0f 90       	pop	r0
     94e:	cf 91       	pop	r28
     950:	df 91       	pop	r29
     952:	08 95       	ret

00000954 <_ZNK6String9compareToERKS_>:
  if(_length > loc) {
    _buffer[loc] = aChar;
  }
}

int String::compareTo( const String &s2 ) const
     954:	df 93       	push	r29
     956:	cf 93       	push	r28
     958:	00 d0       	rcall	.+0      	; 0x95a <_ZNK6String9compareToERKS_+0x6>
     95a:	0f 92       	push	r0
     95c:	cd b7       	in	r28, 0x3d	; 61
     95e:	de b7       	in	r29, 0x3e	; 62
     960:	9a 83       	std	Y+2, r25	; 0x02
     962:	89 83       	std	Y+1, r24	; 0x01
     964:	7c 83       	std	Y+4, r23	; 0x04
     966:	6b 83       	std	Y+3, r22	; 0x03
{
  return strcmp( _buffer, s2._buffer );
     968:	e9 81       	ldd	r30, Y+1	; 0x01
     96a:	fa 81       	ldd	r31, Y+2	; 0x02
     96c:	80 81       	ld	r24, Z
     96e:	91 81       	ldd	r25, Z+1	; 0x01
     970:	eb 81       	ldd	r30, Y+3	; 0x03
     972:	fc 81       	ldd	r31, Y+4	; 0x04
     974:	20 81       	ld	r18, Z
     976:	31 81       	ldd	r19, Z+1	; 0x01
     978:	b9 01       	movw	r22, r18
     97a:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
}
     97e:	0f 90       	pop	r0
     980:	0f 90       	pop	r0
     982:	0f 90       	pop	r0
     984:	0f 90       	pop	r0
     986:	cf 91       	pop	r28
     988:	df 91       	pop	r29
     98a:	08 95       	ret

0000098c <_ZN6StringpLERKS_>:
//  _buffer[ _length++ ] = aChar;
//  _buffer[ _length ] = '\0';
//  return *this;
//}

const String & String::operator+=( const String &other )
     98c:	df 93       	push	r29
     98e:	cf 93       	push	r28
     990:	cd b7       	in	r28, 0x3d	; 61
     992:	de b7       	in	r29, 0x3e	; 62
     994:	28 97       	sbiw	r28, 0x08	; 8
     996:	0f b6       	in	r0, 0x3f	; 63
     998:	f8 94       	cli
     99a:	de bf       	out	0x3e, r29	; 62
     99c:	0f be       	out	0x3f, r0	; 63
     99e:	cd bf       	out	0x3d, r28	; 61
     9a0:	9c 83       	std	Y+4, r25	; 0x04
     9a2:	8b 83       	std	Y+3, r24	; 0x03
     9a4:	7e 83       	std	Y+6, r23	; 0x06
     9a6:	6d 83       	std	Y+5, r22	; 0x05
{
  _length += other._length;
     9a8:	eb 81       	ldd	r30, Y+3	; 0x03
     9aa:	fc 81       	ldd	r31, Y+4	; 0x04
     9ac:	24 81       	ldd	r18, Z+4	; 0x04
     9ae:	35 81       	ldd	r19, Z+5	; 0x05
     9b0:	ed 81       	ldd	r30, Y+5	; 0x05
     9b2:	fe 81       	ldd	r31, Y+6	; 0x06
     9b4:	84 81       	ldd	r24, Z+4	; 0x04
     9b6:	95 81       	ldd	r25, Z+5	; 0x05
     9b8:	82 0f       	add	r24, r18
     9ba:	93 1f       	adc	r25, r19
     9bc:	eb 81       	ldd	r30, Y+3	; 0x03
     9be:	fc 81       	ldd	r31, Y+4	; 0x04
     9c0:	95 83       	std	Z+5, r25	; 0x05
     9c2:	84 83       	std	Z+4, r24	; 0x04
  if ( _length > _capacity )
     9c4:	eb 81       	ldd	r30, Y+3	; 0x03
     9c6:	fc 81       	ldd	r31, Y+4	; 0x04
     9c8:	24 81       	ldd	r18, Z+4	; 0x04
     9ca:	35 81       	ldd	r19, Z+5	; 0x05
     9cc:	eb 81       	ldd	r30, Y+3	; 0x03
     9ce:	fc 81       	ldd	r31, Y+4	; 0x04
     9d0:	82 81       	ldd	r24, Z+2	; 0x02
     9d2:	93 81       	ldd	r25, Z+3	; 0x03
     9d4:	82 17       	cp	r24, r18
     9d6:	93 07       	cpc	r25, r19
     9d8:	00 f4       	brcc	.+0      	; 0x9da <_ZN6StringpLERKS_+0x4e>
  {
    char *temp = (char *)realloc(_buffer, _length + 1);
     9da:	eb 81       	ldd	r30, Y+3	; 0x03
     9dc:	fc 81       	ldd	r31, Y+4	; 0x04
     9de:	40 81       	ld	r20, Z
     9e0:	51 81       	ldd	r21, Z+1	; 0x01
     9e2:	eb 81       	ldd	r30, Y+3	; 0x03
     9e4:	fc 81       	ldd	r31, Y+4	; 0x04
     9e6:	84 81       	ldd	r24, Z+4	; 0x04
     9e8:	95 81       	ldd	r25, Z+5	; 0x05
     9ea:	9c 01       	movw	r18, r24
     9ec:	2f 5f       	subi	r18, 0xFF	; 255
     9ee:	3f 4f       	sbci	r19, 0xFF	; 255
     9f0:	ca 01       	movw	r24, r20
     9f2:	b9 01       	movw	r22, r18
     9f4:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
     9f8:	9a 83       	std	Y+2, r25	; 0x02
     9fa:	89 83       	std	Y+1, r24	; 0x01
    if ( temp != NULL ) {
     9fc:	89 81       	ldd	r24, Y+1	; 0x01
     9fe:	9a 81       	ldd	r25, Y+2	; 0x02
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	01 f0       	breq	.+0      	; 0xa04 <_ZN6StringpLERKS_+0x78>
      _buffer = temp;
     a04:	eb 81       	ldd	r30, Y+3	; 0x03
     a06:	fc 81       	ldd	r31, Y+4	; 0x04
     a08:	89 81       	ldd	r24, Y+1	; 0x01
     a0a:	9a 81       	ldd	r25, Y+2	; 0x02
     a0c:	91 83       	std	Z+1, r25	; 0x01
     a0e:	80 83       	st	Z, r24
      _capacity = _length;
     a10:	eb 81       	ldd	r30, Y+3	; 0x03
     a12:	fc 81       	ldd	r31, Y+4	; 0x04
     a14:	84 81       	ldd	r24, Z+4	; 0x04
     a16:	95 81       	ldd	r25, Z+5	; 0x05
     a18:	eb 81       	ldd	r30, Y+3	; 0x03
     a1a:	fc 81       	ldd	r31, Y+4	; 0x04
     a1c:	93 83       	std	Z+3, r25	; 0x03
     a1e:	82 83       	std	Z+2, r24	; 0x02
     a20:	00 c0       	rjmp	.+0      	; 0xa22 <_ZN6StringpLERKS_+0x96>
    } else {
      _length -= other._length;
     a22:	eb 81       	ldd	r30, Y+3	; 0x03
     a24:	fc 81       	ldd	r31, Y+4	; 0x04
     a26:	24 81       	ldd	r18, Z+4	; 0x04
     a28:	35 81       	ldd	r19, Z+5	; 0x05
     a2a:	ed 81       	ldd	r30, Y+5	; 0x05
     a2c:	fe 81       	ldd	r31, Y+6	; 0x06
     a2e:	84 81       	ldd	r24, Z+4	; 0x04
     a30:	95 81       	ldd	r25, Z+5	; 0x05
     a32:	a9 01       	movw	r20, r18
     a34:	48 1b       	sub	r20, r24
     a36:	59 0b       	sbc	r21, r25
     a38:	ca 01       	movw	r24, r20
     a3a:	eb 81       	ldd	r30, Y+3	; 0x03
     a3c:	fc 81       	ldd	r31, Y+4	; 0x04
     a3e:	95 83       	std	Z+5, r25	; 0x05
     a40:	84 83       	std	Z+4, r24	; 0x04
      return *this;
     a42:	8b 81       	ldd	r24, Y+3	; 0x03
     a44:	9c 81       	ldd	r25, Y+4	; 0x04
     a46:	98 87       	std	Y+8, r25	; 0x08
     a48:	8f 83       	std	Y+7, r24	; 0x07
     a4a:	00 c0       	rjmp	.+0      	; 0xa4c <_ZN6StringpLERKS_+0xc0>
    }
  }
  strcat( _buffer, other._buffer );
     a4c:	eb 81       	ldd	r30, Y+3	; 0x03
     a4e:	fc 81       	ldd	r31, Y+4	; 0x04
     a50:	80 81       	ld	r24, Z
     a52:	91 81       	ldd	r25, Z+1	; 0x01
     a54:	ed 81       	ldd	r30, Y+5	; 0x05
     a56:	fe 81       	ldd	r31, Y+6	; 0x06
     a58:	20 81       	ld	r18, Z
     a5a:	31 81       	ldd	r19, Z+1	; 0x01
     a5c:	b9 01       	movw	r22, r18
     a5e:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
  return *this;
     a62:	4b 81       	ldd	r20, Y+3	; 0x03
     a64:	5c 81       	ldd	r21, Y+4	; 0x04
     a66:	58 87       	std	Y+8, r21	; 0x08
     a68:	4f 83       	std	Y+7, r20	; 0x07
     a6a:	8f 81       	ldd	r24, Y+7	; 0x07
     a6c:	98 85       	ldd	r25, Y+8	; 0x08
}
     a6e:	28 96       	adiw	r28, 0x08	; 8
     a70:	0f b6       	in	r0, 0x3f	; 63
     a72:	f8 94       	cli
     a74:	de bf       	out	0x3e, r29	; 62
     a76:	0f be       	out	0x3f, r0	; 63
     a78:	cd bf       	out	0x3d, r28	; 61
     a7a:	cf 91       	pop	r28
     a7c:	df 91       	pop	r29
     a7e:	08 95       	ret

00000a80 <_ZN6String6concatERKS_>:
int String::compareTo( const String &s2 ) const
{
  return strcmp( _buffer, s2._buffer );
}

const String & String::concat( const String &s2 )
     a80:	df 93       	push	r29
     a82:	cf 93       	push	r28
     a84:	00 d0       	rcall	.+0      	; 0xa86 <_ZN6String6concatERKS_+0x6>
     a86:	0f 92       	push	r0
     a88:	cd b7       	in	r28, 0x3d	; 61
     a8a:	de b7       	in	r29, 0x3e	; 62
     a8c:	9a 83       	std	Y+2, r25	; 0x02
     a8e:	89 83       	std	Y+1, r24	; 0x01
     a90:	7c 83       	std	Y+4, r23	; 0x04
     a92:	6b 83       	std	Y+3, r22	; 0x03
{
  return (*this) += s2;
     a94:	89 81       	ldd	r24, Y+1	; 0x01
     a96:	9a 81       	ldd	r25, Y+2	; 0x02
     a98:	2b 81       	ldd	r18, Y+3	; 0x03
     a9a:	3c 81       	ldd	r19, Y+4	; 0x04
     a9c:	b9 01       	movw	r22, r18
     a9e:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
}
     aa2:	0f 90       	pop	r0
     aa4:	0f 90       	pop	r0
     aa6:	0f 90       	pop	r0
     aa8:	0f 90       	pop	r0
     aaa:	cf 91       	pop	r28
     aac:	df 91       	pop	r29
     aae:	08 95       	ret

00000ab0 <_ZN6String9getBufferEj>:
  private:

};

// allocate buffer space
inline void String::getBuffer(unsigned int maxStrLen)
     ab0:	df 93       	push	r29
     ab2:	cf 93       	push	r28
     ab4:	00 d0       	rcall	.+0      	; 0xab6 <_ZN6String9getBufferEj+0x6>
     ab6:	0f 92       	push	r0
     ab8:	cd b7       	in	r28, 0x3d	; 61
     aba:	de b7       	in	r29, 0x3e	; 62
     abc:	9a 83       	std	Y+2, r25	; 0x02
     abe:	89 83       	std	Y+1, r24	; 0x01
     ac0:	7c 83       	std	Y+4, r23	; 0x04
     ac2:	6b 83       	std	Y+3, r22	; 0x03
{
  _capacity = maxStrLen;
     ac4:	e9 81       	ldd	r30, Y+1	; 0x01
     ac6:	fa 81       	ldd	r31, Y+2	; 0x02
     ac8:	8b 81       	ldd	r24, Y+3	; 0x03
     aca:	9c 81       	ldd	r25, Y+4	; 0x04
     acc:	93 83       	std	Z+3, r25	; 0x03
     ace:	82 83       	std	Z+2, r24	; 0x02
  _buffer = (char *) malloc(_capacity + 1);
     ad0:	e9 81       	ldd	r30, Y+1	; 0x01
     ad2:	fa 81       	ldd	r31, Y+2	; 0x02
     ad4:	82 81       	ldd	r24, Z+2	; 0x02
     ad6:	93 81       	ldd	r25, Z+3	; 0x03
     ad8:	01 96       	adiw	r24, 0x01	; 1
     ada:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
     ade:	e9 81       	ldd	r30, Y+1	; 0x01
     ae0:	fa 81       	ldd	r31, Y+2	; 0x02
     ae2:	91 83       	std	Z+1, r25	; 0x01
     ae4:	80 83       	st	Z, r24
  if (_buffer == NULL) _length = _capacity = 0;
     ae6:	e9 81       	ldd	r30, Y+1	; 0x01
     ae8:	fa 81       	ldd	r31, Y+2	; 0x02
     aea:	80 81       	ld	r24, Z
     aec:	91 81       	ldd	r25, Z+1	; 0x01
     aee:	00 97       	sbiw	r24, 0x00	; 0
     af0:	01 f4       	brne	.+0      	; 0xaf2 <_ZN6String9getBufferEj+0x42>
     af2:	e9 81       	ldd	r30, Y+1	; 0x01
     af4:	fa 81       	ldd	r31, Y+2	; 0x02
     af6:	13 82       	std	Z+3, r1	; 0x03
     af8:	12 82       	std	Z+2, r1	; 0x02
     afa:	e9 81       	ldd	r30, Y+1	; 0x01
     afc:	fa 81       	ldd	r31, Y+2	; 0x02
     afe:	82 81       	ldd	r24, Z+2	; 0x02
     b00:	93 81       	ldd	r25, Z+3	; 0x03
     b02:	e9 81       	ldd	r30, Y+1	; 0x01
     b04:	fa 81       	ldd	r31, Y+2	; 0x02
     b06:	95 83       	std	Z+5, r25	; 0x05
     b08:	84 83       	std	Z+4, r24	; 0x04
}
     b0a:	0f 90       	pop	r0
     b0c:	0f 90       	pop	r0
     b0e:	0f 90       	pop	r0
     b10:	0f 90       	pop	r0
     b12:	cf 91       	pop	r28
     b14:	df 91       	pop	r29
     b16:	08 95       	ret

00000b18 <_ZN6StringaSERKS_>:

const String & String::operator=( const String &rhs )
     b18:	df 93       	push	r29
     b1a:	cf 93       	push	r28
     b1c:	00 d0       	rcall	.+0      	; 0xb1e <_ZN6StringaSERKS_+0x6>
     b1e:	00 d0       	rcall	.+0      	; 0xb20 <_ZN6StringaSERKS_+0x8>
     b20:	cd b7       	in	r28, 0x3d	; 61
     b22:	de b7       	in	r29, 0x3e	; 62
     b24:	9a 83       	std	Y+2, r25	; 0x02
     b26:	89 83       	std	Y+1, r24	; 0x01
     b28:	7c 83       	std	Y+4, r23	; 0x04
     b2a:	6b 83       	std	Y+3, r22	; 0x03
{
  if ( this == &rhs )
     b2c:	29 81       	ldd	r18, Y+1	; 0x01
     b2e:	3a 81       	ldd	r19, Y+2	; 0x02
     b30:	8b 81       	ldd	r24, Y+3	; 0x03
     b32:	9c 81       	ldd	r25, Y+4	; 0x04
     b34:	28 17       	cp	r18, r24
     b36:	39 07       	cpc	r19, r25
     b38:	01 f4       	brne	.+0      	; 0xb3a <_ZN6StringaSERKS_+0x22>
    return *this;
     b3a:	89 81       	ldd	r24, Y+1	; 0x01
     b3c:	9a 81       	ldd	r25, Y+2	; 0x02
     b3e:	9e 83       	std	Y+6, r25	; 0x06
     b40:	8d 83       	std	Y+5, r24	; 0x05
     b42:	00 c0       	rjmp	.+0      	; 0xb44 <_ZN6StringaSERKS_+0x2c>

  if ( rhs._length > _length )
     b44:	eb 81       	ldd	r30, Y+3	; 0x03
     b46:	fc 81       	ldd	r31, Y+4	; 0x04
     b48:	24 81       	ldd	r18, Z+4	; 0x04
     b4a:	35 81       	ldd	r19, Z+5	; 0x05
     b4c:	e9 81       	ldd	r30, Y+1	; 0x01
     b4e:	fa 81       	ldd	r31, Y+2	; 0x02
     b50:	84 81       	ldd	r24, Z+4	; 0x04
     b52:	95 81       	ldd	r25, Z+5	; 0x05
     b54:	82 17       	cp	r24, r18
     b56:	93 07       	cpc	r25, r19
     b58:	00 f4       	brcc	.+0      	; 0xb5a <_ZN6StringaSERKS_+0x42>
  {
    free(_buffer);
     b5a:	e9 81       	ldd	r30, Y+1	; 0x01
     b5c:	fa 81       	ldd	r31, Y+2	; 0x02
     b5e:	80 81       	ld	r24, Z
     b60:	91 81       	ldd	r25, Z+1	; 0x01
     b62:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
    getBuffer( rhs._length );
     b66:	eb 81       	ldd	r30, Y+3	; 0x03
     b68:	fc 81       	ldd	r31, Y+4	; 0x04
     b6a:	24 81       	ldd	r18, Z+4	; 0x04
     b6c:	35 81       	ldd	r19, Z+5	; 0x05
     b6e:	89 81       	ldd	r24, Y+1	; 0x01
     b70:	9a 81       	ldd	r25, Y+2	; 0x02
     b72:	b9 01       	movw	r22, r18
     b74:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
  }
  
  if ( _buffer != NULL ) {
     b78:	e9 81       	ldd	r30, Y+1	; 0x01
     b7a:	fa 81       	ldd	r31, Y+2	; 0x02
     b7c:	80 81       	ld	r24, Z
     b7e:	91 81       	ldd	r25, Z+1	; 0x01
     b80:	00 97       	sbiw	r24, 0x00	; 0
     b82:	01 f0       	breq	.+0      	; 0xb84 <_ZN6StringaSERKS_+0x6c>
    _length = rhs._length;
     b84:	eb 81       	ldd	r30, Y+3	; 0x03
     b86:	fc 81       	ldd	r31, Y+4	; 0x04
     b88:	84 81       	ldd	r24, Z+4	; 0x04
     b8a:	95 81       	ldd	r25, Z+5	; 0x05
     b8c:	e9 81       	ldd	r30, Y+1	; 0x01
     b8e:	fa 81       	ldd	r31, Y+2	; 0x02
     b90:	95 83       	std	Z+5, r25	; 0x05
     b92:	84 83       	std	Z+4, r24	; 0x04
    strcpy( _buffer, rhs._buffer );
     b94:	e9 81       	ldd	r30, Y+1	; 0x01
     b96:	fa 81       	ldd	r31, Y+2	; 0x02
     b98:	80 81       	ld	r24, Z
     b9a:	91 81       	ldd	r25, Z+1	; 0x01
     b9c:	eb 81       	ldd	r30, Y+3	; 0x03
     b9e:	fc 81       	ldd	r31, Y+4	; 0x04
     ba0:	20 81       	ld	r18, Z
     ba2:	31 81       	ldd	r19, Z+1	; 0x01
     ba4:	b9 01       	movw	r22, r18
     ba6:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
  }
  return *this;
     baa:	89 81       	ldd	r24, Y+1	; 0x01
     bac:	9a 81       	ldd	r25, Y+2	; 0x02
     bae:	9e 83       	std	Y+6, r25	; 0x06
     bb0:	8d 83       	std	Y+5, r24	; 0x05
     bb2:	8d 81       	ldd	r24, Y+5	; 0x05
     bb4:	9e 81       	ldd	r25, Y+6	; 0x06
}
     bb6:	26 96       	adiw	r28, 0x06	; 6
     bb8:	0f b6       	in	r0, 0x3f	; 63
     bba:	f8 94       	cli
     bbc:	de bf       	out	0x3e, r29	; 62
     bbe:	0f be       	out	0x3f, r0	; 63
     bc0:	cd bf       	out	0x3d, r28	; 61
     bc2:	cf 91       	pop	r28
     bc4:	df 91       	pop	r29
     bc6:	08 95       	ret

00000bc8 <_ZN6StringC1Eh>:
    _buffer[0] = value;
    _buffer[1] = 0;
  }
}

String::String( const unsigned char value )
     bc8:	df 93       	push	r29
     bca:	cf 93       	push	r28
     bcc:	00 d0       	rcall	.+0      	; 0xbce <_ZN6StringC1Eh+0x6>
     bce:	cd b7       	in	r28, 0x3d	; 61
     bd0:	de b7       	in	r29, 0x3e	; 62
     bd2:	9a 83       	std	Y+2, r25	; 0x02
     bd4:	89 83       	std	Y+1, r24	; 0x01
     bd6:	6b 83       	std	Y+3, r22	; 0x03
{
  _length = 1;
     bd8:	e9 81       	ldd	r30, Y+1	; 0x01
     bda:	fa 81       	ldd	r31, Y+2	; 0x02
     bdc:	81 e0       	ldi	r24, 0x01	; 1
     bde:	90 e0       	ldi	r25, 0x00	; 0
     be0:	95 83       	std	Z+5, r25	; 0x05
     be2:	84 83       	std	Z+4, r24	; 0x04
  getBuffer(1);
     be4:	89 81       	ldd	r24, Y+1	; 0x01
     be6:	9a 81       	ldd	r25, Y+2	; 0x02
     be8:	61 e0       	ldi	r22, 0x01	; 1
     bea:	70 e0       	ldi	r23, 0x00	; 0
     bec:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
  if ( _buffer != NULL) {
     bf0:	e9 81       	ldd	r30, Y+1	; 0x01
     bf2:	fa 81       	ldd	r31, Y+2	; 0x02
     bf4:	80 81       	ld	r24, Z
     bf6:	91 81       	ldd	r25, Z+1	; 0x01
     bf8:	00 97       	sbiw	r24, 0x00	; 0
     bfa:	01 f0       	breq	.+0      	; 0xbfc <_ZN6StringC1Eh+0x34>
    _buffer[0] = value;
     bfc:	e9 81       	ldd	r30, Y+1	; 0x01
     bfe:	fa 81       	ldd	r31, Y+2	; 0x02
     c00:	01 90       	ld	r0, Z+
     c02:	f0 81       	ld	r31, Z
     c04:	e0 2d       	mov	r30, r0
     c06:	8b 81       	ldd	r24, Y+3	; 0x03
     c08:	80 83       	st	Z, r24
    _buffer[1] = 0;
     c0a:	e9 81       	ldd	r30, Y+1	; 0x01
     c0c:	fa 81       	ldd	r31, Y+2	; 0x02
     c0e:	80 81       	ld	r24, Z
     c10:	91 81       	ldd	r25, Z+1	; 0x01
     c12:	fc 01       	movw	r30, r24
     c14:	31 96       	adiw	r30, 0x01	; 1
     c16:	10 82       	st	Z, r1
  }
}
     c18:	0f 90       	pop	r0
     c1a:	0f 90       	pop	r0
     c1c:	0f 90       	pop	r0
     c1e:	cf 91       	pop	r28
     c20:	df 91       	pop	r29
     c22:	08 95       	ret

00000c24 <_ZN6StringC2Eh>:
    _buffer[0] = value;
    _buffer[1] = 0;
  }
}

String::String( const unsigned char value )
     c24:	df 93       	push	r29
     c26:	cf 93       	push	r28
     c28:	00 d0       	rcall	.+0      	; 0xc2a <_ZN6StringC2Eh+0x6>
     c2a:	cd b7       	in	r28, 0x3d	; 61
     c2c:	de b7       	in	r29, 0x3e	; 62
     c2e:	9a 83       	std	Y+2, r25	; 0x02
     c30:	89 83       	std	Y+1, r24	; 0x01
     c32:	6b 83       	std	Y+3, r22	; 0x03
{
  _length = 1;
     c34:	e9 81       	ldd	r30, Y+1	; 0x01
     c36:	fa 81       	ldd	r31, Y+2	; 0x02
     c38:	81 e0       	ldi	r24, 0x01	; 1
     c3a:	90 e0       	ldi	r25, 0x00	; 0
     c3c:	95 83       	std	Z+5, r25	; 0x05
     c3e:	84 83       	std	Z+4, r24	; 0x04
  getBuffer(1);
     c40:	89 81       	ldd	r24, Y+1	; 0x01
     c42:	9a 81       	ldd	r25, Y+2	; 0x02
     c44:	61 e0       	ldi	r22, 0x01	; 1
     c46:	70 e0       	ldi	r23, 0x00	; 0
     c48:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
  if ( _buffer != NULL) {
     c4c:	e9 81       	ldd	r30, Y+1	; 0x01
     c4e:	fa 81       	ldd	r31, Y+2	; 0x02
     c50:	80 81       	ld	r24, Z
     c52:	91 81       	ldd	r25, Z+1	; 0x01
     c54:	00 97       	sbiw	r24, 0x00	; 0
     c56:	01 f0       	breq	.+0      	; 0xc58 <_ZN6StringC2Eh+0x34>
    _buffer[0] = value;
     c58:	e9 81       	ldd	r30, Y+1	; 0x01
     c5a:	fa 81       	ldd	r31, Y+2	; 0x02
     c5c:	01 90       	ld	r0, Z+
     c5e:	f0 81       	ld	r31, Z
     c60:	e0 2d       	mov	r30, r0
     c62:	8b 81       	ldd	r24, Y+3	; 0x03
     c64:	80 83       	st	Z, r24
    _buffer[1] = 0;
     c66:	e9 81       	ldd	r30, Y+1	; 0x01
     c68:	fa 81       	ldd	r31, Y+2	; 0x02
     c6a:	80 81       	ld	r24, Z
     c6c:	91 81       	ldd	r25, Z+1	; 0x01
     c6e:	fc 01       	movw	r30, r24
     c70:	31 96       	adiw	r30, 0x01	; 1
     c72:	10 82       	st	Z, r1
  }
}
     c74:	0f 90       	pop	r0
     c76:	0f 90       	pop	r0
     c78:	0f 90       	pop	r0
     c7a:	cf 91       	pop	r28
     c7c:	df 91       	pop	r29
     c7e:	08 95       	ret

00000c80 <_ZN6StringC1Ec>:
  getBuffer( _length = value._length );
  if ( _buffer != NULL )
    strcpy( _buffer, value._buffer );
}

String::String( const char value )
     c80:	df 93       	push	r29
     c82:	cf 93       	push	r28
     c84:	00 d0       	rcall	.+0      	; 0xc86 <_ZN6StringC1Ec+0x6>
     c86:	cd b7       	in	r28, 0x3d	; 61
     c88:	de b7       	in	r29, 0x3e	; 62
     c8a:	9a 83       	std	Y+2, r25	; 0x02
     c8c:	89 83       	std	Y+1, r24	; 0x01
     c8e:	6b 83       	std	Y+3, r22	; 0x03
{
  _length = 1;
     c90:	e9 81       	ldd	r30, Y+1	; 0x01
     c92:	fa 81       	ldd	r31, Y+2	; 0x02
     c94:	81 e0       	ldi	r24, 0x01	; 1
     c96:	90 e0       	ldi	r25, 0x00	; 0
     c98:	95 83       	std	Z+5, r25	; 0x05
     c9a:	84 83       	std	Z+4, r24	; 0x04
  getBuffer(1);
     c9c:	89 81       	ldd	r24, Y+1	; 0x01
     c9e:	9a 81       	ldd	r25, Y+2	; 0x02
     ca0:	61 e0       	ldi	r22, 0x01	; 1
     ca2:	70 e0       	ldi	r23, 0x00	; 0
     ca4:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
  if ( _buffer != NULL ) {
     ca8:	e9 81       	ldd	r30, Y+1	; 0x01
     caa:	fa 81       	ldd	r31, Y+2	; 0x02
     cac:	80 81       	ld	r24, Z
     cae:	91 81       	ldd	r25, Z+1	; 0x01
     cb0:	00 97       	sbiw	r24, 0x00	; 0
     cb2:	01 f0       	breq	.+0      	; 0xcb4 <_ZN6StringC1Ec+0x34>
    _buffer[0] = value;
     cb4:	e9 81       	ldd	r30, Y+1	; 0x01
     cb6:	fa 81       	ldd	r31, Y+2	; 0x02
     cb8:	01 90       	ld	r0, Z+
     cba:	f0 81       	ld	r31, Z
     cbc:	e0 2d       	mov	r30, r0
     cbe:	8b 81       	ldd	r24, Y+3	; 0x03
     cc0:	80 83       	st	Z, r24
    _buffer[1] = 0;
     cc2:	e9 81       	ldd	r30, Y+1	; 0x01
     cc4:	fa 81       	ldd	r31, Y+2	; 0x02
     cc6:	80 81       	ld	r24, Z
     cc8:	91 81       	ldd	r25, Z+1	; 0x01
     cca:	fc 01       	movw	r30, r24
     ccc:	31 96       	adiw	r30, 0x01	; 1
     cce:	10 82       	st	Z, r1
  }
}
     cd0:	0f 90       	pop	r0
     cd2:	0f 90       	pop	r0
     cd4:	0f 90       	pop	r0
     cd6:	cf 91       	pop	r28
     cd8:	df 91       	pop	r29
     cda:	08 95       	ret

00000cdc <_ZN6StringC2Ec>:
  getBuffer( _length = value._length );
  if ( _buffer != NULL )
    strcpy( _buffer, value._buffer );
}

String::String( const char value )
     cdc:	df 93       	push	r29
     cde:	cf 93       	push	r28
     ce0:	00 d0       	rcall	.+0      	; 0xce2 <_ZN6StringC2Ec+0x6>
     ce2:	cd b7       	in	r28, 0x3d	; 61
     ce4:	de b7       	in	r29, 0x3e	; 62
     ce6:	9a 83       	std	Y+2, r25	; 0x02
     ce8:	89 83       	std	Y+1, r24	; 0x01
     cea:	6b 83       	std	Y+3, r22	; 0x03
{
  _length = 1;
     cec:	e9 81       	ldd	r30, Y+1	; 0x01
     cee:	fa 81       	ldd	r31, Y+2	; 0x02
     cf0:	81 e0       	ldi	r24, 0x01	; 1
     cf2:	90 e0       	ldi	r25, 0x00	; 0
     cf4:	95 83       	std	Z+5, r25	; 0x05
     cf6:	84 83       	std	Z+4, r24	; 0x04
  getBuffer(1);
     cf8:	89 81       	ldd	r24, Y+1	; 0x01
     cfa:	9a 81       	ldd	r25, Y+2	; 0x02
     cfc:	61 e0       	ldi	r22, 0x01	; 1
     cfe:	70 e0       	ldi	r23, 0x00	; 0
     d00:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
  if ( _buffer != NULL ) {
     d04:	e9 81       	ldd	r30, Y+1	; 0x01
     d06:	fa 81       	ldd	r31, Y+2	; 0x02
     d08:	80 81       	ld	r24, Z
     d0a:	91 81       	ldd	r25, Z+1	; 0x01
     d0c:	00 97       	sbiw	r24, 0x00	; 0
     d0e:	01 f0       	breq	.+0      	; 0xd10 <_ZN6StringC2Ec+0x34>
    _buffer[0] = value;
     d10:	e9 81       	ldd	r30, Y+1	; 0x01
     d12:	fa 81       	ldd	r31, Y+2	; 0x02
     d14:	01 90       	ld	r0, Z+
     d16:	f0 81       	ld	r31, Z
     d18:	e0 2d       	mov	r30, r0
     d1a:	8b 81       	ldd	r24, Y+3	; 0x03
     d1c:	80 83       	st	Z, r24
    _buffer[1] = 0;
     d1e:	e9 81       	ldd	r30, Y+1	; 0x01
     d20:	fa 81       	ldd	r31, Y+2	; 0x02
     d22:	80 81       	ld	r24, Z
     d24:	91 81       	ldd	r25, Z+1	; 0x01
     d26:	fc 01       	movw	r30, r24
     d28:	31 96       	adiw	r30, 0x01	; 1
     d2a:	10 82       	st	Z, r1
  }
}
     d2c:	0f 90       	pop	r0
     d2e:	0f 90       	pop	r0
     d30:	0f 90       	pop	r0
     d32:	cf 91       	pop	r28
     d34:	df 91       	pop	r29
     d36:	08 95       	ret

00000d38 <_ZN6StringC1ERKS_>:
  getBuffer( _length = strlen( value ) );
  if ( _buffer != NULL )
    strcpy( _buffer, value );
}

String::String( const String &value )
     d38:	df 93       	push	r29
     d3a:	cf 93       	push	r28
     d3c:	00 d0       	rcall	.+0      	; 0xd3e <_ZN6StringC1ERKS_+0x6>
     d3e:	0f 92       	push	r0
     d40:	cd b7       	in	r28, 0x3d	; 61
     d42:	de b7       	in	r29, 0x3e	; 62
     d44:	9a 83       	std	Y+2, r25	; 0x02
     d46:	89 83       	std	Y+1, r24	; 0x01
     d48:	7c 83       	std	Y+4, r23	; 0x04
     d4a:	6b 83       	std	Y+3, r22	; 0x03
{
  getBuffer( _length = value._length );
     d4c:	eb 81       	ldd	r30, Y+3	; 0x03
     d4e:	fc 81       	ldd	r31, Y+4	; 0x04
     d50:	84 81       	ldd	r24, Z+4	; 0x04
     d52:	95 81       	ldd	r25, Z+5	; 0x05
     d54:	e9 81       	ldd	r30, Y+1	; 0x01
     d56:	fa 81       	ldd	r31, Y+2	; 0x02
     d58:	95 83       	std	Z+5, r25	; 0x05
     d5a:	84 83       	std	Z+4, r24	; 0x04
     d5c:	e9 81       	ldd	r30, Y+1	; 0x01
     d5e:	fa 81       	ldd	r31, Y+2	; 0x02
     d60:	24 81       	ldd	r18, Z+4	; 0x04
     d62:	35 81       	ldd	r19, Z+5	; 0x05
     d64:	89 81       	ldd	r24, Y+1	; 0x01
     d66:	9a 81       	ldd	r25, Y+2	; 0x02
     d68:	b9 01       	movw	r22, r18
     d6a:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
  if ( _buffer != NULL )
     d6e:	e9 81       	ldd	r30, Y+1	; 0x01
     d70:	fa 81       	ldd	r31, Y+2	; 0x02
     d72:	80 81       	ld	r24, Z
     d74:	91 81       	ldd	r25, Z+1	; 0x01
     d76:	00 97       	sbiw	r24, 0x00	; 0
     d78:	01 f0       	breq	.+0      	; 0xd7a <_ZN6StringC1ERKS_+0x42>
    strcpy( _buffer, value._buffer );
     d7a:	e9 81       	ldd	r30, Y+1	; 0x01
     d7c:	fa 81       	ldd	r31, Y+2	; 0x02
     d7e:	80 81       	ld	r24, Z
     d80:	91 81       	ldd	r25, Z+1	; 0x01
     d82:	eb 81       	ldd	r30, Y+3	; 0x03
     d84:	fc 81       	ldd	r31, Y+4	; 0x04
     d86:	20 81       	ld	r18, Z
     d88:	31 81       	ldd	r19, Z+1	; 0x01
     d8a:	b9 01       	movw	r22, r18
     d8c:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
}
     d90:	0f 90       	pop	r0
     d92:	0f 90       	pop	r0
     d94:	0f 90       	pop	r0
     d96:	0f 90       	pop	r0
     d98:	cf 91       	pop	r28
     d9a:	df 91       	pop	r29
     d9c:	08 95       	ret

00000d9e <_ZN6StringC2ERKS_>:
  getBuffer( _length = strlen( value ) );
  if ( _buffer != NULL )
    strcpy( _buffer, value );
}

String::String( const String &value )
     d9e:	df 93       	push	r29
     da0:	cf 93       	push	r28
     da2:	00 d0       	rcall	.+0      	; 0xda4 <_ZN6StringC2ERKS_+0x6>
     da4:	0f 92       	push	r0
     da6:	cd b7       	in	r28, 0x3d	; 61
     da8:	de b7       	in	r29, 0x3e	; 62
     daa:	9a 83       	std	Y+2, r25	; 0x02
     dac:	89 83       	std	Y+1, r24	; 0x01
     dae:	7c 83       	std	Y+4, r23	; 0x04
     db0:	6b 83       	std	Y+3, r22	; 0x03
{
  getBuffer( _length = value._length );
     db2:	eb 81       	ldd	r30, Y+3	; 0x03
     db4:	fc 81       	ldd	r31, Y+4	; 0x04
     db6:	84 81       	ldd	r24, Z+4	; 0x04
     db8:	95 81       	ldd	r25, Z+5	; 0x05
     dba:	e9 81       	ldd	r30, Y+1	; 0x01
     dbc:	fa 81       	ldd	r31, Y+2	; 0x02
     dbe:	95 83       	std	Z+5, r25	; 0x05
     dc0:	84 83       	std	Z+4, r24	; 0x04
     dc2:	e9 81       	ldd	r30, Y+1	; 0x01
     dc4:	fa 81       	ldd	r31, Y+2	; 0x02
     dc6:	24 81       	ldd	r18, Z+4	; 0x04
     dc8:	35 81       	ldd	r19, Z+5	; 0x05
     dca:	89 81       	ldd	r24, Y+1	; 0x01
     dcc:	9a 81       	ldd	r25, Y+2	; 0x02
     dce:	b9 01       	movw	r22, r18
     dd0:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
  if ( _buffer != NULL )
     dd4:	e9 81       	ldd	r30, Y+1	; 0x01
     dd6:	fa 81       	ldd	r31, Y+2	; 0x02
     dd8:	80 81       	ld	r24, Z
     dda:	91 81       	ldd	r25, Z+1	; 0x01
     ddc:	00 97       	sbiw	r24, 0x00	; 0
     dde:	01 f0       	breq	.+0      	; 0xde0 <_ZN6StringC2ERKS_+0x42>
    strcpy( _buffer, value._buffer );
     de0:	e9 81       	ldd	r30, Y+1	; 0x01
     de2:	fa 81       	ldd	r31, Y+2	; 0x02
     de4:	80 81       	ld	r24, Z
     de6:	91 81       	ldd	r25, Z+1	; 0x01
     de8:	eb 81       	ldd	r30, Y+3	; 0x03
     dea:	fc 81       	ldd	r31, Y+4	; 0x04
     dec:	20 81       	ld	r18, Z
     dee:	31 81       	ldd	r19, Z+1	; 0x01
     df0:	b9 01       	movw	r22, r18
     df2:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
}
     df6:	0f 90       	pop	r0
     df8:	0f 90       	pop	r0
     dfa:	0f 90       	pop	r0
     dfc:	0f 90       	pop	r0
     dfe:	cf 91       	pop	r28
     e00:	df 91       	pop	r29
     e02:	08 95       	ret

00000e04 <_ZN6StringC1Emi>:
  getBuffer( _length = strlen(buf) );
  if ( _buffer != NULL )
    strcpy( _buffer, buf );
}

String::String( const unsigned long value, const int base )
     e04:	df 93       	push	r29
     e06:	cf 93       	push	r28
     e08:	cd b7       	in	r28, 0x3d	; 61
     e0a:	de b7       	in	r29, 0x3e	; 62
     e0c:	a9 97       	sbiw	r28, 0x29	; 41
     e0e:	0f b6       	in	r0, 0x3f	; 63
     e10:	f8 94       	cli
     e12:	de bf       	out	0x3e, r29	; 62
     e14:	0f be       	out	0x3f, r0	; 63
     e16:	cd bf       	out	0x3d, r28	; 61
     e18:	9b a3       	std	Y+35, r25	; 0x23
     e1a:	8a a3       	std	Y+34, r24	; 0x22
     e1c:	4c a3       	std	Y+36, r20	; 0x24
     e1e:	5d a3       	std	Y+37, r21	; 0x25
     e20:	6e a3       	std	Y+38, r22	; 0x26
     e22:	7f a3       	std	Y+39, r23	; 0x27
     e24:	39 a7       	std	Y+41, r19	; 0x29
     e26:	28 a7       	std	Y+40, r18	; 0x28
{
  char buf[33];   
  ultoa(value, buf, 10);
     e28:	8c a1       	ldd	r24, Y+36	; 0x24
     e2a:	9d a1       	ldd	r25, Y+37	; 0x25
     e2c:	ae a1       	ldd	r26, Y+38	; 0x26
     e2e:	bf a1       	ldd	r27, Y+39	; 0x27
     e30:	bc 01       	movw	r22, r24
     e32:	cd 01       	movw	r24, r26
     e34:	9e 01       	movw	r18, r28
     e36:	2f 5f       	subi	r18, 0xFF	; 255
     e38:	3f 4f       	sbci	r19, 0xFF	; 255
     e3a:	a9 01       	movw	r20, r18
     e3c:	2a e0       	ldi	r18, 0x0A	; 10
     e3e:	30 e0       	ldi	r19, 0x00	; 0
     e40:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
  getBuffer( _length = strlen(buf) );
     e44:	ce 01       	movw	r24, r28
     e46:	01 96       	adiw	r24, 0x01	; 1
     e48:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
     e4c:	ea a1       	ldd	r30, Y+34	; 0x22
     e4e:	fb a1       	ldd	r31, Y+35	; 0x23
     e50:	95 83       	std	Z+5, r25	; 0x05
     e52:	84 83       	std	Z+4, r24	; 0x04
     e54:	ea a1       	ldd	r30, Y+34	; 0x22
     e56:	fb a1       	ldd	r31, Y+35	; 0x23
     e58:	24 81       	ldd	r18, Z+4	; 0x04
     e5a:	35 81       	ldd	r19, Z+5	; 0x05
     e5c:	8a a1       	ldd	r24, Y+34	; 0x22
     e5e:	9b a1       	ldd	r25, Y+35	; 0x23
     e60:	b9 01       	movw	r22, r18
     e62:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
  if ( _buffer != NULL )
     e66:	ea a1       	ldd	r30, Y+34	; 0x22
     e68:	fb a1       	ldd	r31, Y+35	; 0x23
     e6a:	80 81       	ld	r24, Z
     e6c:	91 81       	ldd	r25, Z+1	; 0x01
     e6e:	00 97       	sbiw	r24, 0x00	; 0
     e70:	01 f0       	breq	.+0      	; 0xe72 <_ZN6StringC1Emi+0x6e>
    strcpy( _buffer, buf );
     e72:	ea a1       	ldd	r30, Y+34	; 0x22
     e74:	fb a1       	ldd	r31, Y+35	; 0x23
     e76:	80 81       	ld	r24, Z
     e78:	91 81       	ldd	r25, Z+1	; 0x01
     e7a:	9e 01       	movw	r18, r28
     e7c:	2f 5f       	subi	r18, 0xFF	; 255
     e7e:	3f 4f       	sbci	r19, 0xFF	; 255
     e80:	b9 01       	movw	r22, r18
     e82:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
}
     e86:	a9 96       	adiw	r28, 0x29	; 41
     e88:	0f b6       	in	r0, 0x3f	; 63
     e8a:	f8 94       	cli
     e8c:	de bf       	out	0x3e, r29	; 62
     e8e:	0f be       	out	0x3f, r0	; 63
     e90:	cd bf       	out	0x3d, r28	; 61
     e92:	cf 91       	pop	r28
     e94:	df 91       	pop	r29
     e96:	08 95       	ret

00000e98 <_ZN6StringC2Emi>:
  getBuffer( _length = strlen(buf) );
  if ( _buffer != NULL )
    strcpy( _buffer, buf );
}

String::String( const unsigned long value, const int base )
     e98:	df 93       	push	r29
     e9a:	cf 93       	push	r28
     e9c:	cd b7       	in	r28, 0x3d	; 61
     e9e:	de b7       	in	r29, 0x3e	; 62
     ea0:	a9 97       	sbiw	r28, 0x29	; 41
     ea2:	0f b6       	in	r0, 0x3f	; 63
     ea4:	f8 94       	cli
     ea6:	de bf       	out	0x3e, r29	; 62
     ea8:	0f be       	out	0x3f, r0	; 63
     eaa:	cd bf       	out	0x3d, r28	; 61
     eac:	9b a3       	std	Y+35, r25	; 0x23
     eae:	8a a3       	std	Y+34, r24	; 0x22
     eb0:	4c a3       	std	Y+36, r20	; 0x24
     eb2:	5d a3       	std	Y+37, r21	; 0x25
     eb4:	6e a3       	std	Y+38, r22	; 0x26
     eb6:	7f a3       	std	Y+39, r23	; 0x27
     eb8:	39 a7       	std	Y+41, r19	; 0x29
     eba:	28 a7       	std	Y+40, r18	; 0x28
{
  char buf[33];   
  ultoa(value, buf, 10);
     ebc:	8c a1       	ldd	r24, Y+36	; 0x24
     ebe:	9d a1       	ldd	r25, Y+37	; 0x25
     ec0:	ae a1       	ldd	r26, Y+38	; 0x26
     ec2:	bf a1       	ldd	r27, Y+39	; 0x27
     ec4:	bc 01       	movw	r22, r24
     ec6:	cd 01       	movw	r24, r26
     ec8:	9e 01       	movw	r18, r28
     eca:	2f 5f       	subi	r18, 0xFF	; 255
     ecc:	3f 4f       	sbci	r19, 0xFF	; 255
     ece:	a9 01       	movw	r20, r18
     ed0:	2a e0       	ldi	r18, 0x0A	; 10
     ed2:	30 e0       	ldi	r19, 0x00	; 0
     ed4:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
  getBuffer( _length = strlen(buf) );
     ed8:	ce 01       	movw	r24, r28
     eda:	01 96       	adiw	r24, 0x01	; 1
     edc:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
     ee0:	ea a1       	ldd	r30, Y+34	; 0x22
     ee2:	fb a1       	ldd	r31, Y+35	; 0x23
     ee4:	95 83       	std	Z+5, r25	; 0x05
     ee6:	84 83       	std	Z+4, r24	; 0x04
     ee8:	ea a1       	ldd	r30, Y+34	; 0x22
     eea:	fb a1       	ldd	r31, Y+35	; 0x23
     eec:	24 81       	ldd	r18, Z+4	; 0x04
     eee:	35 81       	ldd	r19, Z+5	; 0x05
     ef0:	8a a1       	ldd	r24, Y+34	; 0x22
     ef2:	9b a1       	ldd	r25, Y+35	; 0x23
     ef4:	b9 01       	movw	r22, r18
     ef6:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
  if ( _buffer != NULL )
     efa:	ea a1       	ldd	r30, Y+34	; 0x22
     efc:	fb a1       	ldd	r31, Y+35	; 0x23
     efe:	80 81       	ld	r24, Z
     f00:	91 81       	ldd	r25, Z+1	; 0x01
     f02:	00 97       	sbiw	r24, 0x00	; 0
     f04:	01 f0       	breq	.+0      	; 0xf06 <_ZN6StringC2Emi+0x6e>
    strcpy( _buffer, buf );
     f06:	ea a1       	ldd	r30, Y+34	; 0x22
     f08:	fb a1       	ldd	r31, Y+35	; 0x23
     f0a:	80 81       	ld	r24, Z
     f0c:	91 81       	ldd	r25, Z+1	; 0x01
     f0e:	9e 01       	movw	r18, r28
     f10:	2f 5f       	subi	r18, 0xFF	; 255
     f12:	3f 4f       	sbci	r19, 0xFF	; 255
     f14:	b9 01       	movw	r22, r18
     f16:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
}
     f1a:	a9 96       	adiw	r28, 0x29	; 41
     f1c:	0f b6       	in	r0, 0x3f	; 63
     f1e:	f8 94       	cli
     f20:	de bf       	out	0x3e, r29	; 62
     f22:	0f be       	out	0x3f, r0	; 63
     f24:	cd bf       	out	0x3d, r28	; 61
     f26:	cf 91       	pop	r28
     f28:	df 91       	pop	r29
     f2a:	08 95       	ret

00000f2c <_ZN6StringC1Eji>:
  getBuffer( _length = strlen(buf) );
  if ( _buffer != NULL )
    strcpy( _buffer, buf );
}

String::String( const unsigned int value, const int base )
     f2c:	df 93       	push	r29
     f2e:	cf 93       	push	r28
     f30:	cd b7       	in	r28, 0x3d	; 61
     f32:	de b7       	in	r29, 0x3e	; 62
     f34:	a7 97       	sbiw	r28, 0x27	; 39
     f36:	0f b6       	in	r0, 0x3f	; 63
     f38:	f8 94       	cli
     f3a:	de bf       	out	0x3e, r29	; 62
     f3c:	0f be       	out	0x3f, r0	; 63
     f3e:	cd bf       	out	0x3d, r28	; 61
     f40:	9b a3       	std	Y+35, r25	; 0x23
     f42:	8a a3       	std	Y+34, r24	; 0x22
     f44:	7d a3       	std	Y+37, r23	; 0x25
     f46:	6c a3       	std	Y+36, r22	; 0x24
     f48:	5f a3       	std	Y+39, r21	; 0x27
     f4a:	4e a3       	std	Y+38, r20	; 0x26
{
  char buf[33];   
  ultoa((unsigned long)value, buf, base);
     f4c:	8c a1       	ldd	r24, Y+36	; 0x24
     f4e:	9d a1       	ldd	r25, Y+37	; 0x25
     f50:	cc 01       	movw	r24, r24
     f52:	a0 e0       	ldi	r26, 0x00	; 0
     f54:	b0 e0       	ldi	r27, 0x00	; 0
     f56:	ee a1       	ldd	r30, Y+38	; 0x26
     f58:	ff a1       	ldd	r31, Y+39	; 0x27
     f5a:	bc 01       	movw	r22, r24
     f5c:	cd 01       	movw	r24, r26
     f5e:	9e 01       	movw	r18, r28
     f60:	2f 5f       	subi	r18, 0xFF	; 255
     f62:	3f 4f       	sbci	r19, 0xFF	; 255
     f64:	a9 01       	movw	r20, r18
     f66:	9f 01       	movw	r18, r30
     f68:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
  getBuffer( _length = strlen(buf) );
     f6c:	ce 01       	movw	r24, r28
     f6e:	01 96       	adiw	r24, 0x01	; 1
     f70:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
     f74:	ea a1       	ldd	r30, Y+34	; 0x22
     f76:	fb a1       	ldd	r31, Y+35	; 0x23
     f78:	95 83       	std	Z+5, r25	; 0x05
     f7a:	84 83       	std	Z+4, r24	; 0x04
     f7c:	ea a1       	ldd	r30, Y+34	; 0x22
     f7e:	fb a1       	ldd	r31, Y+35	; 0x23
     f80:	24 81       	ldd	r18, Z+4	; 0x04
     f82:	35 81       	ldd	r19, Z+5	; 0x05
     f84:	8a a1       	ldd	r24, Y+34	; 0x22
     f86:	9b a1       	ldd	r25, Y+35	; 0x23
     f88:	b9 01       	movw	r22, r18
     f8a:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
  if ( _buffer != NULL )
     f8e:	ea a1       	ldd	r30, Y+34	; 0x22
     f90:	fb a1       	ldd	r31, Y+35	; 0x23
     f92:	80 81       	ld	r24, Z
     f94:	91 81       	ldd	r25, Z+1	; 0x01
     f96:	00 97       	sbiw	r24, 0x00	; 0
     f98:	01 f0       	breq	.+0      	; 0xf9a <_ZN6StringC1Eji+0x6e>
    strcpy( _buffer, buf );
     f9a:	ea a1       	ldd	r30, Y+34	; 0x22
     f9c:	fb a1       	ldd	r31, Y+35	; 0x23
     f9e:	80 81       	ld	r24, Z
     fa0:	91 81       	ldd	r25, Z+1	; 0x01
     fa2:	9e 01       	movw	r18, r28
     fa4:	2f 5f       	subi	r18, 0xFF	; 255
     fa6:	3f 4f       	sbci	r19, 0xFF	; 255
     fa8:	b9 01       	movw	r22, r18
     faa:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
}
     fae:	a7 96       	adiw	r28, 0x27	; 39
     fb0:	0f b6       	in	r0, 0x3f	; 63
     fb2:	f8 94       	cli
     fb4:	de bf       	out	0x3e, r29	; 62
     fb6:	0f be       	out	0x3f, r0	; 63
     fb8:	cd bf       	out	0x3d, r28	; 61
     fba:	cf 91       	pop	r28
     fbc:	df 91       	pop	r29
     fbe:	08 95       	ret

00000fc0 <_ZN6StringC2Eji>:
  getBuffer( _length = strlen(buf) );
  if ( _buffer != NULL )
    strcpy( _buffer, buf );
}

String::String( const unsigned int value, const int base )
     fc0:	df 93       	push	r29
     fc2:	cf 93       	push	r28
     fc4:	cd b7       	in	r28, 0x3d	; 61
     fc6:	de b7       	in	r29, 0x3e	; 62
     fc8:	a7 97       	sbiw	r28, 0x27	; 39
     fca:	0f b6       	in	r0, 0x3f	; 63
     fcc:	f8 94       	cli
     fce:	de bf       	out	0x3e, r29	; 62
     fd0:	0f be       	out	0x3f, r0	; 63
     fd2:	cd bf       	out	0x3d, r28	; 61
     fd4:	9b a3       	std	Y+35, r25	; 0x23
     fd6:	8a a3       	std	Y+34, r24	; 0x22
     fd8:	7d a3       	std	Y+37, r23	; 0x25
     fda:	6c a3       	std	Y+36, r22	; 0x24
     fdc:	5f a3       	std	Y+39, r21	; 0x27
     fde:	4e a3       	std	Y+38, r20	; 0x26
{
  char buf[33];   
  ultoa((unsigned long)value, buf, base);
     fe0:	8c a1       	ldd	r24, Y+36	; 0x24
     fe2:	9d a1       	ldd	r25, Y+37	; 0x25
     fe4:	cc 01       	movw	r24, r24
     fe6:	a0 e0       	ldi	r26, 0x00	; 0
     fe8:	b0 e0       	ldi	r27, 0x00	; 0
     fea:	ee a1       	ldd	r30, Y+38	; 0x26
     fec:	ff a1       	ldd	r31, Y+39	; 0x27
     fee:	bc 01       	movw	r22, r24
     ff0:	cd 01       	movw	r24, r26
     ff2:	9e 01       	movw	r18, r28
     ff4:	2f 5f       	subi	r18, 0xFF	; 255
     ff6:	3f 4f       	sbci	r19, 0xFF	; 255
     ff8:	a9 01       	movw	r20, r18
     ffa:	9f 01       	movw	r18, r30
     ffc:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
  getBuffer( _length = strlen(buf) );
    1000:	ce 01       	movw	r24, r28
    1002:	01 96       	adiw	r24, 0x01	; 1
    1004:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
    1008:	ea a1       	ldd	r30, Y+34	; 0x22
    100a:	fb a1       	ldd	r31, Y+35	; 0x23
    100c:	95 83       	std	Z+5, r25	; 0x05
    100e:	84 83       	std	Z+4, r24	; 0x04
    1010:	ea a1       	ldd	r30, Y+34	; 0x22
    1012:	fb a1       	ldd	r31, Y+35	; 0x23
    1014:	24 81       	ldd	r18, Z+4	; 0x04
    1016:	35 81       	ldd	r19, Z+5	; 0x05
    1018:	8a a1       	ldd	r24, Y+34	; 0x22
    101a:	9b a1       	ldd	r25, Y+35	; 0x23
    101c:	b9 01       	movw	r22, r18
    101e:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
  if ( _buffer != NULL )
    1022:	ea a1       	ldd	r30, Y+34	; 0x22
    1024:	fb a1       	ldd	r31, Y+35	; 0x23
    1026:	80 81       	ld	r24, Z
    1028:	91 81       	ldd	r25, Z+1	; 0x01
    102a:	00 97       	sbiw	r24, 0x00	; 0
    102c:	01 f0       	breq	.+0      	; 0x102e <_ZN6StringC2Eji+0x6e>
    strcpy( _buffer, buf );
    102e:	ea a1       	ldd	r30, Y+34	; 0x22
    1030:	fb a1       	ldd	r31, Y+35	; 0x23
    1032:	80 81       	ld	r24, Z
    1034:	91 81       	ldd	r25, Z+1	; 0x01
    1036:	9e 01       	movw	r18, r28
    1038:	2f 5f       	subi	r18, 0xFF	; 255
    103a:	3f 4f       	sbci	r19, 0xFF	; 255
    103c:	b9 01       	movw	r22, r18
    103e:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
}
    1042:	a7 96       	adiw	r28, 0x27	; 39
    1044:	0f b6       	in	r0, 0x3f	; 63
    1046:	f8 94       	cli
    1048:	de bf       	out	0x3e, r29	; 62
    104a:	0f be       	out	0x3f, r0	; 63
    104c:	cd bf       	out	0x3d, r28	; 61
    104e:	cf 91       	pop	r28
    1050:	df 91       	pop	r29
    1052:	08 95       	ret

00001054 <_ZN6StringC1EPKc>:
#include <stdlib.h>
#include "WProgram.h"
#include "WString.h"


String::String( const char *value )
    1054:	df 93       	push	r29
    1056:	cf 93       	push	r28
    1058:	00 d0       	rcall	.+0      	; 0x105a <_ZN6StringC1EPKc+0x6>
    105a:	0f 92       	push	r0
    105c:	cd b7       	in	r28, 0x3d	; 61
    105e:	de b7       	in	r29, 0x3e	; 62
    1060:	9a 83       	std	Y+2, r25	; 0x02
    1062:	89 83       	std	Y+1, r24	; 0x01
    1064:	7c 83       	std	Y+4, r23	; 0x04
    1066:	6b 83       	std	Y+3, r22	; 0x03
{
  if ( value == NULL )
    1068:	8b 81       	ldd	r24, Y+3	; 0x03
    106a:	9c 81       	ldd	r25, Y+4	; 0x04
    106c:	00 97       	sbiw	r24, 0x00	; 0
    106e:	01 f4       	brne	.+0      	; 0x1070 <_ZN6StringC1EPKc+0x1c>
    value = "";
    1070:	80 e0       	ldi	r24, 0x00	; 0
    1072:	90 e0       	ldi	r25, 0x00	; 0
    1074:	9c 83       	std	Y+4, r25	; 0x04
    1076:	8b 83       	std	Y+3, r24	; 0x03
  getBuffer( _length = strlen( value ) );
    1078:	8b 81       	ldd	r24, Y+3	; 0x03
    107a:	9c 81       	ldd	r25, Y+4	; 0x04
    107c:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
    1080:	e9 81       	ldd	r30, Y+1	; 0x01
    1082:	fa 81       	ldd	r31, Y+2	; 0x02
    1084:	95 83       	std	Z+5, r25	; 0x05
    1086:	84 83       	std	Z+4, r24	; 0x04
    1088:	e9 81       	ldd	r30, Y+1	; 0x01
    108a:	fa 81       	ldd	r31, Y+2	; 0x02
    108c:	24 81       	ldd	r18, Z+4	; 0x04
    108e:	35 81       	ldd	r19, Z+5	; 0x05
    1090:	89 81       	ldd	r24, Y+1	; 0x01
    1092:	9a 81       	ldd	r25, Y+2	; 0x02
    1094:	b9 01       	movw	r22, r18
    1096:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
  if ( _buffer != NULL )
    109a:	e9 81       	ldd	r30, Y+1	; 0x01
    109c:	fa 81       	ldd	r31, Y+2	; 0x02
    109e:	80 81       	ld	r24, Z
    10a0:	91 81       	ldd	r25, Z+1	; 0x01
    10a2:	00 97       	sbiw	r24, 0x00	; 0
    10a4:	01 f0       	breq	.+0      	; 0x10a6 <_ZN6StringC1EPKc+0x52>
    strcpy( _buffer, value );
    10a6:	e9 81       	ldd	r30, Y+1	; 0x01
    10a8:	fa 81       	ldd	r31, Y+2	; 0x02
    10aa:	80 81       	ld	r24, Z
    10ac:	91 81       	ldd	r25, Z+1	; 0x01
    10ae:	2b 81       	ldd	r18, Y+3	; 0x03
    10b0:	3c 81       	ldd	r19, Y+4	; 0x04
    10b2:	b9 01       	movw	r22, r18
    10b4:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
}
    10b8:	0f 90       	pop	r0
    10ba:	0f 90       	pop	r0
    10bc:	0f 90       	pop	r0
    10be:	0f 90       	pop	r0
    10c0:	cf 91       	pop	r28
    10c2:	df 91       	pop	r29
    10c4:	08 95       	ret

000010c6 <_ZNK6String11toUpperCaseEv>:
  for ( unsigned int i = 0; i < _length; i++ )
    temp._buffer[ i ] = (char)tolower( temp._buffer[ i ] );
  return temp;
}

String String::toUpperCase() const
    10c6:	0f 93       	push	r16
    10c8:	1f 93       	push	r17
    10ca:	df 93       	push	r29
    10cc:	cf 93       	push	r28
    10ce:	cd b7       	in	r28, 0x3d	; 61
    10d0:	de b7       	in	r29, 0x3e	; 62
    10d2:	2c 97       	sbiw	r28, 0x0c	; 12
    10d4:	0f b6       	in	r0, 0x3f	; 63
    10d6:	f8 94       	cli
    10d8:	de bf       	out	0x3e, r29	; 62
    10da:	0f be       	out	0x3f, r0	; 63
    10dc:	cd bf       	out	0x3d, r28	; 61
    10de:	9c 87       	std	Y+12, r25	; 0x0c
    10e0:	8b 87       	std	Y+11, r24	; 0x0b
    10e2:	7a 87       	std	Y+10, r23	; 0x0a
    10e4:	69 87       	std	Y+9, r22	; 0x09
{
  String temp = _buffer;
    10e6:	8b 85       	ldd	r24, Y+11	; 0x0b
    10e8:	9c 85       	ldd	r25, Y+12	; 0x0c
    10ea:	e9 85       	ldd	r30, Y+9	; 0x09
    10ec:	fa 85       	ldd	r31, Y+10	; 0x0a
    10ee:	20 81       	ld	r18, Z
    10f0:	31 81       	ldd	r19, Z+1	; 0x01
    10f2:	b9 01       	movw	r22, r18
    10f4:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>

  for ( unsigned int i = 0; i < _length; i++ )
    10f8:	1a 82       	std	Y+2, r1	; 0x02
    10fa:	19 82       	std	Y+1, r1	; 0x01
    10fc:	00 c0       	rjmp	.+0      	; 0x10fe <_ZNK6String11toUpperCaseEv+0x38>
    temp._buffer[ i ] = (char)toupper( temp._buffer[ i ] );
    10fe:	eb 85       	ldd	r30, Y+11	; 0x0b
    1100:	fc 85       	ldd	r31, Y+12	; 0x0c
    1102:	20 81       	ld	r18, Z
    1104:	31 81       	ldd	r19, Z+1	; 0x01
    1106:	89 81       	ldd	r24, Y+1	; 0x01
    1108:	9a 81       	ldd	r25, Y+2	; 0x02
    110a:	89 01       	movw	r16, r18
    110c:	08 0f       	add	r16, r24
    110e:	19 1f       	adc	r17, r25
    1110:	eb 85       	ldd	r30, Y+11	; 0x0b
    1112:	fc 85       	ldd	r31, Y+12	; 0x0c
    1114:	20 81       	ld	r18, Z
    1116:	31 81       	ldd	r19, Z+1	; 0x01
    1118:	89 81       	ldd	r24, Y+1	; 0x01
    111a:	9a 81       	ldd	r25, Y+2	; 0x02
    111c:	f9 01       	movw	r30, r18
    111e:	e8 0f       	add	r30, r24
    1120:	f9 1f       	adc	r31, r25
    1122:	80 81       	ld	r24, Z
    1124:	88 2f       	mov	r24, r24
    1126:	90 e0       	ldi	r25, 0x00	; 0
    1128:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
    112c:	f8 01       	movw	r30, r16
    112e:	80 83       	st	Z, r24

String String::toUpperCase() const
{
  String temp = _buffer;

  for ( unsigned int i = 0; i < _length; i++ )
    1130:	89 81       	ldd	r24, Y+1	; 0x01
    1132:	9a 81       	ldd	r25, Y+2	; 0x02
    1134:	01 96       	adiw	r24, 0x01	; 1
    1136:	9a 83       	std	Y+2, r25	; 0x02
    1138:	89 83       	std	Y+1, r24	; 0x01
    113a:	e9 85       	ldd	r30, Y+9	; 0x09
    113c:	fa 85       	ldd	r31, Y+10	; 0x0a
    113e:	24 81       	ldd	r18, Z+4	; 0x04
    1140:	35 81       	ldd	r19, Z+5	; 0x05
    1142:	89 81       	ldd	r24, Y+1	; 0x01
    1144:	9a 81       	ldd	r25, Y+2	; 0x02
    1146:	82 17       	cp	r24, r18
    1148:	93 07       	cpc	r25, r19
    114a:	00 f0       	brcs	.+0      	; 0x114c <_ZNK6String11toUpperCaseEv+0x86>
    temp._buffer[ i ] = (char)toupper( temp._buffer[ i ] );
  return temp;
}
    114c:	8b 85       	ldd	r24, Y+11	; 0x0b
    114e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1150:	8b 85       	ldd	r24, Y+11	; 0x0b
    1152:	9c 85       	ldd	r25, Y+12	; 0x0c
    1154:	2c 96       	adiw	r28, 0x0c	; 12
    1156:	0f b6       	in	r0, 0x3f	; 63
    1158:	f8 94       	cli
    115a:	de bf       	out	0x3e, r29	; 62
    115c:	0f be       	out	0x3f, r0	; 63
    115e:	cd bf       	out	0x3d, r28	; 61
    1160:	cf 91       	pop	r28
    1162:	df 91       	pop	r29
    1164:	1f 91       	pop	r17
    1166:	0f 91       	pop	r16
    1168:	08 95       	ret

0000116a <_ZNK6String11toLowerCaseEv>:
  String outPut = ( _buffer + left );  // pointer arithmetic
  _buffer[ right ] = temp;  //restore character
  return outPut;
}

String String::toLowerCase() const
    116a:	0f 93       	push	r16
    116c:	1f 93       	push	r17
    116e:	df 93       	push	r29
    1170:	cf 93       	push	r28
    1172:	cd b7       	in	r28, 0x3d	; 61
    1174:	de b7       	in	r29, 0x3e	; 62
    1176:	2c 97       	sbiw	r28, 0x0c	; 12
    1178:	0f b6       	in	r0, 0x3f	; 63
    117a:	f8 94       	cli
    117c:	de bf       	out	0x3e, r29	; 62
    117e:	0f be       	out	0x3f, r0	; 63
    1180:	cd bf       	out	0x3d, r28	; 61
    1182:	9c 87       	std	Y+12, r25	; 0x0c
    1184:	8b 87       	std	Y+11, r24	; 0x0b
    1186:	7a 87       	std	Y+10, r23	; 0x0a
    1188:	69 87       	std	Y+9, r22	; 0x09
{
  String temp = _buffer;
    118a:	8b 85       	ldd	r24, Y+11	; 0x0b
    118c:	9c 85       	ldd	r25, Y+12	; 0x0c
    118e:	e9 85       	ldd	r30, Y+9	; 0x09
    1190:	fa 85       	ldd	r31, Y+10	; 0x0a
    1192:	20 81       	ld	r18, Z
    1194:	31 81       	ldd	r19, Z+1	; 0x01
    1196:	b9 01       	movw	r22, r18
    1198:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>

  for ( unsigned int i = 0; i < _length; i++ )
    119c:	1a 82       	std	Y+2, r1	; 0x02
    119e:	19 82       	std	Y+1, r1	; 0x01
    11a0:	00 c0       	rjmp	.+0      	; 0x11a2 <_ZNK6String11toLowerCaseEv+0x38>
    temp._buffer[ i ] = (char)tolower( temp._buffer[ i ] );
    11a2:	eb 85       	ldd	r30, Y+11	; 0x0b
    11a4:	fc 85       	ldd	r31, Y+12	; 0x0c
    11a6:	20 81       	ld	r18, Z
    11a8:	31 81       	ldd	r19, Z+1	; 0x01
    11aa:	89 81       	ldd	r24, Y+1	; 0x01
    11ac:	9a 81       	ldd	r25, Y+2	; 0x02
    11ae:	89 01       	movw	r16, r18
    11b0:	08 0f       	add	r16, r24
    11b2:	19 1f       	adc	r17, r25
    11b4:	eb 85       	ldd	r30, Y+11	; 0x0b
    11b6:	fc 85       	ldd	r31, Y+12	; 0x0c
    11b8:	20 81       	ld	r18, Z
    11ba:	31 81       	ldd	r19, Z+1	; 0x01
    11bc:	89 81       	ldd	r24, Y+1	; 0x01
    11be:	9a 81       	ldd	r25, Y+2	; 0x02
    11c0:	f9 01       	movw	r30, r18
    11c2:	e8 0f       	add	r30, r24
    11c4:	f9 1f       	adc	r31, r25
    11c6:	80 81       	ld	r24, Z
    11c8:	88 2f       	mov	r24, r24
    11ca:	90 e0       	ldi	r25, 0x00	; 0
    11cc:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
    11d0:	f8 01       	movw	r30, r16
    11d2:	80 83       	st	Z, r24

String String::toLowerCase() const
{
  String temp = _buffer;

  for ( unsigned int i = 0; i < _length; i++ )
    11d4:	89 81       	ldd	r24, Y+1	; 0x01
    11d6:	9a 81       	ldd	r25, Y+2	; 0x02
    11d8:	01 96       	adiw	r24, 0x01	; 1
    11da:	9a 83       	std	Y+2, r25	; 0x02
    11dc:	89 83       	std	Y+1, r24	; 0x01
    11de:	e9 85       	ldd	r30, Y+9	; 0x09
    11e0:	fa 85       	ldd	r31, Y+10	; 0x0a
    11e2:	24 81       	ldd	r18, Z+4	; 0x04
    11e4:	35 81       	ldd	r19, Z+5	; 0x05
    11e6:	89 81       	ldd	r24, Y+1	; 0x01
    11e8:	9a 81       	ldd	r25, Y+2	; 0x02
    11ea:	82 17       	cp	r24, r18
    11ec:	93 07       	cpc	r25, r19
    11ee:	00 f0       	brcs	.+0      	; 0x11f0 <_ZNK6String11toLowerCaseEv+0x86>
    temp._buffer[ i ] = (char)tolower( temp._buffer[ i ] );
  return temp;
}
    11f0:	8b 85       	ldd	r24, Y+11	; 0x0b
    11f2:	9c 85       	ldd	r25, Y+12	; 0x0c
    11f4:	8b 85       	ldd	r24, Y+11	; 0x0b
    11f6:	9c 85       	ldd	r25, Y+12	; 0x0c
    11f8:	2c 96       	adiw	r28, 0x0c	; 12
    11fa:	0f b6       	in	r0, 0x3f	; 63
    11fc:	f8 94       	cli
    11fe:	de bf       	out	0x3e, r29	; 62
    1200:	0f be       	out	0x3f, r0	; 63
    1202:	cd bf       	out	0x3d, r28	; 61
    1204:	cf 91       	pop	r28
    1206:	df 91       	pop	r29
    1208:	1f 91       	pop	r17
    120a:	0f 91       	pop	r16
    120c:	08 95       	ret

0000120e <_ZNK6String16equalsIgnoreCaseERKS_>:
boolean String::equals( const String &s2 ) const
{
  return ( _length == s2._length && strcmp( _buffer,s2._buffer ) == 0 );
}

boolean String::equalsIgnoreCase( const String &s2 ) const
    120e:	0f 93       	push	r16
    1210:	1f 93       	push	r17
    1212:	df 93       	push	r29
    1214:	cf 93       	push	r28
    1216:	cd b7       	in	r28, 0x3d	; 61
    1218:	de b7       	in	r29, 0x3e	; 62
    121a:	61 97       	sbiw	r28, 0x11	; 17
    121c:	0f b6       	in	r0, 0x3f	; 63
    121e:	f8 94       	cli
    1220:	de bf       	out	0x3e, r29	; 62
    1222:	0f be       	out	0x3f, r0	; 63
    1224:	cd bf       	out	0x3d, r28	; 61
    1226:	9e 87       	std	Y+14, r25	; 0x0e
    1228:	8d 87       	std	Y+13, r24	; 0x0d
    122a:	78 8b       	std	Y+16, r23	; 0x10
    122c:	6f 87       	std	Y+15, r22	; 0x0f
{
  if ( this == &s2 )
    122e:	2d 85       	ldd	r18, Y+13	; 0x0d
    1230:	3e 85       	ldd	r19, Y+14	; 0x0e
    1232:	8f 85       	ldd	r24, Y+15	; 0x0f
    1234:	98 89       	ldd	r25, Y+16	; 0x10
    1236:	28 17       	cp	r18, r24
    1238:	39 07       	cpc	r19, r25
    123a:	01 f4       	brne	.+0      	; 0x123c <_ZNK6String16equalsIgnoreCaseERKS_+0x2e>
    return true; //1;
    123c:	81 e0       	ldi	r24, 0x01	; 1
    123e:	89 8b       	std	Y+17, r24	; 0x11
    1240:	00 c0       	rjmp	.+0      	; 0x1242 <_ZNK6String16equalsIgnoreCaseERKS_+0x34>
  else if ( _length != s2._length )
    1242:	ed 85       	ldd	r30, Y+13	; 0x0d
    1244:	fe 85       	ldd	r31, Y+14	; 0x0e
    1246:	24 81       	ldd	r18, Z+4	; 0x04
    1248:	35 81       	ldd	r19, Z+5	; 0x05
    124a:	ef 85       	ldd	r30, Y+15	; 0x0f
    124c:	f8 89       	ldd	r31, Y+16	; 0x10
    124e:	84 81       	ldd	r24, Z+4	; 0x04
    1250:	95 81       	ldd	r25, Z+5	; 0x05
    1252:	28 17       	cp	r18, r24
    1254:	39 07       	cpc	r19, r25
    1256:	01 f0       	breq	.+0      	; 0x1258 <_ZNK6String16equalsIgnoreCaseERKS_+0x4a>
    return false; //0;
    1258:	19 8a       	std	Y+17, r1	; 0x11
    125a:	00 c0       	rjmp	.+0      	; 0x125c <_ZNK6String16equalsIgnoreCaseERKS_+0x4e>

  return strcmp(toLowerCase()._buffer, s2.toLowerCase()._buffer) == 0;
    125c:	ce 01       	movw	r24, r28
    125e:	07 96       	adiw	r24, 0x07	; 7
    1260:	2d 85       	ldd	r18, Y+13	; 0x0d
    1262:	3e 85       	ldd	r19, Y+14	; 0x0e
    1264:	b9 01       	movw	r22, r18
    1266:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
    126a:	0f 81       	ldd	r16, Y+7	; 0x07
    126c:	18 85       	ldd	r17, Y+8	; 0x08
    126e:	2f 85       	ldd	r18, Y+15	; 0x0f
    1270:	38 89       	ldd	r19, Y+16	; 0x10
    1272:	ce 01       	movw	r24, r28
    1274:	01 96       	adiw	r24, 0x01	; 1
    1276:	b9 01       	movw	r22, r18
    1278:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
    127c:	29 81       	ldd	r18, Y+1	; 0x01
    127e:	3a 81       	ldd	r19, Y+2	; 0x02
    1280:	c8 01       	movw	r24, r16
    1282:	b9 01       	movw	r22, r18
    1284:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
    1288:	19 8a       	std	Y+17, r1	; 0x11
    128a:	00 97       	sbiw	r24, 0x00	; 0
    128c:	01 f4       	brne	.+0      	; 0x128e <_ZNK6String16equalsIgnoreCaseERKS_+0x80>
    128e:	81 e0       	ldi	r24, 0x01	; 1
    1290:	89 8b       	std	Y+17, r24	; 0x11
    1292:	ce 01       	movw	r24, r28
    1294:	01 96       	adiw	r24, 0x01	; 1
    1296:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
    129a:	ce 01       	movw	r24, r28
    129c:	07 96       	adiw	r24, 0x07	; 7
    129e:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
    12a2:	89 89       	ldd	r24, Y+17	; 0x11
}
    12a4:	61 96       	adiw	r28, 0x11	; 17
    12a6:	0f b6       	in	r0, 0x3f	; 63
    12a8:	f8 94       	cli
    12aa:	de bf       	out	0x3e, r29	; 62
    12ac:	0f be       	out	0x3f, r0	; 63
    12ae:	cd bf       	out	0x3d, r28	; 61
    12b0:	cf 91       	pop	r28
    12b2:	df 91       	pop	r29
    12b4:	1f 91       	pop	r17
    12b6:	0f 91       	pop	r16
    12b8:	08 95       	ret

000012ba <_ZNK6String9substringEjj>:
String String::substring( unsigned int left ) const
{
  return substring( left, _length );
}

String String::substring( unsigned int left, unsigned int right ) const
    12ba:	df 93       	push	r29
    12bc:	cf 93       	push	r28
    12be:	cd b7       	in	r28, 0x3d	; 61
    12c0:	de b7       	in	r29, 0x3e	; 62
    12c2:	61 97       	sbiw	r28, 0x11	; 17
    12c4:	0f b6       	in	r0, 0x3f	; 63
    12c6:	f8 94       	cli
    12c8:	de bf       	out	0x3e, r29	; 62
    12ca:	0f be       	out	0x3f, r0	; 63
    12cc:	cd bf       	out	0x3d, r28	; 61
    12ce:	99 8b       	std	Y+17, r25	; 0x11
    12d0:	88 8b       	std	Y+16, r24	; 0x10
    12d2:	7b 87       	std	Y+11, r23	; 0x0b
    12d4:	6a 87       	std	Y+10, r22	; 0x0a
    12d6:	5d 87       	std	Y+13, r21	; 0x0d
    12d8:	4c 87       	std	Y+12, r20	; 0x0c
    12da:	3f 87       	std	Y+15, r19	; 0x0f
    12dc:	2e 87       	std	Y+14, r18	; 0x0e
{
  if ( left > right )
    12de:	2c 85       	ldd	r18, Y+12	; 0x0c
    12e0:	3d 85       	ldd	r19, Y+13	; 0x0d
    12e2:	8e 85       	ldd	r24, Y+14	; 0x0e
    12e4:	9f 85       	ldd	r25, Y+15	; 0x0f
    12e6:	82 17       	cp	r24, r18
    12e8:	93 07       	cpc	r25, r19
    12ea:	00 f4       	brcc	.+0      	; 0x12ec <_ZNK6String9substringEjj+0x32>
  {
    int temp = right;
    12ec:	8e 85       	ldd	r24, Y+14	; 0x0e
    12ee:	9f 85       	ldd	r25, Y+15	; 0x0f
    12f0:	9a 83       	std	Y+2, r25	; 0x02
    12f2:	89 83       	std	Y+1, r24	; 0x01
    right = left;
    12f4:	8c 85       	ldd	r24, Y+12	; 0x0c
    12f6:	9d 85       	ldd	r25, Y+13	; 0x0d
    12f8:	9f 87       	std	Y+15, r25	; 0x0f
    12fa:	8e 87       	std	Y+14, r24	; 0x0e
    left = temp;
    12fc:	89 81       	ldd	r24, Y+1	; 0x01
    12fe:	9a 81       	ldd	r25, Y+2	; 0x02
    1300:	9d 87       	std	Y+13, r25	; 0x0d
    1302:	8c 87       	std	Y+12, r24	; 0x0c
  }

  if ( right > _length )
    1304:	ea 85       	ldd	r30, Y+10	; 0x0a
    1306:	fb 85       	ldd	r31, Y+11	; 0x0b
    1308:	24 81       	ldd	r18, Z+4	; 0x04
    130a:	35 81       	ldd	r19, Z+5	; 0x05
    130c:	8e 85       	ldd	r24, Y+14	; 0x0e
    130e:	9f 85       	ldd	r25, Y+15	; 0x0f
    1310:	28 17       	cp	r18, r24
    1312:	39 07       	cpc	r19, r25
    1314:	00 f4       	brcc	.+0      	; 0x1316 <_ZNK6String9substringEjj+0x5c>
  {
    right = _length;
    1316:	ea 85       	ldd	r30, Y+10	; 0x0a
    1318:	fb 85       	ldd	r31, Y+11	; 0x0b
    131a:	84 81       	ldd	r24, Z+4	; 0x04
    131c:	95 81       	ldd	r25, Z+5	; 0x05
    131e:	9f 87       	std	Y+15, r25	; 0x0f
    1320:	8e 87       	std	Y+14, r24	; 0x0e
  } 

  char temp = _buffer[ right ];  // save the replaced character
    1322:	ea 85       	ldd	r30, Y+10	; 0x0a
    1324:	fb 85       	ldd	r31, Y+11	; 0x0b
    1326:	20 81       	ld	r18, Z
    1328:	31 81       	ldd	r19, Z+1	; 0x01
    132a:	8e 85       	ldd	r24, Y+14	; 0x0e
    132c:	9f 85       	ldd	r25, Y+15	; 0x0f
    132e:	f9 01       	movw	r30, r18
    1330:	e8 0f       	add	r30, r24
    1332:	f9 1f       	adc	r31, r25
    1334:	80 81       	ld	r24, Z
    1336:	8b 83       	std	Y+3, r24	; 0x03
  _buffer[ right ] = '\0';	
    1338:	ea 85       	ldd	r30, Y+10	; 0x0a
    133a:	fb 85       	ldd	r31, Y+11	; 0x0b
    133c:	20 81       	ld	r18, Z
    133e:	31 81       	ldd	r19, Z+1	; 0x01
    1340:	8e 85       	ldd	r24, Y+14	; 0x0e
    1342:	9f 85       	ldd	r25, Y+15	; 0x0f
    1344:	f9 01       	movw	r30, r18
    1346:	e8 0f       	add	r30, r24
    1348:	f9 1f       	adc	r31, r25
    134a:	10 82       	st	Z, r1
  String outPut = ( _buffer + left );  // pointer arithmetic
    134c:	48 89       	ldd	r20, Y+16	; 0x10
    134e:	59 89       	ldd	r21, Y+17	; 0x11
    1350:	ea 85       	ldd	r30, Y+10	; 0x0a
    1352:	fb 85       	ldd	r31, Y+11	; 0x0b
    1354:	20 81       	ld	r18, Z
    1356:	31 81       	ldd	r19, Z+1	; 0x01
    1358:	8c 85       	ldd	r24, Y+12	; 0x0c
    135a:	9d 85       	ldd	r25, Y+13	; 0x0d
    135c:	28 0f       	add	r18, r24
    135e:	39 1f       	adc	r19, r25
    1360:	ca 01       	movw	r24, r20
    1362:	b9 01       	movw	r22, r18
    1364:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
  _buffer[ right ] = temp;  //restore character
    1368:	ea 85       	ldd	r30, Y+10	; 0x0a
    136a:	fb 85       	ldd	r31, Y+11	; 0x0b
    136c:	20 81       	ld	r18, Z
    136e:	31 81       	ldd	r19, Z+1	; 0x01
    1370:	8e 85       	ldd	r24, Y+14	; 0x0e
    1372:	9f 85       	ldd	r25, Y+15	; 0x0f
    1374:	f9 01       	movw	r30, r18
    1376:	e8 0f       	add	r30, r24
    1378:	f9 1f       	adc	r31, r25
    137a:	8b 81       	ldd	r24, Y+3	; 0x03
    137c:	80 83       	st	Z, r24
  return outPut;
}
    137e:	88 89       	ldd	r24, Y+16	; 0x10
    1380:	99 89       	ldd	r25, Y+17	; 0x11
    1382:	88 89       	ldd	r24, Y+16	; 0x10
    1384:	99 89       	ldd	r25, Y+17	; 0x11
    1386:	61 96       	adiw	r28, 0x11	; 17
    1388:	0f b6       	in	r0, 0x3f	; 63
    138a:	f8 94       	cli
    138c:	de bf       	out	0x3e, r29	; 62
    138e:	0f be       	out	0x3f, r0	; 63
    1390:	cd bf       	out	0x3d, r28	; 61
    1392:	cf 91       	pop	r28
    1394:	df 91       	pop	r29
    1396:	08 95       	ret

00001398 <_ZNK6String9substringEj>:
    return 0;

  return strncmp( &_buffer[offset], s2._buffer, s2._length ) == 0;
}

String String::substring( unsigned int left ) const
    1398:	0f 93       	push	r16
    139a:	1f 93       	push	r17
    139c:	df 93       	push	r29
    139e:	cf 93       	push	r28
    13a0:	00 d0       	rcall	.+0      	; 0x13a2 <_ZNK6String9substringEj+0xa>
    13a2:	0f 92       	push	r0
    13a4:	cd b7       	in	r28, 0x3d	; 61
    13a6:	de b7       	in	r29, 0x3e	; 62
    13a8:	8c 01       	movw	r16, r24
    13aa:	7a 83       	std	Y+2, r23	; 0x02
    13ac:	69 83       	std	Y+1, r22	; 0x01
    13ae:	5c 83       	std	Y+4, r21	; 0x04
    13b0:	4b 83       	std	Y+3, r20	; 0x03
{
  return substring( left, _length );
    13b2:	c8 01       	movw	r24, r16
    13b4:	e9 81       	ldd	r30, Y+1	; 0x01
    13b6:	fa 81       	ldd	r31, Y+2	; 0x02
    13b8:	04 80       	ldd	r0, Z+4	; 0x04
    13ba:	f5 81       	ldd	r31, Z+5	; 0x05
    13bc:	e0 2d       	mov	r30, r0
    13be:	29 81       	ldd	r18, Y+1	; 0x01
    13c0:	3a 81       	ldd	r19, Y+2	; 0x02
    13c2:	4b 81       	ldd	r20, Y+3	; 0x03
    13c4:	5c 81       	ldd	r21, Y+4	; 0x04
    13c6:	b9 01       	movw	r22, r18
    13c8:	9f 01       	movw	r18, r30
    13ca:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
}
    13ce:	c8 01       	movw	r24, r16
    13d0:	c8 01       	movw	r24, r16
    13d2:	0f 90       	pop	r0
    13d4:	0f 90       	pop	r0
    13d6:	0f 90       	pop	r0
    13d8:	0f 90       	pop	r0
    13da:	cf 91       	pop	r28
    13dc:	df 91       	pop	r29
    13de:	1f 91       	pop	r17
    13e0:	0f 91       	pop	r16
    13e2:	08 95       	ret

000013e4 <_ZNK6String11lastIndexOfERKS_j>:
int String::lastIndexOf( const String &s2 ) const
{
  return lastIndexOf( s2, _length - s2._length );
}

int String::lastIndexOf( const String &s2, unsigned int fromIndex ) const
    13e4:	df 93       	push	r29
    13e6:	cf 93       	push	r28
    13e8:	cd b7       	in	r28, 0x3d	; 61
    13ea:	de b7       	in	r29, 0x3e	; 62
    13ec:	64 97       	sbiw	r28, 0x14	; 20
    13ee:	0f b6       	in	r0, 0x3f	; 63
    13f0:	f8 94       	cli
    13f2:	de bf       	out	0x3e, r29	; 62
    13f4:	0f be       	out	0x3f, r0	; 63
    13f6:	cd bf       	out	0x3d, r28	; 61
    13f8:	9b 87       	std	Y+11, r25	; 0x0b
    13fa:	8a 87       	std	Y+10, r24	; 0x0a
    13fc:	7d 87       	std	Y+13, r23	; 0x0d
    13fe:	6c 87       	std	Y+12, r22	; 0x0c
    1400:	5f 87       	std	Y+15, r21	; 0x0f
    1402:	4e 87       	std	Y+14, r20	; 0x0e
{
  // check for empty strings
  if ( s2._length == 0 || s2._length - 1 > fromIndex || fromIndex >= _length )
    1404:	ec 85       	ldd	r30, Y+12	; 0x0c
    1406:	fd 85       	ldd	r31, Y+13	; 0x0d
    1408:	84 81       	ldd	r24, Z+4	; 0x04
    140a:	95 81       	ldd	r25, Z+5	; 0x05
    140c:	00 97       	sbiw	r24, 0x00	; 0
    140e:	01 f0       	breq	.+0      	; 0x1410 <_ZNK6String11lastIndexOfERKS_j+0x2c>
    1410:	ec 85       	ldd	r30, Y+12	; 0x0c
    1412:	fd 85       	ldd	r31, Y+13	; 0x0d
    1414:	84 81       	ldd	r24, Z+4	; 0x04
    1416:	95 81       	ldd	r25, Z+5	; 0x05
    1418:	9c 01       	movw	r18, r24
    141a:	21 50       	subi	r18, 0x01	; 1
    141c:	30 40       	sbci	r19, 0x00	; 0
    141e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1420:	9f 85       	ldd	r25, Y+15	; 0x0f
    1422:	82 17       	cp	r24, r18
    1424:	93 07       	cpc	r25, r19
    1426:	00 f0       	brcs	.+0      	; 0x1428 <_ZNK6String11lastIndexOfERKS_j+0x44>
    1428:	ea 85       	ldd	r30, Y+10	; 0x0a
    142a:	fb 85       	ldd	r31, Y+11	; 0x0b
    142c:	24 81       	ldd	r18, Z+4	; 0x04
    142e:	35 81       	ldd	r19, Z+5	; 0x05
    1430:	8e 85       	ldd	r24, Y+14	; 0x0e
    1432:	9f 85       	ldd	r25, Y+15	; 0x0f
    1434:	82 17       	cp	r24, r18
    1436:	93 07       	cpc	r25, r19
    1438:	00 f0       	brcs	.+0      	; 0x143a <_ZNK6String11lastIndexOfERKS_j+0x56>
    return -1;
    143a:	8f ef       	ldi	r24, 0xFF	; 255
    143c:	9f ef       	ldi	r25, 0xFF	; 255
    143e:	9c 8b       	std	Y+20, r25	; 0x14
    1440:	8b 8b       	std	Y+19, r24	; 0x13
    1442:	00 c0       	rjmp	.+0      	; 0x1444 <_ZNK6String11lastIndexOfERKS_j+0x60>

  // matching first character
  char temp = s2[ 0 ];
    1444:	8c 85       	ldd	r24, Y+12	; 0x0c
    1446:	9d 85       	ldd	r25, Y+13	; 0x0d
    1448:	60 e0       	ldi	r22, 0x00	; 0
    144a:	70 e0       	ldi	r23, 0x00	; 0
    144c:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
    1450:	8b 83       	std	Y+3, r24	; 0x03

  for ( int i = fromIndex; i >= 0; i-- )
    1452:	8e 85       	ldd	r24, Y+14	; 0x0e
    1454:	9f 85       	ldd	r25, Y+15	; 0x0f
    1456:	9a 83       	std	Y+2, r25	; 0x02
    1458:	89 83       	std	Y+1, r24	; 0x01
    145a:	00 c0       	rjmp	.+0      	; 0x145c <_ZNK6String11lastIndexOfERKS_j+0x78>
  {
    if ( _buffer[ i ] == temp && (*this).substring( i, i + s2._length ).equals( s2 ) )
    145c:	18 8a       	std	Y+16, r1	; 0x10
    145e:	ea 85       	ldd	r30, Y+10	; 0x0a
    1460:	fb 85       	ldd	r31, Y+11	; 0x0b
    1462:	20 81       	ld	r18, Z
    1464:	31 81       	ldd	r19, Z+1	; 0x01
    1466:	89 81       	ldd	r24, Y+1	; 0x01
    1468:	9a 81       	ldd	r25, Y+2	; 0x02
    146a:	f9 01       	movw	r30, r18
    146c:	e8 0f       	add	r30, r24
    146e:	f9 1f       	adc	r31, r25
    1470:	90 81       	ld	r25, Z
    1472:	8b 81       	ldd	r24, Y+3	; 0x03
    1474:	98 17       	cp	r25, r24
    1476:	01 f4       	brne	.+0      	; 0x1478 <_ZNK6String11lastIndexOfERKS_j+0x94>
    1478:	49 81       	ldd	r20, Y+1	; 0x01
    147a:	5a 81       	ldd	r21, Y+2	; 0x02
    147c:	ec 85       	ldd	r30, Y+12	; 0x0c
    147e:	fd 85       	ldd	r31, Y+13	; 0x0d
    1480:	24 81       	ldd	r18, Z+4	; 0x04
    1482:	35 81       	ldd	r19, Z+5	; 0x05
    1484:	89 81       	ldd	r24, Y+1	; 0x01
    1486:	9a 81       	ldd	r25, Y+2	; 0x02
    1488:	f9 01       	movw	r30, r18
    148a:	e8 0f       	add	r30, r24
    148c:	f9 1f       	adc	r31, r25
    148e:	ce 01       	movw	r24, r28
    1490:	04 96       	adiw	r24, 0x04	; 4
    1492:	2a 85       	ldd	r18, Y+10	; 0x0a
    1494:	3b 85       	ldd	r19, Y+11	; 0x0b
    1496:	b9 01       	movw	r22, r18
    1498:	9f 01       	movw	r18, r30
    149a:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
    149e:	91 e0       	ldi	r25, 0x01	; 1
    14a0:	98 8b       	std	Y+16, r25	; 0x10
    14a2:	ce 01       	movw	r24, r28
    14a4:	04 96       	adiw	r24, 0x04	; 4
    14a6:	2c 85       	ldd	r18, Y+12	; 0x0c
    14a8:	3d 85       	ldd	r19, Y+13	; 0x0d
    14aa:	b9 01       	movw	r22, r18
    14ac:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
    14b0:	88 23       	and	r24, r24
    14b2:	01 f0       	breq	.+0      	; 0x14b4 <_ZNK6String11lastIndexOfERKS_j+0xd0>
    14b4:	81 e0       	ldi	r24, 0x01	; 1
    14b6:	89 8b       	std	Y+17, r24	; 0x11
    14b8:	00 c0       	rjmp	.+0      	; 0x14ba <_ZNK6String11lastIndexOfERKS_j+0xd6>
    14ba:	19 8a       	std	Y+17, r1	; 0x11
    14bc:	99 89       	ldd	r25, Y+17	; 0x11
    14be:	9a 8b       	std	Y+18, r25	; 0x12
    14c0:	88 89       	ldd	r24, Y+16	; 0x10
    14c2:	88 23       	and	r24, r24
    14c4:	01 f0       	breq	.+0      	; 0x14c6 <_ZNK6String11lastIndexOfERKS_j+0xe2>
    14c6:	ce 01       	movw	r24, r28
    14c8:	04 96       	adiw	r24, 0x04	; 4
    14ca:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
    14ce:	9a 89       	ldd	r25, Y+18	; 0x12
    14d0:	99 23       	and	r25, r25
    14d2:	01 f0       	breq	.+0      	; 0x14d4 <_ZNK6String11lastIndexOfERKS_j+0xf0>
    return i;
    14d4:	89 81       	ldd	r24, Y+1	; 0x01
    14d6:	9a 81       	ldd	r25, Y+2	; 0x02
    14d8:	9c 8b       	std	Y+20, r25	; 0x14
    14da:	8b 8b       	std	Y+19, r24	; 0x13
    14dc:	00 c0       	rjmp	.+0      	; 0x14de <_ZNK6String11lastIndexOfERKS_j+0xfa>
    return -1;

  // matching first character
  char temp = s2[ 0 ];

  for ( int i = fromIndex; i >= 0; i-- )
    14de:	89 81       	ldd	r24, Y+1	; 0x01
    14e0:	9a 81       	ldd	r25, Y+2	; 0x02
    14e2:	01 97       	sbiw	r24, 0x01	; 1
    14e4:	9a 83       	std	Y+2, r25	; 0x02
    14e6:	89 83       	std	Y+1, r24	; 0x01
    14e8:	89 81       	ldd	r24, Y+1	; 0x01
    14ea:	9a 81       	ldd	r25, Y+2	; 0x02
    14ec:	99 23       	and	r25, r25
    14ee:	04 f0       	brlt	.+0      	; 0x14f0 <_ZNK6String11lastIndexOfERKS_j+0x10c>
    14f0:	00 c0       	rjmp	.+0      	; 0x14f2 <_ZNK6String11lastIndexOfERKS_j+0x10e>
  {
    if ( _buffer[ i ] == temp && (*this).substring( i, i + s2._length ).equals( s2 ) )
    return i;
  }
  return -1;
    14f2:	8f ef       	ldi	r24, 0xFF	; 255
    14f4:	9f ef       	ldi	r25, 0xFF	; 255
    14f6:	9c 8b       	std	Y+20, r25	; 0x14
    14f8:	8b 8b       	std	Y+19, r24	; 0x13
    14fa:	8b 89       	ldd	r24, Y+19	; 0x13
    14fc:	9c 89       	ldd	r25, Y+20	; 0x14
}
    14fe:	64 96       	adiw	r28, 0x14	; 20
    1500:	0f b6       	in	r0, 0x3f	; 63
    1502:	f8 94       	cli
    1504:	de bf       	out	0x3e, r29	; 62
    1506:	0f be       	out	0x3f, r0	; 63
    1508:	cd bf       	out	0x3d, r28	; 61
    150a:	cf 91       	pop	r28
    150c:	df 91       	pop	r29
    150e:	08 95       	ret

00001510 <_ZNK6String11lastIndexOfERKS_>:
    return -1;

  return temp - _buffer;
}

int String::lastIndexOf( const String &s2 ) const
    1510:	df 93       	push	r29
    1512:	cf 93       	push	r28
    1514:	00 d0       	rcall	.+0      	; 0x1516 <_ZNK6String11lastIndexOfERKS_+0x6>
    1516:	0f 92       	push	r0
    1518:	cd b7       	in	r28, 0x3d	; 61
    151a:	de b7       	in	r29, 0x3e	; 62
    151c:	9a 83       	std	Y+2, r25	; 0x02
    151e:	89 83       	std	Y+1, r24	; 0x01
    1520:	7c 83       	std	Y+4, r23	; 0x04
    1522:	6b 83       	std	Y+3, r22	; 0x03
{
  return lastIndexOf( s2, _length - s2._length );
    1524:	e9 81       	ldd	r30, Y+1	; 0x01
    1526:	fa 81       	ldd	r31, Y+2	; 0x02
    1528:	24 81       	ldd	r18, Z+4	; 0x04
    152a:	35 81       	ldd	r19, Z+5	; 0x05
    152c:	eb 81       	ldd	r30, Y+3	; 0x03
    152e:	fc 81       	ldd	r31, Y+4	; 0x04
    1530:	84 81       	ldd	r24, Z+4	; 0x04
    1532:	95 81       	ldd	r25, Z+5	; 0x05
    1534:	a9 01       	movw	r20, r18
    1536:	48 1b       	sub	r20, r24
    1538:	59 0b       	sbc	r21, r25
    153a:	89 81       	ldd	r24, Y+1	; 0x01
    153c:	9a 81       	ldd	r25, Y+2	; 0x02
    153e:	2b 81       	ldd	r18, Y+3	; 0x03
    1540:	3c 81       	ldd	r19, Y+4	; 0x04
    1542:	b9 01       	movw	r22, r18
    1544:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
}
    1548:	0f 90       	pop	r0
    154a:	0f 90       	pop	r0
    154c:	0f 90       	pop	r0
    154e:	0f 90       	pop	r0
    1550:	cf 91       	pop	r28
    1552:	df 91       	pop	r29
    1554:	08 95       	ret

00001556 <_ZNK6String4trimEv>:
  for ( unsigned int i = 0; i < _length; i++ )
    temp._buffer[ i ] = (char)toupper( temp._buffer[ i ] );
  return temp;
}

String String::trim() const
    1556:	df 93       	push	r29
    1558:	cf 93       	push	r28
    155a:	cd b7       	in	r28, 0x3d	; 61
    155c:	de b7       	in	r29, 0x3e	; 62
    155e:	2e 97       	sbiw	r28, 0x0e	; 14
    1560:	0f b6       	in	r0, 0x3f	; 63
    1562:	f8 94       	cli
    1564:	de bf       	out	0x3e, r29	; 62
    1566:	0f be       	out	0x3f, r0	; 63
    1568:	cd bf       	out	0x3d, r28	; 61
    156a:	9e 87       	std	Y+14, r25	; 0x0e
    156c:	8d 87       	std	Y+13, r24	; 0x0d
    156e:	7c 87       	std	Y+12, r23	; 0x0c
    1570:	6b 87       	std	Y+11, r22	; 0x0b
{
  if ( _buffer == NULL ) return *this;
    1572:	eb 85       	ldd	r30, Y+11	; 0x0b
    1574:	fc 85       	ldd	r31, Y+12	; 0x0c
    1576:	80 81       	ld	r24, Z
    1578:	91 81       	ldd	r25, Z+1	; 0x01
    157a:	00 97       	sbiw	r24, 0x00	; 0
    157c:	01 f4       	brne	.+0      	; 0x157e <_ZNK6String4trimEv+0x28>
    157e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1580:	9e 85       	ldd	r25, Y+14	; 0x0e
    1582:	2b 85       	ldd	r18, Y+11	; 0x0b
    1584:	3c 85       	ldd	r19, Y+12	; 0x0c
    1586:	b9 01       	movw	r22, r18
    1588:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
    158c:	00 c0       	rjmp	.+0      	; 0x158e <_ZNK6String4trimEv+0x38>
  String temp = _buffer;
    158e:	eb 85       	ldd	r30, Y+11	; 0x0b
    1590:	fc 85       	ldd	r31, Y+12	; 0x0c
    1592:	20 81       	ld	r18, Z
    1594:	31 81       	ldd	r19, Z+1	; 0x01
    1596:	ce 01       	movw	r24, r28
    1598:	05 96       	adiw	r24, 0x05	; 5
    159a:	b9 01       	movw	r22, r18
    159c:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
  unsigned int i,j;

  for ( i = 0; i < _length; i++ )
    15a0:	1c 82       	std	Y+4, r1	; 0x04
    15a2:	1b 82       	std	Y+3, r1	; 0x03
    15a4:	00 c0       	rjmp	.+0      	; 0x15a6 <_ZNK6String4trimEv+0x50>
  {
    if ( !isspace(_buffer[i]) )
    15a6:	eb 85       	ldd	r30, Y+11	; 0x0b
    15a8:	fc 85       	ldd	r31, Y+12	; 0x0c
    15aa:	20 81       	ld	r18, Z
    15ac:	31 81       	ldd	r19, Z+1	; 0x01
    15ae:	8b 81       	ldd	r24, Y+3	; 0x03
    15b0:	9c 81       	ldd	r25, Y+4	; 0x04
    15b2:	f9 01       	movw	r30, r18
    15b4:	e8 0f       	add	r30, r24
    15b6:	f9 1f       	adc	r31, r25
    15b8:	80 81       	ld	r24, Z
    15ba:	88 2f       	mov	r24, r24
    15bc:	90 e0       	ldi	r25, 0x00	; 0
    15be:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
    15c2:	00 97       	sbiw	r24, 0x00	; 0
    15c4:	01 f0       	breq	.+0      	; 0x15c6 <_ZNK6String4trimEv+0x70>
{
  if ( _buffer == NULL ) return *this;
  String temp = _buffer;
  unsigned int i,j;

  for ( i = 0; i < _length; i++ )
    15c6:	8b 81       	ldd	r24, Y+3	; 0x03
    15c8:	9c 81       	ldd	r25, Y+4	; 0x04
    15ca:	01 96       	adiw	r24, 0x01	; 1
    15cc:	9c 83       	std	Y+4, r25	; 0x04
    15ce:	8b 83       	std	Y+3, r24	; 0x03
    15d0:	eb 85       	ldd	r30, Y+11	; 0x0b
    15d2:	fc 85       	ldd	r31, Y+12	; 0x0c
    15d4:	24 81       	ldd	r18, Z+4	; 0x04
    15d6:	35 81       	ldd	r19, Z+5	; 0x05
    15d8:	8b 81       	ldd	r24, Y+3	; 0x03
    15da:	9c 81       	ldd	r25, Y+4	; 0x04
    15dc:	82 17       	cp	r24, r18
    15de:	93 07       	cpc	r25, r19
    15e0:	00 f0       	brcs	.+0      	; 0x15e2 <_ZNK6String4trimEv+0x8c>
  {
    if ( !isspace(_buffer[i]) )
      break;
  }

  for ( j = temp._length - 1; j > i; j-- )
    15e2:	89 85       	ldd	r24, Y+9	; 0x09
    15e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    15e6:	01 97       	sbiw	r24, 0x01	; 1
    15e8:	9a 83       	std	Y+2, r25	; 0x02
    15ea:	89 83       	std	Y+1, r24	; 0x01
    15ec:	00 c0       	rjmp	.+0      	; 0x15ee <_ZNK6String4trimEv+0x98>
  {
    if ( !isspace(_buffer[j]) )
    15ee:	eb 85       	ldd	r30, Y+11	; 0x0b
    15f0:	fc 85       	ldd	r31, Y+12	; 0x0c
    15f2:	20 81       	ld	r18, Z
    15f4:	31 81       	ldd	r19, Z+1	; 0x01
    15f6:	89 81       	ldd	r24, Y+1	; 0x01
    15f8:	9a 81       	ldd	r25, Y+2	; 0x02
    15fa:	f9 01       	movw	r30, r18
    15fc:	e8 0f       	add	r30, r24
    15fe:	f9 1f       	adc	r31, r25
    1600:	80 81       	ld	r24, Z
    1602:	88 2f       	mov	r24, r24
    1604:	90 e0       	ldi	r25, 0x00	; 0
    1606:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
    160a:	00 97       	sbiw	r24, 0x00	; 0
    160c:	01 f0       	breq	.+0      	; 0x160e <_ZNK6String4trimEv+0xb8>
  {
    if ( !isspace(_buffer[i]) )
      break;
  }

  for ( j = temp._length - 1; j > i; j-- )
    160e:	89 81       	ldd	r24, Y+1	; 0x01
    1610:	9a 81       	ldd	r25, Y+2	; 0x02
    1612:	01 97       	sbiw	r24, 0x01	; 1
    1614:	9a 83       	std	Y+2, r25	; 0x02
    1616:	89 83       	std	Y+1, r24	; 0x01
    1618:	29 81       	ldd	r18, Y+1	; 0x01
    161a:	3a 81       	ldd	r19, Y+2	; 0x02
    161c:	8b 81       	ldd	r24, Y+3	; 0x03
    161e:	9c 81       	ldd	r25, Y+4	; 0x04
    1620:	82 17       	cp	r24, r18
    1622:	93 07       	cpc	r25, r19
    1624:	00 f0       	brcs	.+0      	; 0x1626 <_ZNK6String4trimEv+0xd0>
  {
    if ( !isspace(_buffer[j]) )
      break;
  }

  return temp.substring( i, j + 1);
    1626:	6d 85       	ldd	r22, Y+13	; 0x0d
    1628:	7e 85       	ldd	r23, Y+14	; 0x0e
    162a:	89 81       	ldd	r24, Y+1	; 0x01
    162c:	9a 81       	ldd	r25, Y+2	; 0x02
    162e:	fc 01       	movw	r30, r24
    1630:	31 96       	adiw	r30, 0x01	; 1
    1632:	9e 01       	movw	r18, r28
    1634:	2b 5f       	subi	r18, 0xFB	; 251
    1636:	3f 4f       	sbci	r19, 0xFF	; 255
    1638:	4b 81       	ldd	r20, Y+3	; 0x03
    163a:	5c 81       	ldd	r21, Y+4	; 0x04
    163c:	cb 01       	movw	r24, r22
    163e:	b9 01       	movw	r22, r18
    1640:	9f 01       	movw	r18, r30
    1642:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
    1646:	ce 01       	movw	r24, r28
    1648:	05 96       	adiw	r24, 0x05	; 5
    164a:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
}
    164e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1650:	9e 85       	ldd	r25, Y+14	; 0x0e
    1652:	8d 85       	ldd	r24, Y+13	; 0x0d
    1654:	9e 85       	ldd	r25, Y+14	; 0x0e
    1656:	2e 96       	adiw	r28, 0x0e	; 14
    1658:	0f b6       	in	r0, 0x3f	; 63
    165a:	f8 94       	cli
    165c:	de bf       	out	0x3e, r29	; 62
    165e:	0f be       	out	0x3f, r0	; 63
    1660:	cd bf       	out	0x3d, r28	; 61
    1662:	cf 91       	pop	r28
    1664:	df 91       	pop	r29
    1666:	08 95       	ret

00001668 <_ZN6String7replaceERKS_S1_>:
    *temp = replaceChar;

  return theReturn;
}

String String::replace( const String& match, const String& replace )
    1668:	df 93       	push	r29
    166a:	cf 93       	push	r28
    166c:	cd b7       	in	r28, 0x3d	; 61
    166e:	de b7       	in	r29, 0x3e	; 62
    1670:	a3 97       	sbiw	r28, 0x23	; 35
    1672:	0f b6       	in	r0, 0x3f	; 63
    1674:	f8 94       	cli
    1676:	de bf       	out	0x3e, r29	; 62
    1678:	0f be       	out	0x3f, r0	; 63
    167a:	cd bf       	out	0x3d, r28	; 61
    167c:	9b a3       	std	Y+35, r25	; 0x23
    167e:	8a a3       	std	Y+34, r24	; 0x22
    1680:	7c 8f       	std	Y+28, r23	; 0x1c
    1682:	6b 8f       	std	Y+27, r22	; 0x1b
    1684:	5e 8f       	std	Y+30, r21	; 0x1e
    1686:	4d 8f       	std	Y+29, r20	; 0x1d
    1688:	38 a3       	std	Y+32, r19	; 0x20
    168a:	2f 8f       	std	Y+31, r18	; 0x1f
{
  if ( _buffer == NULL ) return *this;
    168c:	eb 8d       	ldd	r30, Y+27	; 0x1b
    168e:	fc 8d       	ldd	r31, Y+28	; 0x1c
    1690:	80 81       	ld	r24, Z
    1692:	91 81       	ldd	r25, Z+1	; 0x01
    1694:	00 97       	sbiw	r24, 0x00	; 0
    1696:	01 f4       	brne	.+0      	; 0x1698 <_ZN6String7replaceERKS_S1_+0x30>
    1698:	8a a1       	ldd	r24, Y+34	; 0x22
    169a:	9b a1       	ldd	r25, Y+35	; 0x23
    169c:	2b 8d       	ldd	r18, Y+27	; 0x1b
    169e:	3c 8d       	ldd	r19, Y+28	; 0x1c
    16a0:	b9 01       	movw	r22, r18
    16a2:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
    16a6:	00 c0       	rjmp	.+0      	; 0x16a8 <_ZN6String7replaceERKS_S1_+0x40>
  String temp = _buffer, newString;
    16a8:	eb 8d       	ldd	r30, Y+27	; 0x1b
    16aa:	fc 8d       	ldd	r31, Y+28	; 0x1c
    16ac:	20 81       	ld	r18, Z
    16ae:	31 81       	ldd	r19, Z+1	; 0x01
    16b0:	ce 01       	movw	r24, r28
    16b2:	0f 96       	adiw	r24, 0x0f	; 15
    16b4:	b9 01       	movw	r22, r18
    16b6:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
    16ba:	ce 01       	movw	r24, r28
    16bc:	45 96       	adiw	r24, 0x15	; 21
    16be:	20 e0       	ldi	r18, 0x00	; 0
    16c0:	30 e0       	ldi	r19, 0x00	; 0
    16c2:	b9 01       	movw	r22, r18
    16c4:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
    16c8:	00 c0       	rjmp	.+0      	; 0x16ca <_ZN6String7replaceERKS_S1_+0x62>

  int loc;
  while ( (loc = temp.indexOf( match )) != -1 )
  {
    newString += temp.substring( 0, loc );
    16ca:	e9 81       	ldd	r30, Y+1	; 0x01
    16cc:	fa 81       	ldd	r31, Y+2	; 0x02
    16ce:	ce 01       	movw	r24, r28
    16d0:	09 96       	adiw	r24, 0x09	; 9
    16d2:	9e 01       	movw	r18, r28
    16d4:	21 5f       	subi	r18, 0xF1	; 241
    16d6:	3f 4f       	sbci	r19, 0xFF	; 255
    16d8:	b9 01       	movw	r22, r18
    16da:	40 e0       	ldi	r20, 0x00	; 0
    16dc:	50 e0       	ldi	r21, 0x00	; 0
    16de:	9f 01       	movw	r18, r30
    16e0:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
    16e4:	ce 01       	movw	r24, r28
    16e6:	45 96       	adiw	r24, 0x15	; 21
    16e8:	9e 01       	movw	r18, r28
    16ea:	27 5f       	subi	r18, 0xF7	; 247
    16ec:	3f 4f       	sbci	r19, 0xFF	; 255
    16ee:	b9 01       	movw	r22, r18
    16f0:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
    16f4:	ce 01       	movw	r24, r28
    16f6:	09 96       	adiw	r24, 0x09	; 9
    16f8:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
    newString += replace;
    16fc:	ce 01       	movw	r24, r28
    16fe:	45 96       	adiw	r24, 0x15	; 21
    1700:	2f 8d       	ldd	r18, Y+31	; 0x1f
    1702:	38 a1       	ldd	r19, Y+32	; 0x20
    1704:	b9 01       	movw	r22, r18
    1706:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
    temp = temp.substring( loc + match._length );
    170a:	ed 8d       	ldd	r30, Y+29	; 0x1d
    170c:	fe 8d       	ldd	r31, Y+30	; 0x1e
    170e:	24 81       	ldd	r18, Z+4	; 0x04
    1710:	35 81       	ldd	r19, Z+5	; 0x05
    1712:	89 81       	ldd	r24, Y+1	; 0x01
    1714:	9a 81       	ldd	r25, Y+2	; 0x02
    1716:	a9 01       	movw	r20, r18
    1718:	48 0f       	add	r20, r24
    171a:	59 1f       	adc	r21, r25
    171c:	ce 01       	movw	r24, r28
    171e:	03 96       	adiw	r24, 0x03	; 3
    1720:	9e 01       	movw	r18, r28
    1722:	21 5f       	subi	r18, 0xF1	; 241
    1724:	3f 4f       	sbci	r19, 0xFF	; 255
    1726:	b9 01       	movw	r22, r18
    1728:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
    172c:	ce 01       	movw	r24, r28
    172e:	0f 96       	adiw	r24, 0x0f	; 15
    1730:	9e 01       	movw	r18, r28
    1732:	2d 5f       	subi	r18, 0xFD	; 253
    1734:	3f 4f       	sbci	r19, 0xFF	; 255
    1736:	b9 01       	movw	r22, r18
    1738:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
    173c:	ce 01       	movw	r24, r28
    173e:	03 96       	adiw	r24, 0x03	; 3
    1740:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
{
  if ( _buffer == NULL ) return *this;
  String temp = _buffer, newString;

  int loc;
  while ( (loc = temp.indexOf( match )) != -1 )
    1744:	ce 01       	movw	r24, r28
    1746:	0f 96       	adiw	r24, 0x0f	; 15
    1748:	2d 8d       	ldd	r18, Y+29	; 0x1d
    174a:	3e 8d       	ldd	r19, Y+30	; 0x1e
    174c:	b9 01       	movw	r22, r18
    174e:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
    1752:	9a 83       	std	Y+2, r25	; 0x02
    1754:	89 83       	std	Y+1, r24	; 0x01
    1756:	19 a2       	std	Y+33, r1	; 0x21
    1758:	89 81       	ldd	r24, Y+1	; 0x01
    175a:	9a 81       	ldd	r25, Y+2	; 0x02
    175c:	2f ef       	ldi	r18, 0xFF	; 255
    175e:	8f 3f       	cpi	r24, 0xFF	; 255
    1760:	92 07       	cpc	r25, r18
    1762:	01 f0       	breq	.+0      	; 0x1764 <_ZN6String7replaceERKS_S1_+0xfc>
    1764:	81 e0       	ldi	r24, 0x01	; 1
    1766:	89 a3       	std	Y+33, r24	; 0x21
    1768:	29 a1       	ldd	r18, Y+33	; 0x21
    176a:	22 23       	and	r18, r18
    176c:	01 f0       	breq	.+0      	; 0x176e <_ZN6String7replaceERKS_S1_+0x106>
    176e:	00 c0       	rjmp	.+0      	; 0x1770 <_ZN6String7replaceERKS_S1_+0x108>
  {
    newString += temp.substring( 0, loc );
    newString += replace;
    temp = temp.substring( loc + match._length );
  }
  newString += temp;  
    1770:	ce 01       	movw	r24, r28
    1772:	45 96       	adiw	r24, 0x15	; 21
    1774:	9e 01       	movw	r18, r28
    1776:	21 5f       	subi	r18, 0xF1	; 241
    1778:	3f 4f       	sbci	r19, 0xFF	; 255
    177a:	b9 01       	movw	r22, r18
    177c:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
  return newString;
    1780:	8a a1       	ldd	r24, Y+34	; 0x22
    1782:	9b a1       	ldd	r25, Y+35	; 0x23
    1784:	9e 01       	movw	r18, r28
    1786:	2b 5e       	subi	r18, 0xEB	; 235
    1788:	3f 4f       	sbci	r19, 0xFF	; 255
    178a:	b9 01       	movw	r22, r18
    178c:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
    1790:	ce 01       	movw	r24, r28
    1792:	45 96       	adiw	r24, 0x15	; 21
    1794:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
    1798:	ce 01       	movw	r24, r28
    179a:	0f 96       	adiw	r24, 0x0f	; 15
    179c:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
}
    17a0:	8a a1       	ldd	r24, Y+34	; 0x22
    17a2:	9b a1       	ldd	r25, Y+35	; 0x23
    17a4:	8a a1       	ldd	r24, Y+34	; 0x22
    17a6:	9b a1       	ldd	r25, Y+35	; 0x23
    17a8:	a3 96       	adiw	r28, 0x23	; 35
    17aa:	0f b6       	in	r0, 0x3f	; 63
    17ac:	f8 94       	cli
    17ae:	de bf       	out	0x3e, r29	; 62
    17b0:	0f be       	out	0x3f, r0	; 63
    17b2:	cd bf       	out	0x3d, r28	; 61
    17b4:	cf 91       	pop	r28
    17b6:	df 91       	pop	r29
    17b8:	08 95       	ret

000017ba <_ZN6String7replaceEcc>:
    return false; //0;

  return strcmp(toLowerCase()._buffer, s2.toLowerCase()._buffer) == 0;
}

String String::replace( char findChar, char replaceChar )
    17ba:	df 93       	push	r29
    17bc:	cf 93       	push	r28
    17be:	cd b7       	in	r28, 0x3d	; 61
    17c0:	de b7       	in	r29, 0x3e	; 62
    17c2:	2f 97       	sbiw	r28, 0x0f	; 15
    17c4:	0f b6       	in	r0, 0x3f	; 63
    17c6:	f8 94       	cli
    17c8:	de bf       	out	0x3e, r29	; 62
    17ca:	0f be       	out	0x3f, r0	; 63
    17cc:	cd bf       	out	0x3d, r28	; 61
    17ce:	9f 87       	std	Y+15, r25	; 0x0f
    17d0:	8e 87       	std	Y+14, r24	; 0x0e
    17d2:	7a 87       	std	Y+10, r23	; 0x0a
    17d4:	69 87       	std	Y+9, r22	; 0x09
    17d6:	4b 87       	std	Y+11, r20	; 0x0b
    17d8:	2c 87       	std	Y+12, r18	; 0x0c
{
  if ( _buffer == NULL ) return *this;
    17da:	e9 85       	ldd	r30, Y+9	; 0x09
    17dc:	fa 85       	ldd	r31, Y+10	; 0x0a
    17de:	80 81       	ld	r24, Z
    17e0:	91 81       	ldd	r25, Z+1	; 0x01
    17e2:	00 97       	sbiw	r24, 0x00	; 0
    17e4:	01 f4       	brne	.+0      	; 0x17e6 <_ZN6String7replaceEcc+0x2c>
    17e6:	8e 85       	ldd	r24, Y+14	; 0x0e
    17e8:	9f 85       	ldd	r25, Y+15	; 0x0f
    17ea:	29 85       	ldd	r18, Y+9	; 0x09
    17ec:	3a 85       	ldd	r19, Y+10	; 0x0a
    17ee:	b9 01       	movw	r22, r18
    17f0:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
    17f4:	00 c0       	rjmp	.+0      	; 0x17f6 <_ZN6String7replaceEcc+0x3c>
  String theReturn = _buffer;
    17f6:	e9 85       	ldd	r30, Y+9	; 0x09
    17f8:	fa 85       	ldd	r31, Y+10	; 0x0a
    17fa:	20 81       	ld	r18, Z
    17fc:	31 81       	ldd	r19, Z+1	; 0x01
    17fe:	ce 01       	movw	r24, r28
    1800:	03 96       	adiw	r24, 0x03	; 3
    1802:	b9 01       	movw	r22, r18
    1804:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
  char* temp = theReturn._buffer;
    1808:	8b 81       	ldd	r24, Y+3	; 0x03
    180a:	9c 81       	ldd	r25, Y+4	; 0x04
    180c:	9a 83       	std	Y+2, r25	; 0x02
    180e:	89 83       	std	Y+1, r24	; 0x01
    1810:	00 c0       	rjmp	.+0      	; 0x1812 <_ZN6String7replaceEcc+0x58>
  while( (temp = strchr( temp, findChar )) != 0 )
    *temp = replaceChar;
    1812:	e9 81       	ldd	r30, Y+1	; 0x01
    1814:	fa 81       	ldd	r31, Y+2	; 0x02
    1816:	8c 85       	ldd	r24, Y+12	; 0x0c
    1818:	80 83       	st	Z, r24
String String::replace( char findChar, char replaceChar )
{
  if ( _buffer == NULL ) return *this;
  String theReturn = _buffer;
  char* temp = theReturn._buffer;
  while( (temp = strchr( temp, findChar )) != 0 )
    181a:	8b 85       	ldd	r24, Y+11	; 0x0b
    181c:	28 2f       	mov	r18, r24
    181e:	30 e0       	ldi	r19, 0x00	; 0
    1820:	89 81       	ldd	r24, Y+1	; 0x01
    1822:	9a 81       	ldd	r25, Y+2	; 0x02
    1824:	b9 01       	movw	r22, r18
    1826:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
    182a:	9a 83       	std	Y+2, r25	; 0x02
    182c:	89 83       	std	Y+1, r24	; 0x01
    182e:	1d 86       	std	Y+13, r1	; 0x0d
    1830:	89 81       	ldd	r24, Y+1	; 0x01
    1832:	9a 81       	ldd	r25, Y+2	; 0x02
    1834:	00 97       	sbiw	r24, 0x00	; 0
    1836:	01 f0       	breq	.+0      	; 0x1838 <_ZN6String7replaceEcc+0x7e>
    1838:	81 e0       	ldi	r24, 0x01	; 1
    183a:	8d 87       	std	Y+13, r24	; 0x0d
    183c:	8d 85       	ldd	r24, Y+13	; 0x0d
    183e:	88 23       	and	r24, r24
    1840:	01 f4       	brne	.+0      	; 0x1842 <_ZN6String7replaceEcc+0x88>
    *temp = replaceChar;

  return theReturn;
    1842:	8e 85       	ldd	r24, Y+14	; 0x0e
    1844:	9f 85       	ldd	r25, Y+15	; 0x0f
    1846:	9e 01       	movw	r18, r28
    1848:	2d 5f       	subi	r18, 0xFD	; 253
    184a:	3f 4f       	sbci	r19, 0xFF	; 255
    184c:	b9 01       	movw	r22, r18
    184e:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
    1852:	ce 01       	movw	r24, r28
    1854:	03 96       	adiw	r24, 0x03	; 3
    1856:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
}
    185a:	8e 85       	ldd	r24, Y+14	; 0x0e
    185c:	9f 85       	ldd	r25, Y+15	; 0x0f
    185e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1860:	9f 85       	ldd	r25, Y+15	; 0x0f
    1862:	2f 96       	adiw	r28, 0x0f	; 15
    1864:	0f b6       	in	r0, 0x3f	; 63
    1866:	f8 94       	cli
    1868:	de bf       	out	0x3e, r29	; 62
    186a:	0f be       	out	0x3f, r0	; 63
    186c:	cd bf       	out	0x3d, r28	; 61
    186e:	cf 91       	pop	r28
    1870:	df 91       	pop	r29
    1872:	08 95       	ret

00001874 <_ZN6StringC2EPKc>:
#include <stdlib.h>
#include "WProgram.h"
#include "WString.h"


String::String( const char *value )
    1874:	df 93       	push	r29
    1876:	cf 93       	push	r28
    1878:	00 d0       	rcall	.+0      	; 0x187a <_ZN6StringC2EPKc+0x6>
    187a:	0f 92       	push	r0
    187c:	cd b7       	in	r28, 0x3d	; 61
    187e:	de b7       	in	r29, 0x3e	; 62
    1880:	9a 83       	std	Y+2, r25	; 0x02
    1882:	89 83       	std	Y+1, r24	; 0x01
    1884:	7c 83       	std	Y+4, r23	; 0x04
    1886:	6b 83       	std	Y+3, r22	; 0x03
{
  if ( value == NULL )
    1888:	8b 81       	ldd	r24, Y+3	; 0x03
    188a:	9c 81       	ldd	r25, Y+4	; 0x04
    188c:	00 97       	sbiw	r24, 0x00	; 0
    188e:	01 f4       	brne	.+0      	; 0x1890 <_ZN6StringC2EPKc+0x1c>
    value = "";
    1890:	80 e0       	ldi	r24, 0x00	; 0
    1892:	90 e0       	ldi	r25, 0x00	; 0
    1894:	9c 83       	std	Y+4, r25	; 0x04
    1896:	8b 83       	std	Y+3, r24	; 0x03
  getBuffer( _length = strlen( value ) );
    1898:	8b 81       	ldd	r24, Y+3	; 0x03
    189a:	9c 81       	ldd	r25, Y+4	; 0x04
    189c:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
    18a0:	e9 81       	ldd	r30, Y+1	; 0x01
    18a2:	fa 81       	ldd	r31, Y+2	; 0x02
    18a4:	95 83       	std	Z+5, r25	; 0x05
    18a6:	84 83       	std	Z+4, r24	; 0x04
    18a8:	e9 81       	ldd	r30, Y+1	; 0x01
    18aa:	fa 81       	ldd	r31, Y+2	; 0x02
    18ac:	24 81       	ldd	r18, Z+4	; 0x04
    18ae:	35 81       	ldd	r19, Z+5	; 0x05
    18b0:	89 81       	ldd	r24, Y+1	; 0x01
    18b2:	9a 81       	ldd	r25, Y+2	; 0x02
    18b4:	b9 01       	movw	r22, r18
    18b6:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
  if ( _buffer != NULL )
    18ba:	e9 81       	ldd	r30, Y+1	; 0x01
    18bc:	fa 81       	ldd	r31, Y+2	; 0x02
    18be:	80 81       	ld	r24, Z
    18c0:	91 81       	ldd	r25, Z+1	; 0x01
    18c2:	00 97       	sbiw	r24, 0x00	; 0
    18c4:	01 f0       	breq	.+0      	; 0x18c6 <_ZN6StringC2EPKc+0x52>
    strcpy( _buffer, value );
    18c6:	e9 81       	ldd	r30, Y+1	; 0x01
    18c8:	fa 81       	ldd	r31, Y+2	; 0x02
    18ca:	80 81       	ld	r24, Z
    18cc:	91 81       	ldd	r25, Z+1	; 0x01
    18ce:	2b 81       	ldd	r18, Y+3	; 0x03
    18d0:	3c 81       	ldd	r19, Y+4	; 0x04
    18d2:	b9 01       	movw	r22, r18
    18d4:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
}
    18d8:	0f 90       	pop	r0
    18da:	0f 90       	pop	r0
    18dc:	0f 90       	pop	r0
    18de:	0f 90       	pop	r0
    18e0:	cf 91       	pop	r28
    18e2:	df 91       	pop	r29
    18e4:	08 95       	ret

000018e6 <_ZN6StringC1Eli>:
  getBuffer( _length = strlen(buf) );
  if ( _buffer != NULL )
    strcpy( _buffer, buf );
}

String::String( const long value, const int base )
    18e6:	df 93       	push	r29
    18e8:	cf 93       	push	r28
    18ea:	cd b7       	in	r28, 0x3d	; 61
    18ec:	de b7       	in	r29, 0x3e	; 62
    18ee:	a9 97       	sbiw	r28, 0x29	; 41
    18f0:	0f b6       	in	r0, 0x3f	; 63
    18f2:	f8 94       	cli
    18f4:	de bf       	out	0x3e, r29	; 62
    18f6:	0f be       	out	0x3f, r0	; 63
    18f8:	cd bf       	out	0x3d, r28	; 61
    18fa:	9b a3       	std	Y+35, r25	; 0x23
    18fc:	8a a3       	std	Y+34, r24	; 0x22
    18fe:	4c a3       	std	Y+36, r20	; 0x24
    1900:	5d a3       	std	Y+37, r21	; 0x25
    1902:	6e a3       	std	Y+38, r22	; 0x26
    1904:	7f a3       	std	Y+39, r23	; 0x27
    1906:	39 a7       	std	Y+41, r19	; 0x29
    1908:	28 a7       	std	Y+40, r18	; 0x28
{
  char buf[33];   
  ltoa(value, buf, base);
    190a:	8c a1       	ldd	r24, Y+36	; 0x24
    190c:	9d a1       	ldd	r25, Y+37	; 0x25
    190e:	ae a1       	ldd	r26, Y+38	; 0x26
    1910:	bf a1       	ldd	r27, Y+39	; 0x27
    1912:	e8 a5       	ldd	r30, Y+40	; 0x28
    1914:	f9 a5       	ldd	r31, Y+41	; 0x29
    1916:	bc 01       	movw	r22, r24
    1918:	cd 01       	movw	r24, r26
    191a:	9e 01       	movw	r18, r28
    191c:	2f 5f       	subi	r18, 0xFF	; 255
    191e:	3f 4f       	sbci	r19, 0xFF	; 255
    1920:	a9 01       	movw	r20, r18
    1922:	9f 01       	movw	r18, r30
    1924:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
  getBuffer( _length = strlen(buf) );
    1928:	ce 01       	movw	r24, r28
    192a:	01 96       	adiw	r24, 0x01	; 1
    192c:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
    1930:	ea a1       	ldd	r30, Y+34	; 0x22
    1932:	fb a1       	ldd	r31, Y+35	; 0x23
    1934:	95 83       	std	Z+5, r25	; 0x05
    1936:	84 83       	std	Z+4, r24	; 0x04
    1938:	ea a1       	ldd	r30, Y+34	; 0x22
    193a:	fb a1       	ldd	r31, Y+35	; 0x23
    193c:	24 81       	ldd	r18, Z+4	; 0x04
    193e:	35 81       	ldd	r19, Z+5	; 0x05
    1940:	8a a1       	ldd	r24, Y+34	; 0x22
    1942:	9b a1       	ldd	r25, Y+35	; 0x23
    1944:	b9 01       	movw	r22, r18
    1946:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
  if ( _buffer != NULL )
    194a:	ea a1       	ldd	r30, Y+34	; 0x22
    194c:	fb a1       	ldd	r31, Y+35	; 0x23
    194e:	80 81       	ld	r24, Z
    1950:	91 81       	ldd	r25, Z+1	; 0x01
    1952:	00 97       	sbiw	r24, 0x00	; 0
    1954:	01 f0       	breq	.+0      	; 0x1956 <_ZN6StringC1Eli+0x70>
    strcpy( _buffer, buf );
    1956:	ea a1       	ldd	r30, Y+34	; 0x22
    1958:	fb a1       	ldd	r31, Y+35	; 0x23
    195a:	80 81       	ld	r24, Z
    195c:	91 81       	ldd	r25, Z+1	; 0x01
    195e:	9e 01       	movw	r18, r28
    1960:	2f 5f       	subi	r18, 0xFF	; 255
    1962:	3f 4f       	sbci	r19, 0xFF	; 255
    1964:	b9 01       	movw	r22, r18
    1966:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
}
    196a:	a9 96       	adiw	r28, 0x29	; 41
    196c:	0f b6       	in	r0, 0x3f	; 63
    196e:	f8 94       	cli
    1970:	de bf       	out	0x3e, r29	; 62
    1972:	0f be       	out	0x3f, r0	; 63
    1974:	cd bf       	out	0x3d, r28	; 61
    1976:	cf 91       	pop	r28
    1978:	df 91       	pop	r29
    197a:	08 95       	ret

0000197c <_ZN6StringC2Eli>:
  getBuffer( _length = strlen(buf) );
  if ( _buffer != NULL )
    strcpy( _buffer, buf );
}

String::String( const long value, const int base )
    197c:	df 93       	push	r29
    197e:	cf 93       	push	r28
    1980:	cd b7       	in	r28, 0x3d	; 61
    1982:	de b7       	in	r29, 0x3e	; 62
    1984:	a9 97       	sbiw	r28, 0x29	; 41
    1986:	0f b6       	in	r0, 0x3f	; 63
    1988:	f8 94       	cli
    198a:	de bf       	out	0x3e, r29	; 62
    198c:	0f be       	out	0x3f, r0	; 63
    198e:	cd bf       	out	0x3d, r28	; 61
    1990:	9b a3       	std	Y+35, r25	; 0x23
    1992:	8a a3       	std	Y+34, r24	; 0x22
    1994:	4c a3       	std	Y+36, r20	; 0x24
    1996:	5d a3       	std	Y+37, r21	; 0x25
    1998:	6e a3       	std	Y+38, r22	; 0x26
    199a:	7f a3       	std	Y+39, r23	; 0x27
    199c:	39 a7       	std	Y+41, r19	; 0x29
    199e:	28 a7       	std	Y+40, r18	; 0x28
{
  char buf[33];   
  ltoa(value, buf, base);
    19a0:	8c a1       	ldd	r24, Y+36	; 0x24
    19a2:	9d a1       	ldd	r25, Y+37	; 0x25
    19a4:	ae a1       	ldd	r26, Y+38	; 0x26
    19a6:	bf a1       	ldd	r27, Y+39	; 0x27
    19a8:	e8 a5       	ldd	r30, Y+40	; 0x28
    19aa:	f9 a5       	ldd	r31, Y+41	; 0x29
    19ac:	bc 01       	movw	r22, r24
    19ae:	cd 01       	movw	r24, r26
    19b0:	9e 01       	movw	r18, r28
    19b2:	2f 5f       	subi	r18, 0xFF	; 255
    19b4:	3f 4f       	sbci	r19, 0xFF	; 255
    19b6:	a9 01       	movw	r20, r18
    19b8:	9f 01       	movw	r18, r30
    19ba:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
  getBuffer( _length = strlen(buf) );
    19be:	ce 01       	movw	r24, r28
    19c0:	01 96       	adiw	r24, 0x01	; 1
    19c2:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
    19c6:	ea a1       	ldd	r30, Y+34	; 0x22
    19c8:	fb a1       	ldd	r31, Y+35	; 0x23
    19ca:	95 83       	std	Z+5, r25	; 0x05
    19cc:	84 83       	std	Z+4, r24	; 0x04
    19ce:	ea a1       	ldd	r30, Y+34	; 0x22
    19d0:	fb a1       	ldd	r31, Y+35	; 0x23
    19d2:	24 81       	ldd	r18, Z+4	; 0x04
    19d4:	35 81       	ldd	r19, Z+5	; 0x05
    19d6:	8a a1       	ldd	r24, Y+34	; 0x22
    19d8:	9b a1       	ldd	r25, Y+35	; 0x23
    19da:	b9 01       	movw	r22, r18
    19dc:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
  if ( _buffer != NULL )
    19e0:	ea a1       	ldd	r30, Y+34	; 0x22
    19e2:	fb a1       	ldd	r31, Y+35	; 0x23
    19e4:	80 81       	ld	r24, Z
    19e6:	91 81       	ldd	r25, Z+1	; 0x01
    19e8:	00 97       	sbiw	r24, 0x00	; 0
    19ea:	01 f0       	breq	.+0      	; 0x19ec <_ZN6StringC2Eli+0x70>
    strcpy( _buffer, buf );
    19ec:	ea a1       	ldd	r30, Y+34	; 0x22
    19ee:	fb a1       	ldd	r31, Y+35	; 0x23
    19f0:	80 81       	ld	r24, Z
    19f2:	91 81       	ldd	r25, Z+1	; 0x01
    19f4:	9e 01       	movw	r18, r28
    19f6:	2f 5f       	subi	r18, 0xFF	; 255
    19f8:	3f 4f       	sbci	r19, 0xFF	; 255
    19fa:	b9 01       	movw	r22, r18
    19fc:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
}
    1a00:	a9 96       	adiw	r28, 0x29	; 41
    1a02:	0f b6       	in	r0, 0x3f	; 63
    1a04:	f8 94       	cli
    1a06:	de bf       	out	0x3e, r29	; 62
    1a08:	0f be       	out	0x3f, r0	; 63
    1a0a:	cd bf       	out	0x3d, r28	; 61
    1a0c:	cf 91       	pop	r28
    1a0e:	df 91       	pop	r29
    1a10:	08 95       	ret

00001a12 <_ZN6StringC1Eii>:
    _buffer[0] = value;
    _buffer[1] = 0;
  }
}

String::String( const int value, const int base )
    1a12:	df 93       	push	r29
    1a14:	cf 93       	push	r28
    1a16:	cd b7       	in	r28, 0x3d	; 61
    1a18:	de b7       	in	r29, 0x3e	; 62
    1a1a:	a7 97       	sbiw	r28, 0x27	; 39
    1a1c:	0f b6       	in	r0, 0x3f	; 63
    1a1e:	f8 94       	cli
    1a20:	de bf       	out	0x3e, r29	; 62
    1a22:	0f be       	out	0x3f, r0	; 63
    1a24:	cd bf       	out	0x3d, r28	; 61
    1a26:	9b a3       	std	Y+35, r25	; 0x23
    1a28:	8a a3       	std	Y+34, r24	; 0x22
    1a2a:	7d a3       	std	Y+37, r23	; 0x25
    1a2c:	6c a3       	std	Y+36, r22	; 0x24
    1a2e:	5f a3       	std	Y+39, r21	; 0x27
    1a30:	4e a3       	std	Y+38, r20	; 0x26
{
  char buf[33];   
  itoa((signed long)value, buf, base);
    1a32:	8c a1       	ldd	r24, Y+36	; 0x24
    1a34:	9d a1       	ldd	r25, Y+37	; 0x25
    1a36:	4e a1       	ldd	r20, Y+38	; 0x26
    1a38:	5f a1       	ldd	r21, Y+39	; 0x27
    1a3a:	9e 01       	movw	r18, r28
    1a3c:	2f 5f       	subi	r18, 0xFF	; 255
    1a3e:	3f 4f       	sbci	r19, 0xFF	; 255
    1a40:	b9 01       	movw	r22, r18
    1a42:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
  getBuffer( _length = strlen(buf) );
    1a46:	ce 01       	movw	r24, r28
    1a48:	01 96       	adiw	r24, 0x01	; 1
    1a4a:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
    1a4e:	ea a1       	ldd	r30, Y+34	; 0x22
    1a50:	fb a1       	ldd	r31, Y+35	; 0x23
    1a52:	95 83       	std	Z+5, r25	; 0x05
    1a54:	84 83       	std	Z+4, r24	; 0x04
    1a56:	ea a1       	ldd	r30, Y+34	; 0x22
    1a58:	fb a1       	ldd	r31, Y+35	; 0x23
    1a5a:	24 81       	ldd	r18, Z+4	; 0x04
    1a5c:	35 81       	ldd	r19, Z+5	; 0x05
    1a5e:	8a a1       	ldd	r24, Y+34	; 0x22
    1a60:	9b a1       	ldd	r25, Y+35	; 0x23
    1a62:	b9 01       	movw	r22, r18
    1a64:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
  if ( _buffer != NULL )
    1a68:	ea a1       	ldd	r30, Y+34	; 0x22
    1a6a:	fb a1       	ldd	r31, Y+35	; 0x23
    1a6c:	80 81       	ld	r24, Z
    1a6e:	91 81       	ldd	r25, Z+1	; 0x01
    1a70:	00 97       	sbiw	r24, 0x00	; 0
    1a72:	01 f0       	breq	.+0      	; 0x1a74 <_ZN6StringC1Eii+0x62>
    strcpy( _buffer, buf );
    1a74:	ea a1       	ldd	r30, Y+34	; 0x22
    1a76:	fb a1       	ldd	r31, Y+35	; 0x23
    1a78:	80 81       	ld	r24, Z
    1a7a:	91 81       	ldd	r25, Z+1	; 0x01
    1a7c:	9e 01       	movw	r18, r28
    1a7e:	2f 5f       	subi	r18, 0xFF	; 255
    1a80:	3f 4f       	sbci	r19, 0xFF	; 255
    1a82:	b9 01       	movw	r22, r18
    1a84:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
}
    1a88:	a7 96       	adiw	r28, 0x27	; 39
    1a8a:	0f b6       	in	r0, 0x3f	; 63
    1a8c:	f8 94       	cli
    1a8e:	de bf       	out	0x3e, r29	; 62
    1a90:	0f be       	out	0x3f, r0	; 63
    1a92:	cd bf       	out	0x3d, r28	; 61
    1a94:	cf 91       	pop	r28
    1a96:	df 91       	pop	r29
    1a98:	08 95       	ret

00001a9a <_ZN6StringC2Eii>:
    _buffer[0] = value;
    _buffer[1] = 0;
  }
}

String::String( const int value, const int base )
    1a9a:	df 93       	push	r29
    1a9c:	cf 93       	push	r28
    1a9e:	cd b7       	in	r28, 0x3d	; 61
    1aa0:	de b7       	in	r29, 0x3e	; 62
    1aa2:	a7 97       	sbiw	r28, 0x27	; 39
    1aa4:	0f b6       	in	r0, 0x3f	; 63
    1aa6:	f8 94       	cli
    1aa8:	de bf       	out	0x3e, r29	; 62
    1aaa:	0f be       	out	0x3f, r0	; 63
    1aac:	cd bf       	out	0x3d, r28	; 61
    1aae:	9b a3       	std	Y+35, r25	; 0x23
    1ab0:	8a a3       	std	Y+34, r24	; 0x22
    1ab2:	7d a3       	std	Y+37, r23	; 0x25
    1ab4:	6c a3       	std	Y+36, r22	; 0x24
    1ab6:	5f a3       	std	Y+39, r21	; 0x27
    1ab8:	4e a3       	std	Y+38, r20	; 0x26
{
  char buf[33];   
  itoa((signed long)value, buf, base);
    1aba:	8c a1       	ldd	r24, Y+36	; 0x24
    1abc:	9d a1       	ldd	r25, Y+37	; 0x25
    1abe:	4e a1       	ldd	r20, Y+38	; 0x26
    1ac0:	5f a1       	ldd	r21, Y+39	; 0x27
    1ac2:	9e 01       	movw	r18, r28
    1ac4:	2f 5f       	subi	r18, 0xFF	; 255
    1ac6:	3f 4f       	sbci	r19, 0xFF	; 255
    1ac8:	b9 01       	movw	r22, r18
    1aca:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
  getBuffer( _length = strlen(buf) );
    1ace:	ce 01       	movw	r24, r28
    1ad0:	01 96       	adiw	r24, 0x01	; 1
    1ad2:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
    1ad6:	ea a1       	ldd	r30, Y+34	; 0x22
    1ad8:	fb a1       	ldd	r31, Y+35	; 0x23
    1ada:	95 83       	std	Z+5, r25	; 0x05
    1adc:	84 83       	std	Z+4, r24	; 0x04
    1ade:	ea a1       	ldd	r30, Y+34	; 0x22
    1ae0:	fb a1       	ldd	r31, Y+35	; 0x23
    1ae2:	24 81       	ldd	r18, Z+4	; 0x04
    1ae4:	35 81       	ldd	r19, Z+5	; 0x05
    1ae6:	8a a1       	ldd	r24, Y+34	; 0x22
    1ae8:	9b a1       	ldd	r25, Y+35	; 0x23
    1aea:	b9 01       	movw	r22, r18
    1aec:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
  if ( _buffer != NULL )
    1af0:	ea a1       	ldd	r30, Y+34	; 0x22
    1af2:	fb a1       	ldd	r31, Y+35	; 0x23
    1af4:	80 81       	ld	r24, Z
    1af6:	91 81       	ldd	r25, Z+1	; 0x01
    1af8:	00 97       	sbiw	r24, 0x00	; 0
    1afa:	01 f0       	breq	.+0      	; 0x1afc <_ZN6StringC2Eii+0x62>
    strcpy( _buffer, buf );
    1afc:	ea a1       	ldd	r30, Y+34	; 0x22
    1afe:	fb a1       	ldd	r31, Y+35	; 0x23
    1b00:	80 81       	ld	r24, Z
    1b02:	91 81       	ldd	r25, Z+1	; 0x01
    1b04:	9e 01       	movw	r18, r28
    1b06:	2f 5f       	subi	r18, 0xFF	; 255
    1b08:	3f 4f       	sbci	r19, 0xFF	; 255
    1b0a:	b9 01       	movw	r22, r18
    1b0c:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
}
    1b10:	a7 96       	adiw	r28, 0x27	; 39
    1b12:	0f b6       	in	r0, 0x3f	; 63
    1b14:	f8 94       	cli
    1b16:	de bf       	out	0x3e, r29	; 62
    1b18:	0f be       	out	0x3f, r0	; 63
    1b1a:	cd bf       	out	0x3d, r28	; 61
    1b1c:	cf 91       	pop	r28
    1b1e:	df 91       	pop	r29
    1b20:	08 95       	ret

main.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000016  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  1 .data         00000000  00000000  00000000  0000004a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  0000004a  2**0
                  ALLOC
  3 .stab         000004c8  00000000  00000000  0000004c  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00000a4a  00000000  00000000  00000514  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <main>:
#include <WProgram.h>

int main(void)
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	cd b7       	in	r28, 0x3d	; 61
   6:	de b7       	in	r29, 0x3e	; 62
{
	init();
   8:	0e 94 00 00 	call	0	; 0x0 <main>

	setup();
   c:	0e 94 00 00 	call	0	; 0x0 <main>
    
	for (;;)
		loop();
  10:	0e 94 00 00 	call	0	; 0x0 <main>
  14:	00 c0       	rjmp	.+0      	; 0x16 <__zero_reg__+0x15>

pins_arduino.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000038  2**0
                  ALLOC
  3 .stab         00000534  00000000  00000000  00000038  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00000c84  00000000  00000000  0000056c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .progmem.data 00000120  00000000  00000000  000011f0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA

wiring.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000041c  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000450  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  00000000  00000000  00000450  2**0
                  ALLOC
  3 .stab         00000894  00000000  00000000  00000450  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00000afd  00000000  00000000  00000ce4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vector_23>:
volatile unsigned long timer0_overflow_count = 0;
volatile unsigned long timer0_millis = 0;
static unsigned char timer0_fract = 0;

SIGNAL(TIMER0_OVF_vect)
{
   0:	1f 92       	push	r1
   2:	0f 92       	push	r0
   4:	0f b6       	in	r0, 0x3f	; 63
   6:	0f 92       	push	r0
   8:	11 24       	eor	r1, r1
   a:	8f 93       	push	r24
   c:	9f 93       	push	r25
   e:	af 93       	push	r26
  10:	bf 93       	push	r27
  12:	df 93       	push	r29
  14:	cf 93       	push	r28
  16:	00 d0       	rcall	.+0      	; 0x18 <__vector_23+0x18>
  18:	0f 92       	push	r0
  1a:	0f 92       	push	r0
  1c:	cd b7       	in	r28, 0x3d	; 61
  1e:	de b7       	in	r29, 0x3e	; 62
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
  20:	80 91 00 00 	lds	r24, 0x0000
  24:	90 91 00 00 	lds	r25, 0x0000
  28:	a0 91 00 00 	lds	r26, 0x0000
  2c:	b0 91 00 00 	lds	r27, 0x0000
  30:	8a 83       	std	Y+2, r24	; 0x02
  32:	9b 83       	std	Y+3, r25	; 0x03
  34:	ac 83       	std	Y+4, r26	; 0x04
  36:	bd 83       	std	Y+5, r27	; 0x05
	unsigned char f = timer0_fract;
  38:	80 91 00 00 	lds	r24, 0x0000
  3c:	89 83       	std	Y+1, r24	; 0x01

	m += MILLIS_INC;
  3e:	8a 81       	ldd	r24, Y+2	; 0x02
  40:	9b 81       	ldd	r25, Y+3	; 0x03
  42:	ac 81       	ldd	r26, Y+4	; 0x04
  44:	bd 81       	ldd	r27, Y+5	; 0x05
  46:	01 96       	adiw	r24, 0x01	; 1
  48:	a1 1d       	adc	r26, r1
  4a:	b1 1d       	adc	r27, r1
  4c:	8a 83       	std	Y+2, r24	; 0x02
  4e:	9b 83       	std	Y+3, r25	; 0x03
  50:	ac 83       	std	Y+4, r26	; 0x04
  52:	bd 83       	std	Y+5, r27	; 0x05
	f += FRACT_INC;
  54:	89 81       	ldd	r24, Y+1	; 0x01
  56:	8d 5f       	subi	r24, 0xFD	; 253
  58:	89 83       	std	Y+1, r24	; 0x01
	if (f >= FRACT_MAX) {
  5a:	89 81       	ldd	r24, Y+1	; 0x01
  5c:	8d 37       	cpi	r24, 0x7D	; 125
  5e:	00 f0       	brcs	.+0      	; 0x60 <__vector_23+0x60>
		f -= FRACT_MAX;
  60:	89 81       	ldd	r24, Y+1	; 0x01
  62:	8d 57       	subi	r24, 0x7D	; 125
  64:	89 83       	std	Y+1, r24	; 0x01
		m += 1;
  66:	8a 81       	ldd	r24, Y+2	; 0x02
  68:	9b 81       	ldd	r25, Y+3	; 0x03
  6a:	ac 81       	ldd	r26, Y+4	; 0x04
  6c:	bd 81       	ldd	r27, Y+5	; 0x05
  6e:	01 96       	adiw	r24, 0x01	; 1
  70:	a1 1d       	adc	r26, r1
  72:	b1 1d       	adc	r27, r1
  74:	8a 83       	std	Y+2, r24	; 0x02
  76:	9b 83       	std	Y+3, r25	; 0x03
  78:	ac 83       	std	Y+4, r26	; 0x04
  7a:	bd 83       	std	Y+5, r27	; 0x05
	}

	timer0_fract = f;
  7c:	89 81       	ldd	r24, Y+1	; 0x01
  7e:	80 93 00 00 	sts	0x0000, r24
	timer0_millis = m;
  82:	8a 81       	ldd	r24, Y+2	; 0x02
  84:	9b 81       	ldd	r25, Y+3	; 0x03
  86:	ac 81       	ldd	r26, Y+4	; 0x04
  88:	bd 81       	ldd	r27, Y+5	; 0x05
  8a:	80 93 00 00 	sts	0x0000, r24
  8e:	90 93 00 00 	sts	0x0000, r25
  92:	a0 93 00 00 	sts	0x0000, r26
  96:	b0 93 00 00 	sts	0x0000, r27
	timer0_overflow_count++;
  9a:	80 91 00 00 	lds	r24, 0x0000
  9e:	90 91 00 00 	lds	r25, 0x0000
  a2:	a0 91 00 00 	lds	r26, 0x0000
  a6:	b0 91 00 00 	lds	r27, 0x0000
  aa:	01 96       	adiw	r24, 0x01	; 1
  ac:	a1 1d       	adc	r26, r1
  ae:	b1 1d       	adc	r27, r1
  b0:	80 93 00 00 	sts	0x0000, r24
  b4:	90 93 00 00 	sts	0x0000, r25
  b8:	a0 93 00 00 	sts	0x0000, r26
  bc:	b0 93 00 00 	sts	0x0000, r27
}
  c0:	0f 90       	pop	r0
  c2:	0f 90       	pop	r0
  c4:	0f 90       	pop	r0
  c6:	0f 90       	pop	r0
  c8:	0f 90       	pop	r0
  ca:	cf 91       	pop	r28
  cc:	df 91       	pop	r29
  ce:	bf 91       	pop	r27
  d0:	af 91       	pop	r26
  d2:	9f 91       	pop	r25
  d4:	8f 91       	pop	r24
  d6:	0f 90       	pop	r0
  d8:	0f be       	out	0x3f, r0	; 63
  da:	0f 90       	pop	r0
  dc:	1f 90       	pop	r1
  de:	18 95       	reti

000000e0 <millis>:

unsigned long millis()
{
  e0:	df 93       	push	r29
  e2:	cf 93       	push	r28
  e4:	00 d0       	rcall	.+0      	; 0xe6 <millis+0x6>
  e6:	0f 92       	push	r0
  e8:	0f 92       	push	r0
  ea:	cd b7       	in	r28, 0x3d	; 61
  ec:	de b7       	in	r29, 0x3e	; 62
	unsigned long m;
	uint8_t oldSREG = SREG;
  ee:	ef e5       	ldi	r30, 0x5F	; 95
  f0:	f0 e0       	ldi	r31, 0x00	; 0
  f2:	80 81       	ld	r24, Z
  f4:	89 83       	std	Y+1, r24	; 0x01

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
  f6:	f8 94       	cli
	m = timer0_millis;
  f8:	80 91 00 00 	lds	r24, 0x0000
  fc:	90 91 00 00 	lds	r25, 0x0000
 100:	a0 91 00 00 	lds	r26, 0x0000
 104:	b0 91 00 00 	lds	r27, 0x0000
 108:	8a 83       	std	Y+2, r24	; 0x02
 10a:	9b 83       	std	Y+3, r25	; 0x03
 10c:	ac 83       	std	Y+4, r26	; 0x04
 10e:	bd 83       	std	Y+5, r27	; 0x05
	SREG = oldSREG;
 110:	ef e5       	ldi	r30, 0x5F	; 95
 112:	f0 e0       	ldi	r31, 0x00	; 0
 114:	89 81       	ldd	r24, Y+1	; 0x01
 116:	80 83       	st	Z, r24

	return m;
 118:	8a 81       	ldd	r24, Y+2	; 0x02
 11a:	9b 81       	ldd	r25, Y+3	; 0x03
 11c:	ac 81       	ldd	r26, Y+4	; 0x04
 11e:	bd 81       	ldd	r27, Y+5	; 0x05
}
 120:	bc 01       	movw	r22, r24
 122:	cd 01       	movw	r24, r26
 124:	0f 90       	pop	r0
 126:	0f 90       	pop	r0
 128:	0f 90       	pop	r0
 12a:	0f 90       	pop	r0
 12c:	0f 90       	pop	r0
 12e:	cf 91       	pop	r28
 130:	df 91       	pop	r29
 132:	08 95       	ret

00000134 <micros>:

unsigned long micros() {
 134:	df 93       	push	r29
 136:	cf 93       	push	r28
 138:	00 d0       	rcall	.+0      	; 0x13a <micros+0x6>
 13a:	00 d0       	rcall	.+0      	; 0x13c <micros+0x8>
 13c:	cd b7       	in	r28, 0x3d	; 61
 13e:	de b7       	in	r29, 0x3e	; 62
	unsigned long m;
	uint8_t oldSREG = SREG, t;
 140:	ef e5       	ldi	r30, 0x5F	; 95
 142:	f0 e0       	ldi	r31, 0x00	; 0
 144:	80 81       	ld	r24, Z
 146:	8a 83       	std	Y+2, r24	; 0x02
	
	cli();
 148:	f8 94       	cli
	m = timer0_overflow_count;
 14a:	80 91 00 00 	lds	r24, 0x0000
 14e:	90 91 00 00 	lds	r25, 0x0000
 152:	a0 91 00 00 	lds	r26, 0x0000
 156:	b0 91 00 00 	lds	r27, 0x0000
 15a:	8b 83       	std	Y+3, r24	; 0x03
 15c:	9c 83       	std	Y+4, r25	; 0x04
 15e:	ad 83       	std	Y+5, r26	; 0x05
 160:	be 83       	std	Y+6, r27	; 0x06
#if defined(TCNT0)
	t = TCNT0;
 162:	e6 e4       	ldi	r30, 0x46	; 70
 164:	f0 e0       	ldi	r31, 0x00	; 0
 166:	80 81       	ld	r24, Z
 168:	89 83       	std	Y+1, r24	; 0x01
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
 16a:	e5 e3       	ldi	r30, 0x35	; 53
 16c:	f0 e0       	ldi	r31, 0x00	; 0
 16e:	80 81       	ld	r24, Z
 170:	88 2f       	mov	r24, r24
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	81 70       	andi	r24, 0x01	; 1
 176:	90 70       	andi	r25, 0x00	; 0
 178:	88 23       	and	r24, r24
 17a:	01 f0       	breq	.+0      	; 0x17c <micros+0x48>
 17c:	89 81       	ldd	r24, Y+1	; 0x01
 17e:	8f 3f       	cpi	r24, 0xFF	; 255
 180:	01 f0       	breq	.+0      	; 0x182 <micros+0x4e>
		m++;
 182:	8b 81       	ldd	r24, Y+3	; 0x03
 184:	9c 81       	ldd	r25, Y+4	; 0x04
 186:	ad 81       	ldd	r26, Y+5	; 0x05
 188:	be 81       	ldd	r27, Y+6	; 0x06
 18a:	01 96       	adiw	r24, 0x01	; 1
 18c:	a1 1d       	adc	r26, r1
 18e:	b1 1d       	adc	r27, r1
 190:	8b 83       	std	Y+3, r24	; 0x03
 192:	9c 83       	std	Y+4, r25	; 0x04
 194:	ad 83       	std	Y+5, r26	; 0x05
 196:	be 83       	std	Y+6, r27	; 0x06
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
 198:	ef e5       	ldi	r30, 0x5F	; 95
 19a:	f0 e0       	ldi	r31, 0x00	; 0
 19c:	8a 81       	ldd	r24, Y+2	; 0x02
 19e:	80 83       	st	Z, r24
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
 1a0:	8b 81       	ldd	r24, Y+3	; 0x03
 1a2:	9c 81       	ldd	r25, Y+4	; 0x04
 1a4:	ad 81       	ldd	r26, Y+5	; 0x05
 1a6:	be 81       	ldd	r27, Y+6	; 0x06
 1a8:	22 27       	eor	r18, r18
 1aa:	38 2f       	mov	r19, r24
 1ac:	49 2f       	mov	r20, r25
 1ae:	5a 2f       	mov	r21, r26
 1b0:	89 81       	ldd	r24, Y+1	; 0x01
 1b2:	88 2f       	mov	r24, r24
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	a0 e0       	ldi	r26, 0x00	; 0
 1b8:	b0 e0       	ldi	r27, 0x00	; 0
 1ba:	82 0f       	add	r24, r18
 1bc:	93 1f       	adc	r25, r19
 1be:	a4 1f       	adc	r26, r20
 1c0:	b5 1f       	adc	r27, r21
 1c2:	88 0f       	add	r24, r24
 1c4:	99 1f       	adc	r25, r25
 1c6:	aa 1f       	adc	r26, r26
 1c8:	bb 1f       	adc	r27, r27
 1ca:	88 0f       	add	r24, r24
 1cc:	99 1f       	adc	r25, r25
 1ce:	aa 1f       	adc	r26, r26
 1d0:	bb 1f       	adc	r27, r27
}
 1d2:	bc 01       	movw	r22, r24
 1d4:	cd 01       	movw	r24, r26
 1d6:	26 96       	adiw	r28, 0x06	; 6
 1d8:	0f b6       	in	r0, 0x3f	; 63
 1da:	f8 94       	cli
 1dc:	de bf       	out	0x3e, r29	; 62
 1de:	0f be       	out	0x3f, r0	; 63
 1e0:	cd bf       	out	0x3d, r28	; 61
 1e2:	cf 91       	pop	r28
 1e4:	df 91       	pop	r29
 1e6:	08 95       	ret

000001e8 <delay>:

void delay(unsigned long ms)
{
 1e8:	df 93       	push	r29
 1ea:	cf 93       	push	r28
 1ec:	00 d0       	rcall	.+0      	; 0x1ee <delay+0x6>
 1ee:	00 d0       	rcall	.+0      	; 0x1f0 <delay+0x8>
 1f0:	cd b7       	in	r28, 0x3d	; 61
 1f2:	de b7       	in	r29, 0x3e	; 62
 1f4:	6b 83       	std	Y+3, r22	; 0x03
 1f6:	7c 83       	std	Y+4, r23	; 0x04
 1f8:	8d 83       	std	Y+5, r24	; 0x05
 1fa:	9e 83       	std	Y+6, r25	; 0x06
	uint16_t start = (uint16_t)micros();
 1fc:	0e 94 00 00 	call	0	; 0x0 <__vector_23>
 200:	dc 01       	movw	r26, r24
 202:	cb 01       	movw	r24, r22
 204:	9a 83       	std	Y+2, r25	; 0x02
 206:	89 83       	std	Y+1, r24	; 0x01
 208:	00 c0       	rjmp	.+0      	; 0x20a <delay+0x22>

	while (ms > 0) {
		if (((uint16_t)micros() - start) >= 1000) {
 20a:	0e 94 00 00 	call	0	; 0x0 <__vector_23>
 20e:	dc 01       	movw	r26, r24
 210:	cb 01       	movw	r24, r22
 212:	9c 01       	movw	r18, r24
 214:	89 81       	ldd	r24, Y+1	; 0x01
 216:	9a 81       	ldd	r25, Y+2	; 0x02
 218:	a9 01       	movw	r20, r18
 21a:	48 1b       	sub	r20, r24
 21c:	59 0b       	sbc	r21, r25
 21e:	ca 01       	movw	r24, r20
 220:	53 e0       	ldi	r21, 0x03	; 3
 222:	88 3e       	cpi	r24, 0xE8	; 232
 224:	95 07       	cpc	r25, r21
 226:	00 f0       	brcs	.+0      	; 0x228 <delay+0x40>
			ms--;
 228:	8b 81       	ldd	r24, Y+3	; 0x03
 22a:	9c 81       	ldd	r25, Y+4	; 0x04
 22c:	ad 81       	ldd	r26, Y+5	; 0x05
 22e:	be 81       	ldd	r27, Y+6	; 0x06
 230:	01 97       	sbiw	r24, 0x01	; 1
 232:	a1 09       	sbc	r26, r1
 234:	b1 09       	sbc	r27, r1
 236:	8b 83       	std	Y+3, r24	; 0x03
 238:	9c 83       	std	Y+4, r25	; 0x04
 23a:	ad 83       	std	Y+5, r26	; 0x05
 23c:	be 83       	std	Y+6, r27	; 0x06
			start += 1000;
 23e:	89 81       	ldd	r24, Y+1	; 0x01
 240:	9a 81       	ldd	r25, Y+2	; 0x02
 242:	88 51       	subi	r24, 0x18	; 24
 244:	9c 4f       	sbci	r25, 0xFC	; 252
 246:	9a 83       	std	Y+2, r25	; 0x02
 248:	89 83       	std	Y+1, r24	; 0x01

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
 24a:	8b 81       	ldd	r24, Y+3	; 0x03
 24c:	9c 81       	ldd	r25, Y+4	; 0x04
 24e:	ad 81       	ldd	r26, Y+5	; 0x05
 250:	be 81       	ldd	r27, Y+6	; 0x06
 252:	00 97       	sbiw	r24, 0x00	; 0
 254:	a1 05       	cpc	r26, r1
 256:	b1 05       	cpc	r27, r1
 258:	01 f4       	brne	.+0      	; 0x25a <delay+0x72>
		if (((uint16_t)micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
 25a:	26 96       	adiw	r28, 0x06	; 6
 25c:	0f b6       	in	r0, 0x3f	; 63
 25e:	f8 94       	cli
 260:	de bf       	out	0x3e, r29	; 62
 262:	0f be       	out	0x3f, r0	; 63
 264:	cd bf       	out	0x3d, r28	; 61
 266:	cf 91       	pop	r28
 268:	df 91       	pop	r29
 26a:	08 95       	ret

0000026c <delayMicroseconds>:

/* Delay for the given number of microseconds.  Assumes a 8 or 16 MHz clock. */
void delayMicroseconds(unsigned int us)
{
 26c:	df 93       	push	r29
 26e:	cf 93       	push	r28
 270:	0f 92       	push	r0
 272:	0f 92       	push	r0
 274:	cd b7       	in	r28, 0x3d	; 61
 276:	de b7       	in	r29, 0x3e	; 62
 278:	9a 83       	std	Y+2, r25	; 0x02
 27a:	89 83       	std	Y+1, r24	; 0x01
#if F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call yields a delay of approximately 1 1/8 us.
	if (--us == 0)
 27c:	89 81       	ldd	r24, Y+1	; 0x01
 27e:	9a 81       	ldd	r25, Y+2	; 0x02
 280:	01 97       	sbiw	r24, 0x01	; 1
 282:	9a 83       	std	Y+2, r25	; 0x02
 284:	89 83       	std	Y+1, r24	; 0x01
 286:	89 81       	ldd	r24, Y+1	; 0x01
 288:	9a 81       	ldd	r25, Y+2	; 0x02
 28a:	00 97       	sbiw	r24, 0x00	; 0
 28c:	01 f0       	breq	.+0      	; 0x28e <delayMicroseconds+0x22>
		return;

	// the following loop takes a quarter of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2;
 28e:	89 81       	ldd	r24, Y+1	; 0x01
 290:	9a 81       	ldd	r25, Y+2	; 0x02
 292:	88 0f       	add	r24, r24
 294:	99 1f       	adc	r25, r25
 296:	88 0f       	add	r24, r24
 298:	99 1f       	adc	r25, r25
 29a:	9a 83       	std	Y+2, r25	; 0x02
 29c:	89 83       	std	Y+1, r24	; 0x01

	// account for the time taken in the preceeding commands.
	us -= 2;
 29e:	89 81       	ldd	r24, Y+1	; 0x01
 2a0:	9a 81       	ldd	r25, Y+2	; 0x02
 2a2:	02 97       	sbiw	r24, 0x02	; 2
 2a4:	9a 83       	std	Y+2, r25	; 0x02
 2a6:	89 83       	std	Y+1, r24	; 0x01
	// we can't subtract any more than this or we'd overflow w/ small delays.
	us--;
#endif

	// busy wait
	__asm__ __volatile__ (
 2a8:	89 81       	ldd	r24, Y+1	; 0x01
 2aa:	9a 81       	ldd	r25, Y+2	; 0x02
 2ac:	01 97       	sbiw	r24, 0x01	; 1
 2ae:	01 f4       	brne	.+0      	; 0x2b0 <delayMicroseconds+0x44>
 2b0:	9a 83       	std	Y+2, r25	; 0x02
 2b2:	89 83       	std	Y+1, r24	; 0x01
		"1: sbiw %0,1" "\n\t" // 2 cycles
		"brne 1b" : "=w" (us) : "0" (us) // 2 cycles
	);
}
 2b4:	0f 90       	pop	r0
 2b6:	0f 90       	pop	r0
 2b8:	cf 91       	pop	r28
 2ba:	df 91       	pop	r29
 2bc:	08 95       	ret

000002be <init>:

void init()
{
 2be:	df 93       	push	r29
 2c0:	cf 93       	push	r28
 2c2:	cd b7       	in	r28, 0x3d	; 61
 2c4:	de b7       	in	r29, 0x3e	; 62
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 2c6:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 2c8:	a4 e4       	ldi	r26, 0x44	; 68
 2ca:	b0 e0       	ldi	r27, 0x00	; 0
 2cc:	e4 e4       	ldi	r30, 0x44	; 68
 2ce:	f0 e0       	ldi	r31, 0x00	; 0
 2d0:	80 81       	ld	r24, Z
 2d2:	82 60       	ori	r24, 0x02	; 2
 2d4:	8c 93       	st	X, r24
	sbi(TCCR0A, WGM00);
 2d6:	a4 e4       	ldi	r26, 0x44	; 68
 2d8:	b0 e0       	ldi	r27, 0x00	; 0
 2da:	e4 e4       	ldi	r30, 0x44	; 68
 2dc:	f0 e0       	ldi	r31, 0x00	; 0
 2de:	80 81       	ld	r24, Z
 2e0:	81 60       	ori	r24, 0x01	; 1
 2e2:	8c 93       	st	X, r24
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 2e4:	a5 e4       	ldi	r26, 0x45	; 69
 2e6:	b0 e0       	ldi	r27, 0x00	; 0
 2e8:	e5 e4       	ldi	r30, 0x45	; 69
 2ea:	f0 e0       	ldi	r31, 0x00	; 0
 2ec:	80 81       	ld	r24, Z
 2ee:	82 60       	ori	r24, 0x02	; 2
 2f0:	8c 93       	st	X, r24
	sbi(TCCR0B, CS00);
 2f2:	a5 e4       	ldi	r26, 0x45	; 69
 2f4:	b0 e0       	ldi	r27, 0x00	; 0
 2f6:	e5 e4       	ldi	r30, 0x45	; 69
 2f8:	f0 e0       	ldi	r31, 0x00	; 0
 2fa:	80 81       	ld	r24, Z
 2fc:	81 60       	ori	r24, 0x01	; 1
 2fe:	8c 93       	st	X, r24

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 300:	ae e6       	ldi	r26, 0x6E	; 110
 302:	b0 e0       	ldi	r27, 0x00	; 0
 304:	ee e6       	ldi	r30, 0x6E	; 110
 306:	f0 e0       	ldi	r31, 0x00	; 0
 308:	80 81       	ld	r24, Z
 30a:	81 60       	ori	r24, 0x01	; 1
 30c:	8c 93       	st	X, r24
	// timers 1 and 2 are used for phase-correct hardware pwm
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

	TCCR1B = 0;
 30e:	e1 e8       	ldi	r30, 0x81	; 129
 310:	f0 e0       	ldi	r31, 0x00	; 0
 312:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	sbi(TCCR1B, CS11);
 314:	a1 e8       	ldi	r26, 0x81	; 129
 316:	b0 e0       	ldi	r27, 0x00	; 0
 318:	e1 e8       	ldi	r30, 0x81	; 129
 31a:	f0 e0       	ldi	r31, 0x00	; 0
 31c:	80 81       	ld	r24, Z
 31e:	82 60       	ori	r24, 0x02	; 2
 320:	8c 93       	st	X, r24
	sbi(TCCR1B, CS10);
 322:	a1 e8       	ldi	r26, 0x81	; 129
 324:	b0 e0       	ldi	r27, 0x00	; 0
 326:	e1 e8       	ldi	r30, 0x81	; 129
 328:	f0 e0       	ldi	r31, 0x00	; 0
 32a:	80 81       	ld	r24, Z
 32c:	81 60       	ori	r24, 0x01	; 1
 32e:	8c 93       	st	X, r24
	sbi(TCCR1, CS11);
	sbi(TCCR1, CS10);
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 330:	a0 e8       	ldi	r26, 0x80	; 128
 332:	b0 e0       	ldi	r27, 0x00	; 0
 334:	e0 e8       	ldi	r30, 0x80	; 128
 336:	f0 e0       	ldi	r31, 0x00	; 0
 338:	80 81       	ld	r24, Z
 33a:	81 60       	ori	r24, 0x01	; 1
 33c:	8c 93       	st	X, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 33e:	a1 eb       	ldi	r26, 0xB1	; 177
 340:	b0 e0       	ldi	r27, 0x00	; 0
 342:	e1 eb       	ldi	r30, 0xB1	; 177
 344:	f0 e0       	ldi	r31, 0x00	; 0
 346:	80 81       	ld	r24, Z
 348:	84 60       	ori	r24, 0x04	; 4
 34a:	8c 93       	st	X, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 34c:	a0 eb       	ldi	r26, 0xB0	; 176
 34e:	b0 e0       	ldi	r27, 0x00	; 0
 350:	e0 eb       	ldi	r30, 0xB0	; 176
 352:	f0 e0       	ldi	r31, 0x00	; 0
 354:	80 81       	ld	r24, Z
 356:	81 60       	ori	r24, 0x01	; 1
 358:	8c 93       	st	X, r24
#else
	#warning Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
 35a:	a1 e9       	ldi	r26, 0x91	; 145
 35c:	b0 e0       	ldi	r27, 0x00	; 0
 35e:	e1 e9       	ldi	r30, 0x91	; 145
 360:	f0 e0       	ldi	r31, 0x00	; 0
 362:	80 81       	ld	r24, Z
 364:	82 60       	ori	r24, 0x02	; 2
 366:	8c 93       	st	X, r24
	sbi(TCCR3B, CS30);
 368:	a1 e9       	ldi	r26, 0x91	; 145
 36a:	b0 e0       	ldi	r27, 0x00	; 0
 36c:	e1 e9       	ldi	r30, 0x91	; 145
 36e:	f0 e0       	ldi	r31, 0x00	; 0
 370:	80 81       	ld	r24, Z
 372:	81 60       	ori	r24, 0x01	; 1
 374:	8c 93       	st	X, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
 376:	a0 e9       	ldi	r26, 0x90	; 144
 378:	b0 e0       	ldi	r27, 0x00	; 0
 37a:	e0 e9       	ldi	r30, 0x90	; 144
 37c:	f0 e0       	ldi	r31, 0x00	; 0
 37e:	80 81       	ld	r24, Z
 380:	81 60       	ori	r24, 0x01	; 1
 382:	8c 93       	st	X, r24
#endif
	
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
 384:	a1 ea       	ldi	r26, 0xA1	; 161
 386:	b0 e0       	ldi	r27, 0x00	; 0
 388:	e1 ea       	ldi	r30, 0xA1	; 161
 38a:	f0 e0       	ldi	r31, 0x00	; 0
 38c:	80 81       	ld	r24, Z
 38e:	82 60       	ori	r24, 0x02	; 2
 390:	8c 93       	st	X, r24
	sbi(TCCR4B, CS40);
 392:	a1 ea       	ldi	r26, 0xA1	; 161
 394:	b0 e0       	ldi	r27, 0x00	; 0
 396:	e1 ea       	ldi	r30, 0xA1	; 161
 398:	f0 e0       	ldi	r31, 0x00	; 0
 39a:	80 81       	ld	r24, Z
 39c:	81 60       	ori	r24, 0x01	; 1
 39e:	8c 93       	st	X, r24
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
 3a0:	a0 ea       	ldi	r26, 0xA0	; 160
 3a2:	b0 e0       	ldi	r27, 0x00	; 0
 3a4:	e0 ea       	ldi	r30, 0xA0	; 160
 3a6:	f0 e0       	ldi	r31, 0x00	; 0
 3a8:	80 81       	ld	r24, Z
 3aa:	81 60       	ori	r24, 0x01	; 1
 3ac:	8c 93       	st	X, r24
#endif

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
	sbi(TCCR5B, CS51);		// set timer 5 prescale factor to 64
 3ae:	a1 e2       	ldi	r26, 0x21	; 33
 3b0:	b1 e0       	ldi	r27, 0x01	; 1
 3b2:	e1 e2       	ldi	r30, 0x21	; 33
 3b4:	f1 e0       	ldi	r31, 0x01	; 1
 3b6:	80 81       	ld	r24, Z
 3b8:	82 60       	ori	r24, 0x02	; 2
 3ba:	8c 93       	st	X, r24
	sbi(TCCR5B, CS50);
 3bc:	a1 e2       	ldi	r26, 0x21	; 33
 3be:	b1 e0       	ldi	r27, 0x01	; 1
 3c0:	e1 e2       	ldi	r30, 0x21	; 33
 3c2:	f1 e0       	ldi	r31, 0x01	; 1
 3c4:	80 81       	ld	r24, Z
 3c6:	81 60       	ori	r24, 0x01	; 1
 3c8:	8c 93       	st	X, r24
	sbi(TCCR5A, WGM50);		// put timer 5 in 8-bit phase correct pwm mode
 3ca:	a0 e2       	ldi	r26, 0x20	; 32
 3cc:	b1 e0       	ldi	r27, 0x01	; 1
 3ce:	e0 e2       	ldi	r30, 0x20	; 32
 3d0:	f1 e0       	ldi	r31, 0x01	; 1
 3d2:	80 81       	ld	r24, Z
 3d4:	81 60       	ori	r24, 0x01	; 1
 3d6:	8c 93       	st	X, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
 3d8:	aa e7       	ldi	r26, 0x7A	; 122
 3da:	b0 e0       	ldi	r27, 0x00	; 0
 3dc:	ea e7       	ldi	r30, 0x7A	; 122
 3de:	f0 e0       	ldi	r31, 0x00	; 0
 3e0:	80 81       	ld	r24, Z
 3e2:	84 60       	ori	r24, 0x04	; 4
 3e4:	8c 93       	st	X, r24
	sbi(ADCSRA, ADPS1);
 3e6:	aa e7       	ldi	r26, 0x7A	; 122
 3e8:	b0 e0       	ldi	r27, 0x00	; 0
 3ea:	ea e7       	ldi	r30, 0x7A	; 122
 3ec:	f0 e0       	ldi	r31, 0x00	; 0
 3ee:	80 81       	ld	r24, Z
 3f0:	82 60       	ori	r24, 0x02	; 2
 3f2:	8c 93       	st	X, r24
	sbi(ADCSRA, ADPS0);
 3f4:	aa e7       	ldi	r26, 0x7A	; 122
 3f6:	b0 e0       	ldi	r27, 0x00	; 0
 3f8:	ea e7       	ldi	r30, 0x7A	; 122
 3fa:	f0 e0       	ldi	r31, 0x00	; 0
 3fc:	80 81       	ld	r24, Z
 3fe:	81 60       	ori	r24, 0x01	; 1
 400:	8c 93       	st	X, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 402:	aa e7       	ldi	r26, 0x7A	; 122
 404:	b0 e0       	ldi	r27, 0x00	; 0
 406:	ea e7       	ldi	r30, 0x7A	; 122
 408:	f0 e0       	ldi	r31, 0x00	; 0
 40a:	80 81       	ld	r24, Z
 40c:	80 68       	ori	r24, 0x80	; 128
 40e:	8c 93       	st	X, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 410:	e1 ec       	ldi	r30, 0xC1	; 193
 412:	f0 e0       	ldi	r31, 0x00	; 0
 414:	10 82       	st	Z, r1
#endif
}
 416:	cf 91       	pop	r28
 418:	df 91       	pop	r29
 41a:	08 95       	ret

wiring_analog.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003d0  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  1 .data         00000005  00000000  00000000  00000404  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000409  2**0
                  ALLOC
  3 .stab         00000834  00000000  00000000  0000040c  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00000c53  00000000  00000000  00000c40  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <analogReference>:
#include "pins_arduino.h"

uint8_t analog_reference = DEFAULT;

void analogReference(uint8_t mode)
{
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	0f 92       	push	r0
   6:	cd b7       	in	r28, 0x3d	; 61
   8:	de b7       	in	r29, 0x3e	; 62
   a:	89 83       	std	Y+1, r24	; 0x01
	// can't actually set the register here because the default setting
	// will connect AVCC and the AREF pin, which would cause a short if
	// there's something connected to AREF.
	analog_reference = mode;
   c:	89 81       	ldd	r24, Y+1	; 0x01
   e:	80 93 00 00 	sts	0x0000, r24
}
  12:	0f 90       	pop	r0
  14:	cf 91       	pop	r28
  16:	df 91       	pop	r29
  18:	08 95       	ret

0000001a <analogRead>:

int analogRead(uint8_t pin)
{
  1a:	df 93       	push	r29
  1c:	cf 93       	push	r28
  1e:	00 d0       	rcall	.+0      	; 0x20 <analogRead+0x6>
  20:	cd b7       	in	r28, 0x3d	; 61
  22:	de b7       	in	r29, 0x3e	; 62
  24:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t low, high;

#if defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__)
	if (pin >= 54) pin -= 54; // allow for channel or pin numbers
  26:	8b 81       	ldd	r24, Y+3	; 0x03
  28:	86 33       	cpi	r24, 0x36	; 54
  2a:	00 f0       	brcs	.+0      	; 0x2c <analogRead+0x12>
  2c:	8b 81       	ldd	r24, Y+3	; 0x03
  2e:	86 53       	subi	r24, 0x36	; 54
  30:	8b 83       	std	Y+3, r24	; 0x03
#endif

#if defined(ADCSRB) && defined(MUX5)
	// the MUX5 bit of ADCSRB selects whether we're reading from channels
	// 0 to 7 (MUX5 low) or 8 to 15 (MUX5 high).
	ADCSRB = (ADCSRB & ~(1 << MUX5)) | (((pin >> 3) & 0x01) << MUX5);
  32:	ab e7       	ldi	r26, 0x7B	; 123
  34:	b0 e0       	ldi	r27, 0x00	; 0
  36:	eb e7       	ldi	r30, 0x7B	; 123
  38:	f0 e0       	ldi	r31, 0x00	; 0
  3a:	80 81       	ld	r24, Z
  3c:	28 2f       	mov	r18, r24
  3e:	27 7f       	andi	r18, 0xF7	; 247
  40:	8b 81       	ldd	r24, Y+3	; 0x03
  42:	86 95       	lsr	r24
  44:	86 95       	lsr	r24
  46:	86 95       	lsr	r24
  48:	88 2f       	mov	r24, r24
  4a:	90 e0       	ldi	r25, 0x00	; 0
  4c:	81 70       	andi	r24, 0x01	; 1
  4e:	90 70       	andi	r25, 0x00	; 0
  50:	88 0f       	add	r24, r24
  52:	99 1f       	adc	r25, r25
  54:	88 0f       	add	r24, r24
  56:	99 1f       	adc	r25, r25
  58:	88 0f       	add	r24, r24
  5a:	99 1f       	adc	r25, r25
  5c:	82 2b       	or	r24, r18
  5e:	8c 93       	st	X, r24
  
	// set the analog reference (high two bits of ADMUX) and select the
	// channel (low 4 bits).  this also sets ADLAR (left-adjust result)
	// to 0 (the default).
#if defined(ADMUX)
	ADMUX = (analog_reference << 6) | (pin & 0x07);
  60:	ec e7       	ldi	r30, 0x7C	; 124
  62:	f0 e0       	ldi	r31, 0x00	; 0
  64:	80 91 00 00 	lds	r24, 0x0000
  68:	88 2f       	mov	r24, r24
  6a:	90 e0       	ldi	r25, 0x00	; 0
  6c:	00 24       	eor	r0, r0
  6e:	96 95       	lsr	r25
  70:	87 95       	ror	r24
  72:	07 94       	ror	r0
  74:	96 95       	lsr	r25
  76:	87 95       	ror	r24
  78:	07 94       	ror	r0
  7a:	98 2f       	mov	r25, r24
  7c:	80 2d       	mov	r24, r0
  7e:	98 2f       	mov	r25, r24
  80:	8b 81       	ldd	r24, Y+3	; 0x03
  82:	87 70       	andi	r24, 0x07	; 7
  84:	89 2b       	or	r24, r25
  86:	80 83       	st	Z, r24
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
  88:	aa e7       	ldi	r26, 0x7A	; 122
  8a:	b0 e0       	ldi	r27, 0x00	; 0
  8c:	ea e7       	ldi	r30, 0x7A	; 122
  8e:	f0 e0       	ldi	r31, 0x00	; 0
  90:	80 81       	ld	r24, Z
  92:	80 64       	ori	r24, 0x40	; 64
  94:	8c 93       	st	X, r24

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
  96:	ea e7       	ldi	r30, 0x7A	; 122
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	80 81       	ld	r24, Z
  9c:	88 2f       	mov	r24, r24
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	80 74       	andi	r24, 0x40	; 64
  a2:	90 70       	andi	r25, 0x00	; 0
  a4:	00 97       	sbiw	r24, 0x00	; 0
  a6:	01 f4       	brne	.+0      	; 0xa8 <analogRead+0x8e>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
  a8:	e8 e7       	ldi	r30, 0x78	; 120
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	80 81       	ld	r24, Z
  ae:	8a 83       	std	Y+2, r24	; 0x02
	high = ADCH;
  b0:	e9 e7       	ldi	r30, 0x79	; 121
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	89 83       	std	Y+1, r24	; 0x01
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
  b8:	89 81       	ldd	r24, Y+1	; 0x01
  ba:	88 2f       	mov	r24, r24
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	38 2f       	mov	r19, r24
  c0:	22 27       	eor	r18, r18
  c2:	8a 81       	ldd	r24, Y+2	; 0x02
  c4:	88 2f       	mov	r24, r24
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	82 2b       	or	r24, r18
  ca:	93 2b       	or	r25, r19
}
  cc:	0f 90       	pop	r0
  ce:	0f 90       	pop	r0
  d0:	0f 90       	pop	r0
  d2:	cf 91       	pop	r28
  d4:	df 91       	pop	r29
  d6:	08 95       	ret

000000d8 <analogWrite>:
// Right now, PWM output only works on the pins with
// hardware support.  These are defined in the appropriate
// pins_*.c file.  For the rest of the pins, we default
// to digital output.
void analogWrite(uint8_t pin, int val)
{
  d8:	df 93       	push	r29
  da:	cf 93       	push	r28
  dc:	cd b7       	in	r28, 0x3d	; 61
  de:	de b7       	in	r29, 0x3e	; 62
  e0:	28 97       	sbiw	r28, 0x08	; 8
  e2:	0f b6       	in	r0, 0x3f	; 63
  e4:	f8 94       	cli
  e6:	de bf       	out	0x3e, r29	; 62
  e8:	0f be       	out	0x3f, r0	; 63
  ea:	cd bf       	out	0x3d, r28	; 61
  ec:	8c 83       	std	Y+4, r24	; 0x04
  ee:	7e 83       	std	Y+6, r23	; 0x06
  f0:	6d 83       	std	Y+5, r22	; 0x05
	// We need to make sure the PWM output is enabled for those pins
	// that support it, as we turn it off when digitally reading or
	// writing with them.  Also, make sure the pin is in output mode
	// for consistenty with Wiring, which doesn't require a pinMode
	// call for the analog output pins.
	pinMode(pin, OUTPUT);
  f2:	8c 81       	ldd	r24, Y+4	; 0x04
  f4:	61 e0       	ldi	r22, 0x01	; 1
  f6:	0e 94 00 00 	call	0	; 0x0 <analogReference>
	if (val == 0)
  fa:	8d 81       	ldd	r24, Y+5	; 0x05
  fc:	9e 81       	ldd	r25, Y+6	; 0x06
  fe:	00 97       	sbiw	r24, 0x00	; 0
 100:	01 f4       	brne	.+0      	; 0x102 <analogWrite+0x2a>
	{
		digitalWrite(pin, LOW);
 102:	8c 81       	ldd	r24, Y+4	; 0x04
 104:	60 e0       	ldi	r22, 0x00	; 0
 106:	0e 94 00 00 	call	0	; 0x0 <analogReference>
 10a:	00 c0       	rjmp	.+0      	; 0x10c <analogWrite+0x34>
	}
	else if (val == 255)
 10c:	8d 81       	ldd	r24, Y+5	; 0x05
 10e:	9e 81       	ldd	r25, Y+6	; 0x06
 110:	8f 3f       	cpi	r24, 0xFF	; 255
 112:	91 05       	cpc	r25, r1
 114:	01 f4       	brne	.+0      	; 0x116 <analogWrite+0x3e>
	{
		digitalWrite(pin, HIGH);
 116:	8c 81       	ldd	r24, Y+4	; 0x04
 118:	61 e0       	ldi	r22, 0x01	; 1
 11a:	0e 94 00 00 	call	0	; 0x0 <analogReference>
 11e:	00 c0       	rjmp	.+0      	; 0x120 <analogWrite+0x48>
	}
	else
	{
		switch(digitalPinToTimer(pin))
 120:	8c 81       	ldd	r24, Y+4	; 0x04
 122:	88 2f       	mov	r24, r24
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	80 50       	subi	r24, 0x00	; 0
 128:	90 40       	sbci	r25, 0x00	; 0
 12a:	9b 83       	std	Y+3, r25	; 0x03
 12c:	8a 83       	std	Y+2, r24	; 0x02
 12e:	ea 81       	ldd	r30, Y+2	; 0x02
 130:	fb 81       	ldd	r31, Y+3	; 0x03
 132:	84 91       	lpm	r24, Z+
 134:	89 83       	std	Y+1, r24	; 0x01
 136:	89 81       	ldd	r24, Y+1	; 0x01
 138:	28 2f       	mov	r18, r24
 13a:	30 e0       	ldi	r19, 0x00	; 0
 13c:	38 87       	std	Y+8, r19	; 0x08
 13e:	2f 83       	std	Y+7, r18	; 0x07
 140:	8f 81       	ldd	r24, Y+7	; 0x07
 142:	98 85       	ldd	r25, Y+8	; 0x08
 144:	89 30       	cpi	r24, 0x09	; 9
 146:	91 05       	cpc	r25, r1
 148:	01 f4       	brne	.+0      	; 0x14a <analogWrite+0x72>
 14a:	00 c0       	rjmp	.+0      	; 0x14c <analogWrite+0x74>
 14c:	2f 81       	ldd	r18, Y+7	; 0x07
 14e:	38 85       	ldd	r19, Y+8	; 0x08
 150:	2a 30       	cpi	r18, 0x0A	; 10
 152:	31 05       	cpc	r19, r1
 154:	04 f4       	brge	.+0      	; 0x156 <analogWrite+0x7e>
 156:	8f 81       	ldd	r24, Y+7	; 0x07
 158:	98 85       	ldd	r25, Y+8	; 0x08
 15a:	84 30       	cpi	r24, 0x04	; 4
 15c:	91 05       	cpc	r25, r1
 15e:	01 f4       	brne	.+0      	; 0x160 <analogWrite+0x88>
 160:	00 c0       	rjmp	.+0      	; 0x162 <analogWrite+0x8a>
 162:	2f 81       	ldd	r18, Y+7	; 0x07
 164:	38 85       	ldd	r19, Y+8	; 0x08
 166:	25 30       	cpi	r18, 0x05	; 5
 168:	31 05       	cpc	r19, r1
 16a:	04 f4       	brge	.+0      	; 0x16c <analogWrite+0x94>
 16c:	8f 81       	ldd	r24, Y+7	; 0x07
 16e:	98 85       	ldd	r25, Y+8	; 0x08
 170:	82 30       	cpi	r24, 0x02	; 2
 172:	91 05       	cpc	r25, r1
 174:	01 f4       	brne	.+0      	; 0x176 <analogWrite+0x9e>
 176:	00 c0       	rjmp	.+0      	; 0x178 <analogWrite+0xa0>
 178:	2f 81       	ldd	r18, Y+7	; 0x07
 17a:	38 85       	ldd	r19, Y+8	; 0x08
 17c:	23 30       	cpi	r18, 0x03	; 3
 17e:	31 05       	cpc	r19, r1
 180:	04 f0       	brlt	.+0      	; 0x182 <analogWrite+0xaa>
 182:	00 c0       	rjmp	.+0      	; 0x184 <analogWrite+0xac>
 184:	8f 81       	ldd	r24, Y+7	; 0x07
 186:	98 85       	ldd	r25, Y+8	; 0x08
 188:	81 30       	cpi	r24, 0x01	; 1
 18a:	91 05       	cpc	r25, r1
 18c:	01 f4       	brne	.+0      	; 0x18e <analogWrite+0xb6>
 18e:	00 c0       	rjmp	.+0      	; 0x190 <analogWrite+0xb8>
 190:	00 c0       	rjmp	.+0      	; 0x192 <analogWrite+0xba>
 192:	2f 81       	ldd	r18, Y+7	; 0x07
 194:	38 85       	ldd	r19, Y+8	; 0x08
 196:	27 30       	cpi	r18, 0x07	; 7
 198:	31 05       	cpc	r19, r1
 19a:	01 f4       	brne	.+0      	; 0x19c <analogWrite+0xc4>
 19c:	00 c0       	rjmp	.+0      	; 0x19e <analogWrite+0xc6>
 19e:	8f 81       	ldd	r24, Y+7	; 0x07
 1a0:	98 85       	ldd	r25, Y+8	; 0x08
 1a2:	88 30       	cpi	r24, 0x08	; 8
 1a4:	91 05       	cpc	r25, r1
 1a6:	04 f0       	brlt	.+0      	; 0x1a8 <analogWrite+0xd0>
 1a8:	00 c0       	rjmp	.+0      	; 0x1aa <analogWrite+0xd2>
 1aa:	2f 81       	ldd	r18, Y+7	; 0x07
 1ac:	38 85       	ldd	r19, Y+8	; 0x08
 1ae:	26 30       	cpi	r18, 0x06	; 6
 1b0:	31 05       	cpc	r19, r1
 1b2:	01 f4       	brne	.+0      	; 0x1b4 <analogWrite+0xdc>
 1b4:	00 c0       	rjmp	.+0      	; 0x1b6 <analogWrite+0xde>
 1b6:	00 c0       	rjmp	.+0      	; 0x1b8 <analogWrite+0xe0>
 1b8:	8f 81       	ldd	r24, Y+7	; 0x07
 1ba:	98 85       	ldd	r25, Y+8	; 0x08
 1bc:	8d 30       	cpi	r24, 0x0D	; 13
 1be:	91 05       	cpc	r25, r1
 1c0:	01 f4       	brne	.+0      	; 0x1c2 <analogWrite+0xea>
 1c2:	00 c0       	rjmp	.+0      	; 0x1c4 <analogWrite+0xec>
 1c4:	2f 81       	ldd	r18, Y+7	; 0x07
 1c6:	38 85       	ldd	r19, Y+8	; 0x08
 1c8:	2e 30       	cpi	r18, 0x0E	; 14
 1ca:	31 05       	cpc	r19, r1
 1cc:	04 f4       	brge	.+0      	; 0x1ce <analogWrite+0xf6>
 1ce:	8f 81       	ldd	r24, Y+7	; 0x07
 1d0:	98 85       	ldd	r25, Y+8	; 0x08
 1d2:	8b 30       	cpi	r24, 0x0B	; 11
 1d4:	91 05       	cpc	r25, r1
 1d6:	01 f4       	brne	.+0      	; 0x1d8 <analogWrite+0x100>
 1d8:	00 c0       	rjmp	.+0      	; 0x1da <analogWrite+0x102>
 1da:	2f 81       	ldd	r18, Y+7	; 0x07
 1dc:	38 85       	ldd	r19, Y+8	; 0x08
 1de:	2c 30       	cpi	r18, 0x0C	; 12
 1e0:	31 05       	cpc	r19, r1
 1e2:	04 f0       	brlt	.+0      	; 0x1e4 <analogWrite+0x10c>
 1e4:	00 c0       	rjmp	.+0      	; 0x1e6 <analogWrite+0x10e>
 1e6:	00 c0       	rjmp	.+0      	; 0x1e8 <analogWrite+0x110>
 1e8:	8f 81       	ldd	r24, Y+7	; 0x07
 1ea:	98 85       	ldd	r25, Y+8	; 0x08
 1ec:	8f 30       	cpi	r24, 0x0F	; 15
 1ee:	91 05       	cpc	r25, r1
 1f0:	01 f4       	brne	.+0      	; 0x1f2 <analogWrite+0x11a>
 1f2:	00 c0       	rjmp	.+0      	; 0x1f4 <analogWrite+0x11c>
 1f4:	2f 81       	ldd	r18, Y+7	; 0x07
 1f6:	38 85       	ldd	r19, Y+8	; 0x08
 1f8:	2f 30       	cpi	r18, 0x0F	; 15
 1fa:	31 05       	cpc	r19, r1
 1fc:	04 f4       	brge	.+0      	; 0x1fe <analogWrite+0x126>
 1fe:	00 c0       	rjmp	.+0      	; 0x200 <analogWrite+0x128>
 200:	8f 81       	ldd	r24, Y+7	; 0x07
 202:	98 85       	ldd	r25, Y+8	; 0x08
 204:	80 31       	cpi	r24, 0x10	; 16
 206:	91 05       	cpc	r25, r1
 208:	01 f4       	brne	.+0      	; 0x20a <analogWrite+0x132>
 20a:	00 c0       	rjmp	.+0      	; 0x20c <analogWrite+0x134>
 20c:	00 c0       	rjmp	.+0      	; 0x20e <analogWrite+0x136>
			#endif

			#if defined(TCCR0A) && defined(COM0A1)
			case TIMER0A:
				// connect pwm to pin on timer 0, channel A
				sbi(TCCR0A, COM0A1);
 20e:	a4 e4       	ldi	r26, 0x44	; 68
 210:	b0 e0       	ldi	r27, 0x00	; 0
 212:	e4 e4       	ldi	r30, 0x44	; 68
 214:	f0 e0       	ldi	r31, 0x00	; 0
 216:	80 81       	ld	r24, Z
 218:	80 68       	ori	r24, 0x80	; 128
 21a:	8c 93       	st	X, r24
				OCR0A = val; // set pwm duty
 21c:	e7 e4       	ldi	r30, 0x47	; 71
 21e:	f0 e0       	ldi	r31, 0x00	; 0
 220:	8d 81       	ldd	r24, Y+5	; 0x05
 222:	80 83       	st	Z, r24
 224:	00 c0       	rjmp	.+0      	; 0x226 <analogWrite+0x14e>
			#endif

			#if defined(TCCR0A) && defined(COM0B1)
			case TIMER0B:
				// connect pwm to pin on timer 0, channel B
				sbi(TCCR0A, COM0B1);
 226:	a4 e4       	ldi	r26, 0x44	; 68
 228:	b0 e0       	ldi	r27, 0x00	; 0
 22a:	e4 e4       	ldi	r30, 0x44	; 68
 22c:	f0 e0       	ldi	r31, 0x00	; 0
 22e:	80 81       	ld	r24, Z
 230:	80 62       	ori	r24, 0x20	; 32
 232:	8c 93       	st	X, r24
				OCR0B = val; // set pwm duty
 234:	e8 e4       	ldi	r30, 0x48	; 72
 236:	f0 e0       	ldi	r31, 0x00	; 0
 238:	8d 81       	ldd	r24, Y+5	; 0x05
 23a:	80 83       	st	Z, r24
 23c:	00 c0       	rjmp	.+0      	; 0x23e <analogWrite+0x166>
			#endif

			#if defined(TCCR1A) && defined(COM1A1)
			case TIMER1A:
				// connect pwm to pin on timer 1, channel A
				sbi(TCCR1A, COM1A1);
 23e:	a0 e8       	ldi	r26, 0x80	; 128
 240:	b0 e0       	ldi	r27, 0x00	; 0
 242:	e0 e8       	ldi	r30, 0x80	; 128
 244:	f0 e0       	ldi	r31, 0x00	; 0
 246:	80 81       	ld	r24, Z
 248:	80 68       	ori	r24, 0x80	; 128
 24a:	8c 93       	st	X, r24
				OCR1A = val; // set pwm duty
 24c:	e8 e8       	ldi	r30, 0x88	; 136
 24e:	f0 e0       	ldi	r31, 0x00	; 0
 250:	8d 81       	ldd	r24, Y+5	; 0x05
 252:	9e 81       	ldd	r25, Y+6	; 0x06
 254:	91 83       	std	Z+1, r25	; 0x01
 256:	80 83       	st	Z, r24
 258:	00 c0       	rjmp	.+0      	; 0x25a <analogWrite+0x182>
			#endif

			#if defined(TCCR1A) && defined(COM1B1)
			case TIMER1B:
				// connect pwm to pin on timer 1, channel B
				sbi(TCCR1A, COM1B1);
 25a:	a0 e8       	ldi	r26, 0x80	; 128
 25c:	b0 e0       	ldi	r27, 0x00	; 0
 25e:	e0 e8       	ldi	r30, 0x80	; 128
 260:	f0 e0       	ldi	r31, 0x00	; 0
 262:	80 81       	ld	r24, Z
 264:	80 62       	ori	r24, 0x20	; 32
 266:	8c 93       	st	X, r24
				OCR1B = val; // set pwm duty
 268:	ea e8       	ldi	r30, 0x8A	; 138
 26a:	f0 e0       	ldi	r31, 0x00	; 0
 26c:	8d 81       	ldd	r24, Y+5	; 0x05
 26e:	9e 81       	ldd	r25, Y+6	; 0x06
 270:	91 83       	std	Z+1, r25	; 0x01
 272:	80 83       	st	Z, r24
 274:	00 c0       	rjmp	.+0      	; 0x276 <analogWrite+0x19e>
			#endif

			#if defined(TCCR2A) && defined(COM2A1)
			case TIMER2A:
				// connect pwm to pin on timer 2, channel A
				sbi(TCCR2A, COM2A1);
 276:	a0 eb       	ldi	r26, 0xB0	; 176
 278:	b0 e0       	ldi	r27, 0x00	; 0
 27a:	e0 eb       	ldi	r30, 0xB0	; 176
 27c:	f0 e0       	ldi	r31, 0x00	; 0
 27e:	80 81       	ld	r24, Z
 280:	80 68       	ori	r24, 0x80	; 128
 282:	8c 93       	st	X, r24
				OCR2A = val; // set pwm duty
 284:	e3 eb       	ldi	r30, 0xB3	; 179
 286:	f0 e0       	ldi	r31, 0x00	; 0
 288:	8d 81       	ldd	r24, Y+5	; 0x05
 28a:	80 83       	st	Z, r24
 28c:	00 c0       	rjmp	.+0      	; 0x28e <analogWrite+0x1b6>
			#endif

			#if defined(TCCR2A) && defined(COM2B1)
			case TIMER2B:
				// connect pwm to pin on timer 2, channel B
				sbi(TCCR2A, COM2B1);
 28e:	a0 eb       	ldi	r26, 0xB0	; 176
 290:	b0 e0       	ldi	r27, 0x00	; 0
 292:	e0 eb       	ldi	r30, 0xB0	; 176
 294:	f0 e0       	ldi	r31, 0x00	; 0
 296:	80 81       	ld	r24, Z
 298:	80 62       	ori	r24, 0x20	; 32
 29a:	8c 93       	st	X, r24
				OCR2B = val; // set pwm duty
 29c:	e4 eb       	ldi	r30, 0xB4	; 180
 29e:	f0 e0       	ldi	r31, 0x00	; 0
 2a0:	8d 81       	ldd	r24, Y+5	; 0x05
 2a2:	80 83       	st	Z, r24
 2a4:	00 c0       	rjmp	.+0      	; 0x2a6 <analogWrite+0x1ce>
			#endif

			#if defined(TCCR3A) && defined(COM3A1)
			case TIMER3A:
				// connect pwm to pin on timer 3, channel A
				sbi(TCCR3A, COM3A1);
 2a6:	a0 e9       	ldi	r26, 0x90	; 144
 2a8:	b0 e0       	ldi	r27, 0x00	; 0
 2aa:	e0 e9       	ldi	r30, 0x90	; 144
 2ac:	f0 e0       	ldi	r31, 0x00	; 0
 2ae:	80 81       	ld	r24, Z
 2b0:	80 68       	ori	r24, 0x80	; 128
 2b2:	8c 93       	st	X, r24
				OCR3A = val; // set pwm duty
 2b4:	e8 e9       	ldi	r30, 0x98	; 152
 2b6:	f0 e0       	ldi	r31, 0x00	; 0
 2b8:	8d 81       	ldd	r24, Y+5	; 0x05
 2ba:	9e 81       	ldd	r25, Y+6	; 0x06
 2bc:	91 83       	std	Z+1, r25	; 0x01
 2be:	80 83       	st	Z, r24
 2c0:	00 c0       	rjmp	.+0      	; 0x2c2 <analogWrite+0x1ea>
			#endif

			#if defined(TCCR3A) && defined(COM3B1)
			case TIMER3B:
				// connect pwm to pin on timer 3, channel B
				sbi(TCCR3A, COM3B1);
 2c2:	a0 e9       	ldi	r26, 0x90	; 144
 2c4:	b0 e0       	ldi	r27, 0x00	; 0
 2c6:	e0 e9       	ldi	r30, 0x90	; 144
 2c8:	f0 e0       	ldi	r31, 0x00	; 0
 2ca:	80 81       	ld	r24, Z
 2cc:	80 62       	ori	r24, 0x20	; 32
 2ce:	8c 93       	st	X, r24
				OCR3B = val; // set pwm duty
 2d0:	ea e9       	ldi	r30, 0x9A	; 154
 2d2:	f0 e0       	ldi	r31, 0x00	; 0
 2d4:	8d 81       	ldd	r24, Y+5	; 0x05
 2d6:	9e 81       	ldd	r25, Y+6	; 0x06
 2d8:	91 83       	std	Z+1, r25	; 0x01
 2da:	80 83       	st	Z, r24
 2dc:	00 c0       	rjmp	.+0      	; 0x2de <analogWrite+0x206>
			#endif

			#if defined(TCCR3A) && defined(COM3C1)
			case TIMER3C:
				// connect pwm to pin on timer 3, channel C
				sbi(TCCR3A, COM3C1);
 2de:	a0 e9       	ldi	r26, 0x90	; 144
 2e0:	b0 e0       	ldi	r27, 0x00	; 0
 2e2:	e0 e9       	ldi	r30, 0x90	; 144
 2e4:	f0 e0       	ldi	r31, 0x00	; 0
 2e6:	80 81       	ld	r24, Z
 2e8:	88 60       	ori	r24, 0x08	; 8
 2ea:	8c 93       	st	X, r24
				OCR3C = val; // set pwm duty
 2ec:	ec e9       	ldi	r30, 0x9C	; 156
 2ee:	f0 e0       	ldi	r31, 0x00	; 0
 2f0:	8d 81       	ldd	r24, Y+5	; 0x05
 2f2:	9e 81       	ldd	r25, Y+6	; 0x06
 2f4:	91 83       	std	Z+1, r25	; 0x01
 2f6:	80 83       	st	Z, r24
 2f8:	00 c0       	rjmp	.+0      	; 0x2fa <analogWrite+0x222>
			#endif

			#if defined(TCCR4A) && defined(COM4A1)
			case TIMER4A:
				// connect pwm to pin on timer 4, channel A
				sbi(TCCR4A, COM4A1);
 2fa:	a0 ea       	ldi	r26, 0xA0	; 160
 2fc:	b0 e0       	ldi	r27, 0x00	; 0
 2fe:	e0 ea       	ldi	r30, 0xA0	; 160
 300:	f0 e0       	ldi	r31, 0x00	; 0
 302:	80 81       	ld	r24, Z
 304:	80 68       	ori	r24, 0x80	; 128
 306:	8c 93       	st	X, r24
				OCR4A = val; // set pwm duty
 308:	e8 ea       	ldi	r30, 0xA8	; 168
 30a:	f0 e0       	ldi	r31, 0x00	; 0
 30c:	8d 81       	ldd	r24, Y+5	; 0x05
 30e:	9e 81       	ldd	r25, Y+6	; 0x06
 310:	91 83       	std	Z+1, r25	; 0x01
 312:	80 83       	st	Z, r24
 314:	00 c0       	rjmp	.+0      	; 0x316 <analogWrite+0x23e>
			#endif

			#if defined(TCCR4A) && defined(COM4B1)
			case TIMER4B:
				// connect pwm to pin on timer 4, channel B
				sbi(TCCR4A, COM4B1);
 316:	a0 ea       	ldi	r26, 0xA0	; 160
 318:	b0 e0       	ldi	r27, 0x00	; 0
 31a:	e0 ea       	ldi	r30, 0xA0	; 160
 31c:	f0 e0       	ldi	r31, 0x00	; 0
 31e:	80 81       	ld	r24, Z
 320:	80 62       	ori	r24, 0x20	; 32
 322:	8c 93       	st	X, r24
				OCR4B = val; // set pwm duty
 324:	ea ea       	ldi	r30, 0xAA	; 170
 326:	f0 e0       	ldi	r31, 0x00	; 0
 328:	8d 81       	ldd	r24, Y+5	; 0x05
 32a:	9e 81       	ldd	r25, Y+6	; 0x06
 32c:	91 83       	std	Z+1, r25	; 0x01
 32e:	80 83       	st	Z, r24
 330:	00 c0       	rjmp	.+0      	; 0x332 <analogWrite+0x25a>
			#endif

			#if defined(TCCR4A) && defined(COM4C1)
			case TIMER4C:
				// connect pwm to pin on timer 4, channel C
				sbi(TCCR4A, COM4C1);
 332:	a0 ea       	ldi	r26, 0xA0	; 160
 334:	b0 e0       	ldi	r27, 0x00	; 0
 336:	e0 ea       	ldi	r30, 0xA0	; 160
 338:	f0 e0       	ldi	r31, 0x00	; 0
 33a:	80 81       	ld	r24, Z
 33c:	88 60       	ori	r24, 0x08	; 8
 33e:	8c 93       	st	X, r24
				OCR4C = val; // set pwm duty
 340:	ec ea       	ldi	r30, 0xAC	; 172
 342:	f0 e0       	ldi	r31, 0x00	; 0
 344:	8d 81       	ldd	r24, Y+5	; 0x05
 346:	9e 81       	ldd	r25, Y+6	; 0x06
 348:	91 83       	std	Z+1, r25	; 0x01
 34a:	80 83       	st	Z, r24
 34c:	00 c0       	rjmp	.+0      	; 0x34e <analogWrite+0x276>
			#endif

			#if defined(TCCR5A) && defined(COM5A1)
			case TIMER5A:
				// connect pwm to pin on timer 5, channel A
				sbi(TCCR5A, COM5A1);
 34e:	a0 e2       	ldi	r26, 0x20	; 32
 350:	b1 e0       	ldi	r27, 0x01	; 1
 352:	e0 e2       	ldi	r30, 0x20	; 32
 354:	f1 e0       	ldi	r31, 0x01	; 1
 356:	80 81       	ld	r24, Z
 358:	80 68       	ori	r24, 0x80	; 128
 35a:	8c 93       	st	X, r24
				OCR5A = val; // set pwm duty
 35c:	e8 e2       	ldi	r30, 0x28	; 40
 35e:	f1 e0       	ldi	r31, 0x01	; 1
 360:	8d 81       	ldd	r24, Y+5	; 0x05
 362:	9e 81       	ldd	r25, Y+6	; 0x06
 364:	91 83       	std	Z+1, r25	; 0x01
 366:	80 83       	st	Z, r24
 368:	00 c0       	rjmp	.+0      	; 0x36a <analogWrite+0x292>
			#endif

			#if defined(TCCR5A) && defined(COM5B1)
			case TIMER5B:
				// connect pwm to pin on timer 5, channel B
				sbi(TCCR5A, COM5B1);
 36a:	a0 e2       	ldi	r26, 0x20	; 32
 36c:	b1 e0       	ldi	r27, 0x01	; 1
 36e:	e0 e2       	ldi	r30, 0x20	; 32
 370:	f1 e0       	ldi	r31, 0x01	; 1
 372:	80 81       	ld	r24, Z
 374:	80 62       	ori	r24, 0x20	; 32
 376:	8c 93       	st	X, r24
				OCR5B = val; // set pwm duty
 378:	ea e2       	ldi	r30, 0x2A	; 42
 37a:	f1 e0       	ldi	r31, 0x01	; 1
 37c:	8d 81       	ldd	r24, Y+5	; 0x05
 37e:	9e 81       	ldd	r25, Y+6	; 0x06
 380:	91 83       	std	Z+1, r25	; 0x01
 382:	80 83       	st	Z, r24
 384:	00 c0       	rjmp	.+0      	; 0x386 <analogWrite+0x2ae>
			#endif

			#if defined(TCCR5A) && defined(COM5C1)
			case TIMER5C:
				// connect pwm to pin on timer 5, channel C
				sbi(TCCR5A, COM5C1);
 386:	a0 e2       	ldi	r26, 0x20	; 32
 388:	b1 e0       	ldi	r27, 0x01	; 1
 38a:	e0 e2       	ldi	r30, 0x20	; 32
 38c:	f1 e0       	ldi	r31, 0x01	; 1
 38e:	80 81       	ld	r24, Z
 390:	88 60       	ori	r24, 0x08	; 8
 392:	8c 93       	st	X, r24
				OCR5C = val; // set pwm duty
 394:	ec e2       	ldi	r30, 0x2C	; 44
 396:	f1 e0       	ldi	r31, 0x01	; 1
 398:	8d 81       	ldd	r24, Y+5	; 0x05
 39a:	9e 81       	ldd	r25, Y+6	; 0x06
 39c:	91 83       	std	Z+1, r25	; 0x01
 39e:	80 83       	st	Z, r24
 3a0:	00 c0       	rjmp	.+0      	; 0x3a2 <analogWrite+0x2ca>
				break;
			#endif

			case NOT_ON_TIMER:
			default:
				if (val < 128) {
 3a2:	8d 81       	ldd	r24, Y+5	; 0x05
 3a4:	9e 81       	ldd	r25, Y+6	; 0x06
 3a6:	80 38       	cpi	r24, 0x80	; 128
 3a8:	91 05       	cpc	r25, r1
 3aa:	04 f4       	brge	.+0      	; 0x3ac <analogWrite+0x2d4>
					digitalWrite(pin, LOW);
 3ac:	8c 81       	ldd	r24, Y+4	; 0x04
 3ae:	60 e0       	ldi	r22, 0x00	; 0
 3b0:	0e 94 00 00 	call	0	; 0x0 <analogReference>
 3b4:	00 c0       	rjmp	.+0      	; 0x3b6 <analogWrite+0x2de>
				} else {
					digitalWrite(pin, HIGH);
 3b6:	8c 81       	ldd	r24, Y+4	; 0x04
 3b8:	61 e0       	ldi	r22, 0x01	; 1
 3ba:	0e 94 00 00 	call	0	; 0x0 <analogReference>
				}
		}
	}
}
 3be:	28 96       	adiw	r28, 0x08	; 8
 3c0:	0f b6       	in	r0, 0x3f	; 63
 3c2:	f8 94       	cli
 3c4:	de bf       	out	0x3e, r29	; 62
 3c6:	0f be       	out	0x3f, r0	; 63
 3c8:	cd bf       	out	0x3d, r28	; 61
 3ca:	cf 91       	pop	r28
 3cc:	df 91       	pop	r29
 3ce:	08 95       	ret

wiring_digital.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000049c  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  1 .data         00000004  00000000  00000000  000004d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  000004d4  2**0
                  ALLOC
  3 .stab         00000b88  00000000  00000000  000004d4  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00000e25  00000000  00000000  0000105c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <pinMode>:

#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	cd b7       	in	r28, 0x3d	; 61
   6:	de b7       	in	r29, 0x3e	; 62
   8:	62 97       	sbiw	r28, 0x12	; 18
   a:	0f b6       	in	r0, 0x3f	; 63
   c:	f8 94       	cli
   e:	de bf       	out	0x3e, r29	; 62
  10:	0f be       	out	0x3f, r0	; 63
  12:	cd bf       	out	0x3d, r28	; 61
  14:	89 8b       	std	Y+17, r24	; 0x11
  16:	6a 8b       	std	Y+18, r22	; 0x12
	uint8_t bit = digitalPinToBitMask(pin);
  18:	89 89       	ldd	r24, Y+17	; 0x11
  1a:	88 2f       	mov	r24, r24
  1c:	90 e0       	ldi	r25, 0x00	; 0
  1e:	80 50       	subi	r24, 0x00	; 0
  20:	90 40       	sbci	r25, 0x00	; 0
  22:	9c 87       	std	Y+12, r25	; 0x0c
  24:	8b 87       	std	Y+11, r24	; 0x0b
  26:	eb 85       	ldd	r30, Y+11	; 0x0b
  28:	fc 85       	ldd	r31, Y+12	; 0x0c
  2a:	84 91       	lpm	r24, Z+
  2c:	8a 87       	std	Y+10, r24	; 0x0a
  2e:	8a 85       	ldd	r24, Y+10	; 0x0a
  30:	88 8b       	std	Y+16, r24	; 0x10
	uint8_t port = digitalPinToPort(pin);
  32:	89 89       	ldd	r24, Y+17	; 0x11
  34:	88 2f       	mov	r24, r24
  36:	90 e0       	ldi	r25, 0x00	; 0
  38:	80 50       	subi	r24, 0x00	; 0
  3a:	90 40       	sbci	r25, 0x00	; 0
  3c:	99 87       	std	Y+9, r25	; 0x09
  3e:	88 87       	std	Y+8, r24	; 0x08
  40:	e8 85       	ldd	r30, Y+8	; 0x08
  42:	f9 85       	ldd	r31, Y+9	; 0x09
  44:	84 91       	lpm	r24, Z+
  46:	8f 83       	std	Y+7, r24	; 0x07
  48:	8f 81       	ldd	r24, Y+7	; 0x07
  4a:	8f 87       	std	Y+15, r24	; 0x0f
	volatile uint8_t *reg;

	if (port == NOT_A_PIN) return;
  4c:	8f 85       	ldd	r24, Y+15	; 0x0f
  4e:	88 23       	and	r24, r24
  50:	01 f4       	brne	.+0      	; 0x52 <pinMode+0x52>
  52:	00 c0       	rjmp	.+0      	; 0x54 <pinMode+0x54>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
  54:	8f 85       	ldd	r24, Y+15	; 0x0f
  56:	88 2f       	mov	r24, r24
  58:	90 e0       	ldi	r25, 0x00	; 0
  5a:	88 0f       	add	r24, r24
  5c:	99 1f       	adc	r25, r25
  5e:	80 50       	subi	r24, 0x00	; 0
  60:	90 40       	sbci	r25, 0x00	; 0
  62:	9e 83       	std	Y+6, r25	; 0x06
  64:	8d 83       	std	Y+5, r24	; 0x05
  66:	8d 81       	ldd	r24, Y+5	; 0x05
  68:	9e 81       	ldd	r25, Y+6	; 0x06
  6a:	fc 01       	movw	r30, r24
  6c:	85 91       	lpm	r24, Z+
  6e:	94 91       	lpm	r25, Z+
  70:	9c 83       	std	Y+4, r25	; 0x04
  72:	8b 83       	std	Y+3, r24	; 0x03
  74:	fe 83       	std	Y+6, r31	; 0x06
  76:	ed 83       	std	Y+5, r30	; 0x05
  78:	8b 81       	ldd	r24, Y+3	; 0x03
  7a:	9c 81       	ldd	r25, Y+4	; 0x04
  7c:	9e 87       	std	Y+14, r25	; 0x0e
  7e:	8d 87       	std	Y+13, r24	; 0x0d

	if (mode == INPUT) { 
  80:	8a 89       	ldd	r24, Y+18	; 0x12
  82:	88 23       	and	r24, r24
  84:	01 f4       	brne	.+0      	; 0x86 <pinMode+0x86>
		uint8_t oldSREG = SREG;
  86:	ef e5       	ldi	r30, 0x5F	; 95
  88:	f0 e0       	ldi	r31, 0x00	; 0
  8a:	80 81       	ld	r24, Z
  8c:	8a 83       	std	Y+2, r24	; 0x02
                cli();
  8e:	f8 94       	cli
		*reg &= ~bit;
  90:	ed 85       	ldd	r30, Y+13	; 0x0d
  92:	fe 85       	ldd	r31, Y+14	; 0x0e
  94:	80 81       	ld	r24, Z
  96:	98 2f       	mov	r25, r24
  98:	88 89       	ldd	r24, Y+16	; 0x10
  9a:	80 95       	com	r24
  9c:	89 23       	and	r24, r25
  9e:	ed 85       	ldd	r30, Y+13	; 0x0d
  a0:	fe 85       	ldd	r31, Y+14	; 0x0e
  a2:	80 83       	st	Z, r24
		SREG = oldSREG;
  a4:	ef e5       	ldi	r30, 0x5F	; 95
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	8a 81       	ldd	r24, Y+2	; 0x02
  aa:	80 83       	st	Z, r24
  ac:	00 c0       	rjmp	.+0      	; 0xae <pinMode+0xae>
	} else {
		uint8_t oldSREG = SREG;
  ae:	ef e5       	ldi	r30, 0x5F	; 95
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	80 81       	ld	r24, Z
  b4:	89 83       	std	Y+1, r24	; 0x01
                cli();
  b6:	f8 94       	cli
		*reg |= bit;
  b8:	ed 85       	ldd	r30, Y+13	; 0x0d
  ba:	fe 85       	ldd	r31, Y+14	; 0x0e
  bc:	90 81       	ld	r25, Z
  be:	88 89       	ldd	r24, Y+16	; 0x10
  c0:	89 2b       	or	r24, r25
  c2:	ed 85       	ldd	r30, Y+13	; 0x0d
  c4:	fe 85       	ldd	r31, Y+14	; 0x0e
  c6:	80 83       	st	Z, r24
		SREG = oldSREG;
  c8:	ef e5       	ldi	r30, 0x5F	; 95
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	89 81       	ldd	r24, Y+1	; 0x01
  ce:	80 83       	st	Z, r24
	}
}
  d0:	62 96       	adiw	r28, 0x12	; 18
  d2:	0f b6       	in	r0, 0x3f	; 63
  d4:	f8 94       	cli
  d6:	de bf       	out	0x3e, r29	; 62
  d8:	0f be       	out	0x3f, r0	; 63
  da:	cd bf       	out	0x3d, r28	; 61
  dc:	cf 91       	pop	r28
  de:	df 91       	pop	r29
  e0:	08 95       	ret

000000e2 <turnOffPWM>:
// - Added more #ifdefs, now compiles for atmega645
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
  e2:	df 93       	push	r29
  e4:	cf 93       	push	r28
  e6:	00 d0       	rcall	.+0      	; 0xe8 <turnOffPWM+0x6>
  e8:	cd b7       	in	r28, 0x3d	; 61
  ea:	de b7       	in	r29, 0x3e	; 62
  ec:	89 83       	std	Y+1, r24	; 0x01
	switch (timer)
  ee:	89 81       	ldd	r24, Y+1	; 0x01
  f0:	28 2f       	mov	r18, r24
  f2:	30 e0       	ldi	r19, 0x00	; 0
  f4:	3b 83       	std	Y+3, r19	; 0x03
  f6:	2a 83       	std	Y+2, r18	; 0x02
  f8:	8a 81       	ldd	r24, Y+2	; 0x02
  fa:	9b 81       	ldd	r25, Y+3	; 0x03
  fc:	89 30       	cpi	r24, 0x09	; 9
  fe:	91 05       	cpc	r25, r1
 100:	01 f4       	brne	.+0      	; 0x102 <turnOffPWM+0x20>
 102:	00 c0       	rjmp	.+0      	; 0x104 <turnOffPWM+0x22>
 104:	2a 81       	ldd	r18, Y+2	; 0x02
 106:	3b 81       	ldd	r19, Y+3	; 0x03
 108:	2a 30       	cpi	r18, 0x0A	; 10
 10a:	31 05       	cpc	r19, r1
 10c:	04 f4       	brge	.+0      	; 0x10e <turnOffPWM+0x2c>
 10e:	8a 81       	ldd	r24, Y+2	; 0x02
 110:	9b 81       	ldd	r25, Y+3	; 0x03
 112:	84 30       	cpi	r24, 0x04	; 4
 114:	91 05       	cpc	r25, r1
 116:	01 f4       	brne	.+0      	; 0x118 <turnOffPWM+0x36>
 118:	00 c0       	rjmp	.+0      	; 0x11a <turnOffPWM+0x38>
 11a:	2a 81       	ldd	r18, Y+2	; 0x02
 11c:	3b 81       	ldd	r19, Y+3	; 0x03
 11e:	25 30       	cpi	r18, 0x05	; 5
 120:	31 05       	cpc	r19, r1
 122:	04 f4       	brge	.+0      	; 0x124 <turnOffPWM+0x42>
 124:	8a 81       	ldd	r24, Y+2	; 0x02
 126:	9b 81       	ldd	r25, Y+3	; 0x03
 128:	82 30       	cpi	r24, 0x02	; 2
 12a:	91 05       	cpc	r25, r1
 12c:	01 f4       	brne	.+0      	; 0x12e <turnOffPWM+0x4c>
 12e:	00 c0       	rjmp	.+0      	; 0x130 <turnOffPWM+0x4e>
 130:	2a 81       	ldd	r18, Y+2	; 0x02
 132:	3b 81       	ldd	r19, Y+3	; 0x03
 134:	23 30       	cpi	r18, 0x03	; 3
 136:	31 05       	cpc	r19, r1
 138:	04 f0       	brlt	.+0      	; 0x13a <turnOffPWM+0x58>
 13a:	00 c0       	rjmp	.+0      	; 0x13c <turnOffPWM+0x5a>
 13c:	8a 81       	ldd	r24, Y+2	; 0x02
 13e:	9b 81       	ldd	r25, Y+3	; 0x03
 140:	81 30       	cpi	r24, 0x01	; 1
 142:	91 05       	cpc	r25, r1
 144:	01 f4       	brne	.+0      	; 0x146 <turnOffPWM+0x64>
 146:	00 c0       	rjmp	.+0      	; 0x148 <turnOffPWM+0x66>
 148:	00 c0       	rjmp	.+0      	; 0x14a <turnOffPWM+0x68>
 14a:	2a 81       	ldd	r18, Y+2	; 0x02
 14c:	3b 81       	ldd	r19, Y+3	; 0x03
 14e:	27 30       	cpi	r18, 0x07	; 7
 150:	31 05       	cpc	r19, r1
 152:	01 f4       	brne	.+0      	; 0x154 <turnOffPWM+0x72>
 154:	00 c0       	rjmp	.+0      	; 0x156 <turnOffPWM+0x74>
 156:	8a 81       	ldd	r24, Y+2	; 0x02
 158:	9b 81       	ldd	r25, Y+3	; 0x03
 15a:	88 30       	cpi	r24, 0x08	; 8
 15c:	91 05       	cpc	r25, r1
 15e:	04 f0       	brlt	.+0      	; 0x160 <turnOffPWM+0x7e>
 160:	00 c0       	rjmp	.+0      	; 0x162 <turnOffPWM+0x80>
 162:	2a 81       	ldd	r18, Y+2	; 0x02
 164:	3b 81       	ldd	r19, Y+3	; 0x03
 166:	26 30       	cpi	r18, 0x06	; 6
 168:	31 05       	cpc	r19, r1
 16a:	01 f4       	brne	.+0      	; 0x16c <turnOffPWM+0x8a>
 16c:	00 c0       	rjmp	.+0      	; 0x16e <turnOffPWM+0x8c>
 16e:	00 c0       	rjmp	.+0      	; 0x170 <turnOffPWM+0x8e>
 170:	8a 81       	ldd	r24, Y+2	; 0x02
 172:	9b 81       	ldd	r25, Y+3	; 0x03
 174:	8d 30       	cpi	r24, 0x0D	; 13
 176:	91 05       	cpc	r25, r1
 178:	01 f4       	brne	.+0      	; 0x17a <turnOffPWM+0x98>
 17a:	00 c0       	rjmp	.+0      	; 0x17c <turnOffPWM+0x9a>
 17c:	2a 81       	ldd	r18, Y+2	; 0x02
 17e:	3b 81       	ldd	r19, Y+3	; 0x03
 180:	2e 30       	cpi	r18, 0x0E	; 14
 182:	31 05       	cpc	r19, r1
 184:	04 f4       	brge	.+0      	; 0x186 <turnOffPWM+0xa4>
 186:	8a 81       	ldd	r24, Y+2	; 0x02
 188:	9b 81       	ldd	r25, Y+3	; 0x03
 18a:	8b 30       	cpi	r24, 0x0B	; 11
 18c:	91 05       	cpc	r25, r1
 18e:	01 f4       	brne	.+0      	; 0x190 <turnOffPWM+0xae>
 190:	00 c0       	rjmp	.+0      	; 0x192 <turnOffPWM+0xb0>
 192:	2a 81       	ldd	r18, Y+2	; 0x02
 194:	3b 81       	ldd	r19, Y+3	; 0x03
 196:	2c 30       	cpi	r18, 0x0C	; 12
 198:	31 05       	cpc	r19, r1
 19a:	04 f0       	brlt	.+0      	; 0x19c <turnOffPWM+0xba>
 19c:	00 c0       	rjmp	.+0      	; 0x19e <turnOffPWM+0xbc>
 19e:	00 c0       	rjmp	.+0      	; 0x1a0 <turnOffPWM+0xbe>
 1a0:	8a 81       	ldd	r24, Y+2	; 0x02
 1a2:	9b 81       	ldd	r25, Y+3	; 0x03
 1a4:	8f 30       	cpi	r24, 0x0F	; 15
 1a6:	91 05       	cpc	r25, r1
 1a8:	01 f4       	brne	.+0      	; 0x1aa <turnOffPWM+0xc8>
 1aa:	00 c0       	rjmp	.+0      	; 0x1ac <turnOffPWM+0xca>
 1ac:	2a 81       	ldd	r18, Y+2	; 0x02
 1ae:	3b 81       	ldd	r19, Y+3	; 0x03
 1b0:	2f 30       	cpi	r18, 0x0F	; 15
 1b2:	31 05       	cpc	r19, r1
 1b4:	04 f4       	brge	.+0      	; 0x1b6 <turnOffPWM+0xd4>
 1b6:	00 c0       	rjmp	.+0      	; 0x1b8 <turnOffPWM+0xd6>
 1b8:	8a 81       	ldd	r24, Y+2	; 0x02
 1ba:	9b 81       	ldd	r25, Y+3	; 0x03
 1bc:	80 31       	cpi	r24, 0x10	; 16
 1be:	91 05       	cpc	r25, r1
 1c0:	01 f4       	brne	.+0      	; 0x1c2 <turnOffPWM+0xe0>
 1c2:	00 c0       	rjmp	.+0      	; 0x1c4 <turnOffPWM+0xe2>
 1c4:	00 c0       	rjmp	.+0      	; 0x1c6 <turnOffPWM+0xe4>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
 1c6:	a0 e8       	ldi	r26, 0x80	; 128
 1c8:	b0 e0       	ldi	r27, 0x00	; 0
 1ca:	e0 e8       	ldi	r30, 0x80	; 128
 1cc:	f0 e0       	ldi	r31, 0x00	; 0
 1ce:	80 81       	ld	r24, Z
 1d0:	8f 77       	andi	r24, 0x7F	; 127
 1d2:	8c 93       	st	X, r24
 1d4:	00 c0       	rjmp	.+0      	; 0x1d6 <turnOffPWM+0xf4>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 1d6:	a0 e8       	ldi	r26, 0x80	; 128
 1d8:	b0 e0       	ldi	r27, 0x00	; 0
 1da:	e0 e8       	ldi	r30, 0x80	; 128
 1dc:	f0 e0       	ldi	r31, 0x00	; 0
 1de:	80 81       	ld	r24, Z
 1e0:	8f 7d       	andi	r24, 0xDF	; 223
 1e2:	8c 93       	st	X, r24
 1e4:	00 c0       	rjmp	.+0      	; 0x1e6 <turnOffPWM+0x104>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
 1e6:	a4 e4       	ldi	r26, 0x44	; 68
 1e8:	b0 e0       	ldi	r27, 0x00	; 0
 1ea:	e4 e4       	ldi	r30, 0x44	; 68
 1ec:	f0 e0       	ldi	r31, 0x00	; 0
 1ee:	80 81       	ld	r24, Z
 1f0:	8f 77       	andi	r24, 0x7F	; 127
 1f2:	8c 93       	st	X, r24
 1f4:	00 c0       	rjmp	.+0      	; 0x1f6 <turnOffPWM+0x114>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
 1f6:	a4 e4       	ldi	r26, 0x44	; 68
 1f8:	b0 e0       	ldi	r27, 0x00	; 0
 1fa:	e4 e4       	ldi	r30, 0x44	; 68
 1fc:	f0 e0       	ldi	r31, 0x00	; 0
 1fe:	80 81       	ld	r24, Z
 200:	8f 7d       	andi	r24, 0xDF	; 223
 202:	8c 93       	st	X, r24
 204:	00 c0       	rjmp	.+0      	; 0x206 <turnOffPWM+0x124>
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
 206:	a0 eb       	ldi	r26, 0xB0	; 176
 208:	b0 e0       	ldi	r27, 0x00	; 0
 20a:	e0 eb       	ldi	r30, 0xB0	; 176
 20c:	f0 e0       	ldi	r31, 0x00	; 0
 20e:	80 81       	ld	r24, Z
 210:	8f 77       	andi	r24, 0x7F	; 127
 212:	8c 93       	st	X, r24
 214:	00 c0       	rjmp	.+0      	; 0x216 <turnOffPWM+0x134>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
 216:	a0 eb       	ldi	r26, 0xB0	; 176
 218:	b0 e0       	ldi	r27, 0x00	; 0
 21a:	e0 eb       	ldi	r30, 0xB0	; 176
 21c:	f0 e0       	ldi	r31, 0x00	; 0
 21e:	80 81       	ld	r24, Z
 220:	8f 7d       	andi	r24, 0xDF	; 223
 222:	8c 93       	st	X, r24
 224:	00 c0       	rjmp	.+0      	; 0x226 <turnOffPWM+0x144>
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
 226:	a0 e9       	ldi	r26, 0x90	; 144
 228:	b0 e0       	ldi	r27, 0x00	; 0
 22a:	e0 e9       	ldi	r30, 0x90	; 144
 22c:	f0 e0       	ldi	r31, 0x00	; 0
 22e:	80 81       	ld	r24, Z
 230:	8f 77       	andi	r24, 0x7F	; 127
 232:	8c 93       	st	X, r24
 234:	00 c0       	rjmp	.+0      	; 0x236 <turnOffPWM+0x154>
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
 236:	a0 e9       	ldi	r26, 0x90	; 144
 238:	b0 e0       	ldi	r27, 0x00	; 0
 23a:	e0 e9       	ldi	r30, 0x90	; 144
 23c:	f0 e0       	ldi	r31, 0x00	; 0
 23e:	80 81       	ld	r24, Z
 240:	8f 7d       	andi	r24, 0xDF	; 223
 242:	8c 93       	st	X, r24
 244:	00 c0       	rjmp	.+0      	; 0x246 <turnOffPWM+0x164>
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
 246:	a0 e9       	ldi	r26, 0x90	; 144
 248:	b0 e0       	ldi	r27, 0x00	; 0
 24a:	e0 e9       	ldi	r30, 0x90	; 144
 24c:	f0 e0       	ldi	r31, 0x00	; 0
 24e:	80 81       	ld	r24, Z
 250:	87 7f       	andi	r24, 0xF7	; 247
 252:	8c 93       	st	X, r24
 254:	00 c0       	rjmp	.+0      	; 0x256 <turnOffPWM+0x174>
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
 256:	a0 ea       	ldi	r26, 0xA0	; 160
 258:	b0 e0       	ldi	r27, 0x00	; 0
 25a:	e0 ea       	ldi	r30, 0xA0	; 160
 25c:	f0 e0       	ldi	r31, 0x00	; 0
 25e:	80 81       	ld	r24, Z
 260:	8f 77       	andi	r24, 0x7F	; 127
 262:	8c 93       	st	X, r24
 264:	00 c0       	rjmp	.+0      	; 0x266 <turnOffPWM+0x184>
		#endif
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
 266:	a0 ea       	ldi	r26, 0xA0	; 160
 268:	b0 e0       	ldi	r27, 0x00	; 0
 26a:	e0 ea       	ldi	r30, 0xA0	; 160
 26c:	f0 e0       	ldi	r31, 0x00	; 0
 26e:	80 81       	ld	r24, Z
 270:	8f 7d       	andi	r24, 0xDF	; 223
 272:	8c 93       	st	X, r24
 274:	00 c0       	rjmp	.+0      	; 0x276 <turnOffPWM+0x194>
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
 276:	a0 ea       	ldi	r26, 0xA0	; 160
 278:	b0 e0       	ldi	r27, 0x00	; 0
 27a:	e0 ea       	ldi	r30, 0xA0	; 160
 27c:	f0 e0       	ldi	r31, 0x00	; 0
 27e:	80 81       	ld	r24, Z
 280:	87 7f       	andi	r24, 0xF7	; 247
 282:	8c 93       	st	X, r24
 284:	00 c0       	rjmp	.+0      	; 0x286 <turnOffPWM+0x1a4>
		#endif
		#if defined(TCCR5A)
		case  TIMER5A:  cbi(TCCR5A, COM5A1);    break;
 286:	a0 e2       	ldi	r26, 0x20	; 32
 288:	b1 e0       	ldi	r27, 0x01	; 1
 28a:	e0 e2       	ldi	r30, 0x20	; 32
 28c:	f1 e0       	ldi	r31, 0x01	; 1
 28e:	80 81       	ld	r24, Z
 290:	8f 77       	andi	r24, 0x7F	; 127
 292:	8c 93       	st	X, r24
 294:	00 c0       	rjmp	.+0      	; 0x296 <turnOffPWM+0x1b4>
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
 296:	a0 e2       	ldi	r26, 0x20	; 32
 298:	b1 e0       	ldi	r27, 0x01	; 1
 29a:	e0 e2       	ldi	r30, 0x20	; 32
 29c:	f1 e0       	ldi	r31, 0x01	; 1
 29e:	80 81       	ld	r24, Z
 2a0:	8f 7d       	andi	r24, 0xDF	; 223
 2a2:	8c 93       	st	X, r24
 2a4:	00 c0       	rjmp	.+0      	; 0x2a6 <turnOffPWM+0x1c4>
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
 2a6:	a0 e2       	ldi	r26, 0x20	; 32
 2a8:	b1 e0       	ldi	r27, 0x01	; 1
 2aa:	e0 e2       	ldi	r30, 0x20	; 32
 2ac:	f1 e0       	ldi	r31, 0x01	; 1
 2ae:	80 81       	ld	r24, Z
 2b0:	87 7f       	andi	r24, 0xF7	; 247
 2b2:	8c 93       	st	X, r24
		#endif
	}
}
 2b4:	0f 90       	pop	r0
 2b6:	0f 90       	pop	r0
 2b8:	0f 90       	pop	r0
 2ba:	cf 91       	pop	r28
 2bc:	df 91       	pop	r29
 2be:	08 95       	ret

000002c0 <digitalWrite>:

void digitalWrite(uint8_t pin, uint8_t val)
{
 2c0:	df 93       	push	r29
 2c2:	cf 93       	push	r28
 2c4:	cd b7       	in	r28, 0x3d	; 61
 2c6:	de b7       	in	r29, 0x3e	; 62
 2c8:	66 97       	sbiw	r28, 0x16	; 22
 2ca:	0f b6       	in	r0, 0x3f	; 63
 2cc:	f8 94       	cli
 2ce:	de bf       	out	0x3e, r29	; 62
 2d0:	0f be       	out	0x3f, r0	; 63
 2d2:	cd bf       	out	0x3d, r28	; 61
 2d4:	8d 8b       	std	Y+21, r24	; 0x15
 2d6:	6e 8b       	std	Y+22, r22	; 0x16
	uint8_t timer = digitalPinToTimer(pin);
 2d8:	8d 89       	ldd	r24, Y+21	; 0x15
 2da:	88 2f       	mov	r24, r24
 2dc:	90 e0       	ldi	r25, 0x00	; 0
 2de:	80 50       	subi	r24, 0x00	; 0
 2e0:	90 40       	sbci	r25, 0x00	; 0
 2e2:	9f 87       	std	Y+15, r25	; 0x0f
 2e4:	8e 87       	std	Y+14, r24	; 0x0e
 2e6:	ee 85       	ldd	r30, Y+14	; 0x0e
 2e8:	ff 85       	ldd	r31, Y+15	; 0x0f
 2ea:	84 91       	lpm	r24, Z+
 2ec:	8d 87       	std	Y+13, r24	; 0x0d
 2ee:	8d 85       	ldd	r24, Y+13	; 0x0d
 2f0:	8c 8b       	std	Y+20, r24	; 0x14
	uint8_t bit = digitalPinToBitMask(pin);
 2f2:	8d 89       	ldd	r24, Y+21	; 0x15
 2f4:	88 2f       	mov	r24, r24
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	80 50       	subi	r24, 0x00	; 0
 2fa:	90 40       	sbci	r25, 0x00	; 0
 2fc:	9c 87       	std	Y+12, r25	; 0x0c
 2fe:	8b 87       	std	Y+11, r24	; 0x0b
 300:	eb 85       	ldd	r30, Y+11	; 0x0b
 302:	fc 85       	ldd	r31, Y+12	; 0x0c
 304:	84 91       	lpm	r24, Z+
 306:	8a 87       	std	Y+10, r24	; 0x0a
 308:	8a 85       	ldd	r24, Y+10	; 0x0a
 30a:	8b 8b       	std	Y+19, r24	; 0x13
	uint8_t port = digitalPinToPort(pin);
 30c:	8d 89       	ldd	r24, Y+21	; 0x15
 30e:	88 2f       	mov	r24, r24
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	80 50       	subi	r24, 0x00	; 0
 314:	90 40       	sbci	r25, 0x00	; 0
 316:	99 87       	std	Y+9, r25	; 0x09
 318:	88 87       	std	Y+8, r24	; 0x08
 31a:	e8 85       	ldd	r30, Y+8	; 0x08
 31c:	f9 85       	ldd	r31, Y+9	; 0x09
 31e:	84 91       	lpm	r24, Z+
 320:	8f 83       	std	Y+7, r24	; 0x07
 322:	8f 81       	ldd	r24, Y+7	; 0x07
 324:	8a 8b       	std	Y+18, r24	; 0x12
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
 326:	8a 89       	ldd	r24, Y+18	; 0x12
 328:	88 23       	and	r24, r24
 32a:	01 f4       	brne	.+0      	; 0x32c <digitalWrite+0x6c>
 32c:	00 c0       	rjmp	.+0      	; 0x32e <digitalWrite+0x6e>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
 32e:	8c 89       	ldd	r24, Y+20	; 0x14
 330:	88 23       	and	r24, r24
 332:	01 f0       	breq	.+0      	; 0x334 <digitalWrite+0x74>
 334:	8c 89       	ldd	r24, Y+20	; 0x14
 336:	0e 94 00 00 	call	0	; 0x0 <pinMode>

	out = portOutputRegister(port);
 33a:	8a 89       	ldd	r24, Y+18	; 0x12
 33c:	88 2f       	mov	r24, r24
 33e:	90 e0       	ldi	r25, 0x00	; 0
 340:	88 0f       	add	r24, r24
 342:	99 1f       	adc	r25, r25
 344:	80 50       	subi	r24, 0x00	; 0
 346:	90 40       	sbci	r25, 0x00	; 0
 348:	9e 83       	std	Y+6, r25	; 0x06
 34a:	8d 83       	std	Y+5, r24	; 0x05
 34c:	8d 81       	ldd	r24, Y+5	; 0x05
 34e:	9e 81       	ldd	r25, Y+6	; 0x06
 350:	fc 01       	movw	r30, r24
 352:	85 91       	lpm	r24, Z+
 354:	94 91       	lpm	r25, Z+
 356:	9c 83       	std	Y+4, r25	; 0x04
 358:	8b 83       	std	Y+3, r24	; 0x03
 35a:	fe 83       	std	Y+6, r31	; 0x06
 35c:	ed 83       	std	Y+5, r30	; 0x05
 35e:	8b 81       	ldd	r24, Y+3	; 0x03
 360:	9c 81       	ldd	r25, Y+4	; 0x04
 362:	99 8b       	std	Y+17, r25	; 0x11
 364:	88 8b       	std	Y+16, r24	; 0x10

	if (val == LOW) {
 366:	8e 89       	ldd	r24, Y+22	; 0x16
 368:	88 23       	and	r24, r24
 36a:	01 f4       	brne	.+0      	; 0x36c <digitalWrite+0xac>
		uint8_t oldSREG = SREG;
 36c:	ef e5       	ldi	r30, 0x5F	; 95
 36e:	f0 e0       	ldi	r31, 0x00	; 0
 370:	80 81       	ld	r24, Z
 372:	8a 83       	std	Y+2, r24	; 0x02
                cli();
 374:	f8 94       	cli
		*out &= ~bit;
 376:	e8 89       	ldd	r30, Y+16	; 0x10
 378:	f9 89       	ldd	r31, Y+17	; 0x11
 37a:	80 81       	ld	r24, Z
 37c:	98 2f       	mov	r25, r24
 37e:	8b 89       	ldd	r24, Y+19	; 0x13
 380:	80 95       	com	r24
 382:	89 23       	and	r24, r25
 384:	e8 89       	ldd	r30, Y+16	; 0x10
 386:	f9 89       	ldd	r31, Y+17	; 0x11
 388:	80 83       	st	Z, r24
		SREG = oldSREG;
 38a:	ef e5       	ldi	r30, 0x5F	; 95
 38c:	f0 e0       	ldi	r31, 0x00	; 0
 38e:	8a 81       	ldd	r24, Y+2	; 0x02
 390:	80 83       	st	Z, r24
 392:	00 c0       	rjmp	.+0      	; 0x394 <digitalWrite+0xd4>
	} else {
		uint8_t oldSREG = SREG;
 394:	ef e5       	ldi	r30, 0x5F	; 95
 396:	f0 e0       	ldi	r31, 0x00	; 0
 398:	80 81       	ld	r24, Z
 39a:	89 83       	std	Y+1, r24	; 0x01
                cli();
 39c:	f8 94       	cli
		*out |= bit;
 39e:	e8 89       	ldd	r30, Y+16	; 0x10
 3a0:	f9 89       	ldd	r31, Y+17	; 0x11
 3a2:	90 81       	ld	r25, Z
 3a4:	8b 89       	ldd	r24, Y+19	; 0x13
 3a6:	89 2b       	or	r24, r25
 3a8:	e8 89       	ldd	r30, Y+16	; 0x10
 3aa:	f9 89       	ldd	r31, Y+17	; 0x11
 3ac:	80 83       	st	Z, r24
		SREG = oldSREG;
 3ae:	ef e5       	ldi	r30, 0x5F	; 95
 3b0:	f0 e0       	ldi	r31, 0x00	; 0
 3b2:	89 81       	ldd	r24, Y+1	; 0x01
 3b4:	80 83       	st	Z, r24
	}
}
 3b6:	66 96       	adiw	r28, 0x16	; 22
 3b8:	0f b6       	in	r0, 0x3f	; 63
 3ba:	f8 94       	cli
 3bc:	de bf       	out	0x3e, r29	; 62
 3be:	0f be       	out	0x3f, r0	; 63
 3c0:	cd bf       	out	0x3d, r28	; 61
 3c2:	cf 91       	pop	r28
 3c4:	df 91       	pop	r29
 3c6:	08 95       	ret

000003c8 <digitalRead>:

int digitalRead(uint8_t pin)
{
 3c8:	df 93       	push	r29
 3ca:	cf 93       	push	r28
 3cc:	cd b7       	in	r28, 0x3d	; 61
 3ce:	de b7       	in	r29, 0x3e	; 62
 3d0:	63 97       	sbiw	r28, 0x13	; 19
 3d2:	0f b6       	in	r0, 0x3f	; 63
 3d4:	f8 94       	cli
 3d6:	de bf       	out	0x3e, r29	; 62
 3d8:	0f be       	out	0x3f, r0	; 63
 3da:	cd bf       	out	0x3d, r28	; 61
 3dc:	89 8b       	std	Y+17, r24	; 0x11
	uint8_t timer = digitalPinToTimer(pin);
 3de:	89 89       	ldd	r24, Y+17	; 0x11
 3e0:	88 2f       	mov	r24, r24
 3e2:	90 e0       	ldi	r25, 0x00	; 0
 3e4:	80 50       	subi	r24, 0x00	; 0
 3e6:	90 40       	sbci	r25, 0x00	; 0
 3e8:	9d 87       	std	Y+13, r25	; 0x0d
 3ea:	8c 87       	std	Y+12, r24	; 0x0c
 3ec:	ec 85       	ldd	r30, Y+12	; 0x0c
 3ee:	fd 85       	ldd	r31, Y+13	; 0x0d
 3f0:	84 91       	lpm	r24, Z+
 3f2:	8b 87       	std	Y+11, r24	; 0x0b
 3f4:	8b 85       	ldd	r24, Y+11	; 0x0b
 3f6:	88 8b       	std	Y+16, r24	; 0x10
	uint8_t bit = digitalPinToBitMask(pin);
 3f8:	89 89       	ldd	r24, Y+17	; 0x11
 3fa:	88 2f       	mov	r24, r24
 3fc:	90 e0       	ldi	r25, 0x00	; 0
 3fe:	80 50       	subi	r24, 0x00	; 0
 400:	90 40       	sbci	r25, 0x00	; 0
 402:	9a 87       	std	Y+10, r25	; 0x0a
 404:	89 87       	std	Y+9, r24	; 0x09
 406:	e9 85       	ldd	r30, Y+9	; 0x09
 408:	fa 85       	ldd	r31, Y+10	; 0x0a
 40a:	84 91       	lpm	r24, Z+
 40c:	88 87       	std	Y+8, r24	; 0x08
 40e:	88 85       	ldd	r24, Y+8	; 0x08
 410:	8f 87       	std	Y+15, r24	; 0x0f
	uint8_t port = digitalPinToPort(pin);
 412:	89 89       	ldd	r24, Y+17	; 0x11
 414:	88 2f       	mov	r24, r24
 416:	90 e0       	ldi	r25, 0x00	; 0
 418:	80 50       	subi	r24, 0x00	; 0
 41a:	90 40       	sbci	r25, 0x00	; 0
 41c:	9f 83       	std	Y+7, r25	; 0x07
 41e:	8e 83       	std	Y+6, r24	; 0x06
 420:	ee 81       	ldd	r30, Y+6	; 0x06
 422:	ff 81       	ldd	r31, Y+7	; 0x07
 424:	84 91       	lpm	r24, Z+
 426:	8d 83       	std	Y+5, r24	; 0x05
 428:	8d 81       	ldd	r24, Y+5	; 0x05
 42a:	8e 87       	std	Y+14, r24	; 0x0e

	if (port == NOT_A_PIN) return LOW;
 42c:	8e 85       	ldd	r24, Y+14	; 0x0e
 42e:	88 23       	and	r24, r24
 430:	01 f4       	brne	.+0      	; 0x432 <digitalRead+0x6a>
 432:	1b 8a       	std	Y+19, r1	; 0x13
 434:	1a 8a       	std	Y+18, r1	; 0x12
 436:	00 c0       	rjmp	.+0      	; 0x438 <digitalRead+0x70>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
 438:	88 89       	ldd	r24, Y+16	; 0x10
 43a:	88 23       	and	r24, r24
 43c:	01 f0       	breq	.+0      	; 0x43e <digitalRead+0x76>
 43e:	88 89       	ldd	r24, Y+16	; 0x10
 440:	0e 94 00 00 	call	0	; 0x0 <pinMode>

	if (*portInputRegister(port) & bit) return HIGH;
 444:	8e 85       	ldd	r24, Y+14	; 0x0e
 446:	88 2f       	mov	r24, r24
 448:	90 e0       	ldi	r25, 0x00	; 0
 44a:	88 0f       	add	r24, r24
 44c:	99 1f       	adc	r25, r25
 44e:	80 50       	subi	r24, 0x00	; 0
 450:	90 40       	sbci	r25, 0x00	; 0
 452:	9c 83       	std	Y+4, r25	; 0x04
 454:	8b 83       	std	Y+3, r24	; 0x03
 456:	8b 81       	ldd	r24, Y+3	; 0x03
 458:	9c 81       	ldd	r25, Y+4	; 0x04
 45a:	fc 01       	movw	r30, r24
 45c:	85 91       	lpm	r24, Z+
 45e:	94 91       	lpm	r25, Z+
 460:	9a 83       	std	Y+2, r25	; 0x02
 462:	89 83       	std	Y+1, r24	; 0x01
 464:	fc 83       	std	Y+4, r31	; 0x04
 466:	eb 83       	std	Y+3, r30	; 0x03
 468:	89 81       	ldd	r24, Y+1	; 0x01
 46a:	9a 81       	ldd	r25, Y+2	; 0x02
 46c:	fc 01       	movw	r30, r24
 46e:	90 81       	ld	r25, Z
 470:	8f 85       	ldd	r24, Y+15	; 0x0f
 472:	89 23       	and	r24, r25
 474:	88 23       	and	r24, r24
 476:	01 f0       	breq	.+0      	; 0x478 <digitalRead+0xb0>
 478:	81 e0       	ldi	r24, 0x01	; 1
 47a:	90 e0       	ldi	r25, 0x00	; 0
 47c:	9b 8b       	std	Y+19, r25	; 0x13
 47e:	8a 8b       	std	Y+18, r24	; 0x12
 480:	00 c0       	rjmp	.+0      	; 0x482 <digitalRead+0xba>
	return LOW;
 482:	1b 8a       	std	Y+19, r1	; 0x13
 484:	1a 8a       	std	Y+18, r1	; 0x12
 486:	8a 89       	ldd	r24, Y+18	; 0x12
 488:	9b 89       	ldd	r25, Y+19	; 0x13
}
 48a:	63 96       	adiw	r28, 0x13	; 19
 48c:	0f b6       	in	r0, 0x3f	; 63
 48e:	f8 94       	cli
 490:	de bf       	out	0x3e, r29	; 62
 492:	0f be       	out	0x3f, r0	; 63
 494:	cd bf       	out	0x3d, r28	; 61
 496:	cf 91       	pop	r28
 498:	df 91       	pop	r29
 49a:	08 95       	ret

wiring_pulse.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002a2  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  1 .data         00000004  00000000  00000000  000002d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  000002da  2**0
                  ALLOC
  3 .stab         00000750  00000000  00000000  000002dc  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00000cb6  00000000  00000000  00000a2c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <pulseIn>:
/* Measures the length (in microseconds) of a pulse on the pin; state is HIGH
 * or LOW, the type of pulse to measure.  Works on pulses from 2-3 microseconds
 * to 3 minutes in length, but must be called at least a few dozen microseconds
 * before the start of the pulse. */
unsigned long pulseIn(uint8_t pin, uint8_t state, unsigned long timeout)
{
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	cd b7       	in	r28, 0x3d	; 61
   6:	de b7       	in	r29, 0x3e	; 62
   8:	af 97       	sbiw	r28, 0x2f	; 47
   a:	0f b6       	in	r0, 0x3f	; 63
   c:	f8 94       	cli
   e:	de bf       	out	0x3e, r29	; 62
  10:	0f be       	out	0x3f, r0	; 63
  12:	cd bf       	out	0x3d, r28	; 61
  14:	8a a3       	std	Y+34, r24	; 0x22
  16:	6b a3       	std	Y+35, r22	; 0x23
  18:	2c a3       	std	Y+36, r18	; 0x24
  1a:	3d a3       	std	Y+37, r19	; 0x25
  1c:	4e a3       	std	Y+38, r20	; 0x26
  1e:	5f a3       	std	Y+39, r21	; 0x27
	// cache the port and bit of the pin in order to speed up the
	// pulse width measuring loop and achieve finer resolution.  calling
	// digitalRead() instead yields much coarser resolution.
	uint8_t bit = digitalPinToBitMask(pin);
  20:	8a a1       	ldd	r24, Y+34	; 0x22
  22:	88 2f       	mov	r24, r24
  24:	90 e0       	ldi	r25, 0x00	; 0
  26:	80 50       	subi	r24, 0x00	; 0
  28:	90 40       	sbci	r25, 0x00	; 0
  2a:	9a 8b       	std	Y+18, r25	; 0x12
  2c:	89 8b       	std	Y+17, r24	; 0x11
  2e:	e9 89       	ldd	r30, Y+17	; 0x11
  30:	fa 89       	ldd	r31, Y+18	; 0x12
  32:	84 91       	lpm	r24, Z+
  34:	88 8b       	std	Y+16, r24	; 0x10
  36:	88 89       	ldd	r24, Y+16	; 0x10
  38:	89 a3       	std	Y+33, r24	; 0x21
	uint8_t port = digitalPinToPort(pin);
  3a:	8a a1       	ldd	r24, Y+34	; 0x22
  3c:	88 2f       	mov	r24, r24
  3e:	90 e0       	ldi	r25, 0x00	; 0
  40:	80 50       	subi	r24, 0x00	; 0
  42:	90 40       	sbci	r25, 0x00	; 0
  44:	9f 87       	std	Y+15, r25	; 0x0f
  46:	8e 87       	std	Y+14, r24	; 0x0e
  48:	ee 85       	ldd	r30, Y+14	; 0x0e
  4a:	ff 85       	ldd	r31, Y+15	; 0x0f
  4c:	84 91       	lpm	r24, Z+
  4e:	8d 87       	std	Y+13, r24	; 0x0d
  50:	8d 85       	ldd	r24, Y+13	; 0x0d
  52:	88 a3       	std	Y+32, r24	; 0x20
	uint8_t stateMask = (state ? bit : 0);
  54:	8b a1       	ldd	r24, Y+35	; 0x23
  56:	88 23       	and	r24, r24
  58:	01 f0       	breq	.+0      	; 0x5a <pulseIn+0x5a>
  5a:	89 a1       	ldd	r24, Y+33	; 0x21
  5c:	8f a7       	std	Y+47, r24	; 0x2f
  5e:	00 c0       	rjmp	.+0      	; 0x60 <pulseIn+0x60>
  60:	1f a6       	std	Y+47, r1	; 0x2f
  62:	8f a5       	ldd	r24, Y+47	; 0x2f
  64:	8f 8f       	std	Y+31, r24	; 0x1f
	unsigned long width = 0; // keep initialization out of time critical area
  66:	1b 8e       	std	Y+27, r1	; 0x1b
  68:	1c 8e       	std	Y+28, r1	; 0x1c
  6a:	1d 8e       	std	Y+29, r1	; 0x1d
  6c:	1e 8e       	std	Y+30, r1	; 0x1e
	
	// convert the timeout from microseconds to a number of times through
	// the initial loop; it takes 16 clock cycles per iteration.
	unsigned long numloops = 0;
  6e:	1f 8a       	std	Y+23, r1	; 0x17
  70:	18 8e       	std	Y+24, r1	; 0x18
  72:	19 8e       	std	Y+25, r1	; 0x19
  74:	1a 8e       	std	Y+26, r1	; 0x1a
	unsigned long maxloops = microsecondsToClockCycles(timeout) / 16;
  76:	8c a1       	ldd	r24, Y+36	; 0x24
  78:	9d a1       	ldd	r25, Y+37	; 0x25
  7a:	ae a1       	ldd	r26, Y+38	; 0x26
  7c:	bf a1       	ldd	r27, Y+39	; 0x27
  7e:	20 e8       	ldi	r18, 0x80	; 128
  80:	3e e3       	ldi	r19, 0x3E	; 62
  82:	40 e0       	ldi	r20, 0x00	; 0
  84:	50 e0       	ldi	r21, 0x00	; 0
  86:	bc 01       	movw	r22, r24
  88:	cd 01       	movw	r24, r26
  8a:	0e 94 00 00 	call	0	; 0x0 <pulseIn>
  8e:	dc 01       	movw	r26, r24
  90:	cb 01       	movw	r24, r22
  92:	20 e8       	ldi	r18, 0x80	; 128
  94:	3e e3       	ldi	r19, 0x3E	; 62
  96:	40 e0       	ldi	r20, 0x00	; 0
  98:	50 e0       	ldi	r21, 0x00	; 0
  9a:	bc 01       	movw	r22, r24
  9c:	cd 01       	movw	r24, r26
  9e:	0e 94 00 00 	call	0	; 0x0 <pulseIn>
  a2:	da 01       	movw	r26, r20
  a4:	c9 01       	movw	r24, r18
  a6:	8b 8b       	std	Y+19, r24	; 0x13
  a8:	9c 8b       	std	Y+20, r25	; 0x14
  aa:	ad 8b       	std	Y+21, r26	; 0x15
  ac:	be 8b       	std	Y+22, r27	; 0x16
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <pulseIn+0xb0>
	
	// wait for any previous pulse to end
	while ((*portInputRegister(port) & bit) == stateMask)
		if (numloops++ == maxloops)
  b0:	1e a6       	std	Y+46, r1	; 0x2e
  b2:	2f 89       	ldd	r18, Y+23	; 0x17
  b4:	38 8d       	ldd	r19, Y+24	; 0x18
  b6:	49 8d       	ldd	r20, Y+25	; 0x19
  b8:	5a 8d       	ldd	r21, Y+26	; 0x1a
  ba:	8b 89       	ldd	r24, Y+19	; 0x13
  bc:	9c 89       	ldd	r25, Y+20	; 0x14
  be:	ad 89       	ldd	r26, Y+21	; 0x15
  c0:	be 89       	ldd	r27, Y+22	; 0x16
  c2:	28 17       	cp	r18, r24
  c4:	39 07       	cpc	r19, r25
  c6:	4a 07       	cpc	r20, r26
  c8:	5b 07       	cpc	r21, r27
  ca:	01 f4       	brne	.+0      	; 0xcc <pulseIn+0xcc>
  cc:	81 e0       	ldi	r24, 0x01	; 1
  ce:	8e a7       	std	Y+46, r24	; 0x2e
  d0:	8f 89       	ldd	r24, Y+23	; 0x17
  d2:	98 8d       	ldd	r25, Y+24	; 0x18
  d4:	a9 8d       	ldd	r26, Y+25	; 0x19
  d6:	ba 8d       	ldd	r27, Y+26	; 0x1a
  d8:	01 96       	adiw	r24, 0x01	; 1
  da:	a1 1d       	adc	r26, r1
  dc:	b1 1d       	adc	r27, r1
  de:	8f 8b       	std	Y+23, r24	; 0x17
  e0:	98 8f       	std	Y+24, r25	; 0x18
  e2:	a9 8f       	std	Y+25, r26	; 0x19
  e4:	ba 8f       	std	Y+26, r27	; 0x1a
  e6:	8e a5       	ldd	r24, Y+46	; 0x2e
  e8:	88 23       	and	r24, r24
  ea:	01 f0       	breq	.+0      	; 0xec <pulseIn+0xec>
			return 0;
  ec:	1a a6       	std	Y+42, r1	; 0x2a
  ee:	1b a6       	std	Y+43, r1	; 0x2b
  f0:	1c a6       	std	Y+44, r1	; 0x2c
  f2:	1d a6       	std	Y+45, r1	; 0x2d
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <pulseIn+0xf6>
	// the initial loop; it takes 16 clock cycles per iteration.
	unsigned long numloops = 0;
	unsigned long maxloops = microsecondsToClockCycles(timeout) / 16;
	
	// wait for any previous pulse to end
	while ((*portInputRegister(port) & bit) == stateMask)
  f6:	88 a1       	ldd	r24, Y+32	; 0x20
  f8:	88 2f       	mov	r24, r24
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	88 0f       	add	r24, r24
  fe:	99 1f       	adc	r25, r25
 100:	80 50       	subi	r24, 0x00	; 0
 102:	90 40       	sbci	r25, 0x00	; 0
 104:	9c 87       	std	Y+12, r25	; 0x0c
 106:	8b 87       	std	Y+11, r24	; 0x0b
 108:	8b 85       	ldd	r24, Y+11	; 0x0b
 10a:	9c 85       	ldd	r25, Y+12	; 0x0c
 10c:	fc 01       	movw	r30, r24
 10e:	85 91       	lpm	r24, Z+
 110:	94 91       	lpm	r25, Z+
 112:	9a 87       	std	Y+10, r25	; 0x0a
 114:	89 87       	std	Y+9, r24	; 0x09
 116:	fc 87       	std	Y+12, r31	; 0x0c
 118:	eb 87       	std	Y+11, r30	; 0x0b
 11a:	89 85       	ldd	r24, Y+9	; 0x09
 11c:	9a 85       	ldd	r25, Y+10	; 0x0a
 11e:	fc 01       	movw	r30, r24
 120:	90 81       	ld	r25, Z
 122:	89 a1       	ldd	r24, Y+33	; 0x21
 124:	98 23       	and	r25, r24
 126:	8f 8d       	ldd	r24, Y+31	; 0x1f
 128:	98 17       	cp	r25, r24
 12a:	01 f4       	brne	.+0      	; 0x12c <pulseIn+0x12c>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <pulseIn+0x12e>
 12e:	00 c0       	rjmp	.+0      	; 0x130 <pulseIn+0x130>
		if (numloops++ == maxloops)
			return 0;
	
	// wait for the pulse to start
	while ((*portInputRegister(port) & bit) != stateMask)
		if (numloops++ == maxloops)
 130:	19 a6       	std	Y+41, r1	; 0x29
 132:	2f 89       	ldd	r18, Y+23	; 0x17
 134:	38 8d       	ldd	r19, Y+24	; 0x18
 136:	49 8d       	ldd	r20, Y+25	; 0x19
 138:	5a 8d       	ldd	r21, Y+26	; 0x1a
 13a:	8b 89       	ldd	r24, Y+19	; 0x13
 13c:	9c 89       	ldd	r25, Y+20	; 0x14
 13e:	ad 89       	ldd	r26, Y+21	; 0x15
 140:	be 89       	ldd	r27, Y+22	; 0x16
 142:	28 17       	cp	r18, r24
 144:	39 07       	cpc	r19, r25
 146:	4a 07       	cpc	r20, r26
 148:	5b 07       	cpc	r21, r27
 14a:	01 f4       	brne	.+0      	; 0x14c <pulseIn+0x14c>
 14c:	81 e0       	ldi	r24, 0x01	; 1
 14e:	89 a7       	std	Y+41, r24	; 0x29
 150:	8f 89       	ldd	r24, Y+23	; 0x17
 152:	98 8d       	ldd	r25, Y+24	; 0x18
 154:	a9 8d       	ldd	r26, Y+25	; 0x19
 156:	ba 8d       	ldd	r27, Y+26	; 0x1a
 158:	01 96       	adiw	r24, 0x01	; 1
 15a:	a1 1d       	adc	r26, r1
 15c:	b1 1d       	adc	r27, r1
 15e:	8f 8b       	std	Y+23, r24	; 0x17
 160:	98 8f       	std	Y+24, r25	; 0x18
 162:	a9 8f       	std	Y+25, r26	; 0x19
 164:	ba 8f       	std	Y+26, r27	; 0x1a
 166:	89 a5       	ldd	r24, Y+41	; 0x29
 168:	88 23       	and	r24, r24
 16a:	01 f0       	breq	.+0      	; 0x16c <pulseIn+0x16c>
			return 0;
 16c:	1a a6       	std	Y+42, r1	; 0x2a
 16e:	1b a6       	std	Y+43, r1	; 0x2b
 170:	1c a6       	std	Y+44, r1	; 0x2c
 172:	1d a6       	std	Y+45, r1	; 0x2d
 174:	00 c0       	rjmp	.+0      	; 0x176 <pulseIn+0x176>
	while ((*portInputRegister(port) & bit) == stateMask)
		if (numloops++ == maxloops)
			return 0;
	
	// wait for the pulse to start
	while ((*portInputRegister(port) & bit) != stateMask)
 176:	88 a1       	ldd	r24, Y+32	; 0x20
 178:	88 2f       	mov	r24, r24
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	88 0f       	add	r24, r24
 17e:	99 1f       	adc	r25, r25
 180:	80 50       	subi	r24, 0x00	; 0
 182:	90 40       	sbci	r25, 0x00	; 0
 184:	98 87       	std	Y+8, r25	; 0x08
 186:	8f 83       	std	Y+7, r24	; 0x07
 188:	8f 81       	ldd	r24, Y+7	; 0x07
 18a:	98 85       	ldd	r25, Y+8	; 0x08
 18c:	fc 01       	movw	r30, r24
 18e:	85 91       	lpm	r24, Z+
 190:	94 91       	lpm	r25, Z+
 192:	9e 83       	std	Y+6, r25	; 0x06
 194:	8d 83       	std	Y+5, r24	; 0x05
 196:	f8 87       	std	Y+8, r31	; 0x08
 198:	ef 83       	std	Y+7, r30	; 0x07
 19a:	8d 81       	ldd	r24, Y+5	; 0x05
 19c:	9e 81       	ldd	r25, Y+6	; 0x06
 19e:	fc 01       	movw	r30, r24
 1a0:	90 81       	ld	r25, Z
 1a2:	89 a1       	ldd	r24, Y+33	; 0x21
 1a4:	98 23       	and	r25, r24
 1a6:	8f 8d       	ldd	r24, Y+31	; 0x1f
 1a8:	98 17       	cp	r25, r24
 1aa:	01 f0       	breq	.+0      	; 0x1ac <pulseIn+0x1ac>
 1ac:	00 c0       	rjmp	.+0      	; 0x1ae <pulseIn+0x1ae>
 1ae:	00 c0       	rjmp	.+0      	; 0x1b0 <pulseIn+0x1b0>
		if (numloops++ == maxloops)
			return 0;
	
	// wait for the pulse to stop
	while ((*portInputRegister(port) & bit) == stateMask) {
		if (numloops++ == maxloops)
 1b0:	18 a6       	std	Y+40, r1	; 0x28
 1b2:	2f 89       	ldd	r18, Y+23	; 0x17
 1b4:	38 8d       	ldd	r19, Y+24	; 0x18
 1b6:	49 8d       	ldd	r20, Y+25	; 0x19
 1b8:	5a 8d       	ldd	r21, Y+26	; 0x1a
 1ba:	8b 89       	ldd	r24, Y+19	; 0x13
 1bc:	9c 89       	ldd	r25, Y+20	; 0x14
 1be:	ad 89       	ldd	r26, Y+21	; 0x15
 1c0:	be 89       	ldd	r27, Y+22	; 0x16
 1c2:	28 17       	cp	r18, r24
 1c4:	39 07       	cpc	r19, r25
 1c6:	4a 07       	cpc	r20, r26
 1c8:	5b 07       	cpc	r21, r27
 1ca:	01 f4       	brne	.+0      	; 0x1cc <pulseIn+0x1cc>
 1cc:	81 e0       	ldi	r24, 0x01	; 1
 1ce:	88 a7       	std	Y+40, r24	; 0x28
 1d0:	8f 89       	ldd	r24, Y+23	; 0x17
 1d2:	98 8d       	ldd	r25, Y+24	; 0x18
 1d4:	a9 8d       	ldd	r26, Y+25	; 0x19
 1d6:	ba 8d       	ldd	r27, Y+26	; 0x1a
 1d8:	01 96       	adiw	r24, 0x01	; 1
 1da:	a1 1d       	adc	r26, r1
 1dc:	b1 1d       	adc	r27, r1
 1de:	8f 8b       	std	Y+23, r24	; 0x17
 1e0:	98 8f       	std	Y+24, r25	; 0x18
 1e2:	a9 8f       	std	Y+25, r26	; 0x19
 1e4:	ba 8f       	std	Y+26, r27	; 0x1a
 1e6:	88 a5       	ldd	r24, Y+40	; 0x28
 1e8:	88 23       	and	r24, r24
 1ea:	01 f0       	breq	.+0      	; 0x1ec <pulseIn+0x1ec>
			return 0;
 1ec:	1a a6       	std	Y+42, r1	; 0x2a
 1ee:	1b a6       	std	Y+43, r1	; 0x2b
 1f0:	1c a6       	std	Y+44, r1	; 0x2c
 1f2:	1d a6       	std	Y+45, r1	; 0x2d
 1f4:	00 c0       	rjmp	.+0      	; 0x1f6 <pulseIn+0x1f6>
		width++;
 1f6:	8b 8d       	ldd	r24, Y+27	; 0x1b
 1f8:	9c 8d       	ldd	r25, Y+28	; 0x1c
 1fa:	ad 8d       	ldd	r26, Y+29	; 0x1d
 1fc:	be 8d       	ldd	r27, Y+30	; 0x1e
 1fe:	01 96       	adiw	r24, 0x01	; 1
 200:	a1 1d       	adc	r26, r1
 202:	b1 1d       	adc	r27, r1
 204:	8b 8f       	std	Y+27, r24	; 0x1b
 206:	9c 8f       	std	Y+28, r25	; 0x1c
 208:	ad 8f       	std	Y+29, r26	; 0x1d
 20a:	be 8f       	std	Y+30, r27	; 0x1e
	while ((*portInputRegister(port) & bit) != stateMask)
		if (numloops++ == maxloops)
			return 0;
	
	// wait for the pulse to stop
	while ((*portInputRegister(port) & bit) == stateMask) {
 20c:	88 a1       	ldd	r24, Y+32	; 0x20
 20e:	88 2f       	mov	r24, r24
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	88 0f       	add	r24, r24
 214:	99 1f       	adc	r25, r25
 216:	80 50       	subi	r24, 0x00	; 0
 218:	90 40       	sbci	r25, 0x00	; 0
 21a:	9c 83       	std	Y+4, r25	; 0x04
 21c:	8b 83       	std	Y+3, r24	; 0x03
 21e:	8b 81       	ldd	r24, Y+3	; 0x03
 220:	9c 81       	ldd	r25, Y+4	; 0x04
 222:	fc 01       	movw	r30, r24
 224:	85 91       	lpm	r24, Z+
 226:	94 91       	lpm	r25, Z+
 228:	9a 83       	std	Y+2, r25	; 0x02
 22a:	89 83       	std	Y+1, r24	; 0x01
 22c:	fc 83       	std	Y+4, r31	; 0x04
 22e:	eb 83       	std	Y+3, r30	; 0x03
 230:	89 81       	ldd	r24, Y+1	; 0x01
 232:	9a 81       	ldd	r25, Y+2	; 0x02
 234:	fc 01       	movw	r30, r24
 236:	90 81       	ld	r25, Z
 238:	89 a1       	ldd	r24, Y+33	; 0x21
 23a:	98 23       	and	r25, r24
 23c:	8f 8d       	ldd	r24, Y+31	; 0x1f
 23e:	98 17       	cp	r25, r24
 240:	01 f4       	brne	.+0      	; 0x242 <pulseIn+0x242>
 242:	00 c0       	rjmp	.+0      	; 0x244 <pulseIn+0x244>

	// convert the reading to microseconds. The loop has been determined
	// to be 20 clock cycles long and have about 16 clocks between the edge
	// and the start of the loop. There will be some error introduced by
	// the interrupt handlers.
	return clockCyclesToMicroseconds(width * 21 + 16); 
 244:	8b 8d       	ldd	r24, Y+27	; 0x1b
 246:	9c 8d       	ldd	r25, Y+28	; 0x1c
 248:	ad 8d       	ldd	r26, Y+29	; 0x1d
 24a:	be 8d       	ldd	r27, Y+30	; 0x1e
 24c:	28 e0       	ldi	r18, 0x08	; 8
 24e:	32 e5       	ldi	r19, 0x52	; 82
 250:	40 e0       	ldi	r20, 0x00	; 0
 252:	50 e0       	ldi	r21, 0x00	; 0
 254:	bc 01       	movw	r22, r24
 256:	cd 01       	movw	r24, r26
 258:	0e 94 00 00 	call	0	; 0x0 <pulseIn>
 25c:	dc 01       	movw	r26, r24
 25e:	cb 01       	movw	r24, r22
 260:	80 58       	subi	r24, 0x80	; 128
 262:	91 4c       	sbci	r25, 0xC1	; 193
 264:	af 4f       	sbci	r26, 0xFF	; 255
 266:	bf 4f       	sbci	r27, 0xFF	; 255
 268:	20 e8       	ldi	r18, 0x80	; 128
 26a:	3e e3       	ldi	r19, 0x3E	; 62
 26c:	40 e0       	ldi	r20, 0x00	; 0
 26e:	50 e0       	ldi	r21, 0x00	; 0
 270:	bc 01       	movw	r22, r24
 272:	cd 01       	movw	r24, r26
 274:	0e 94 00 00 	call	0	; 0x0 <pulseIn>
 278:	da 01       	movw	r26, r20
 27a:	c9 01       	movw	r24, r18
 27c:	8a a7       	std	Y+42, r24	; 0x2a
 27e:	9b a7       	std	Y+43, r25	; 0x2b
 280:	ac a7       	std	Y+44, r26	; 0x2c
 282:	bd a7       	std	Y+45, r27	; 0x2d
 284:	8a a5       	ldd	r24, Y+42	; 0x2a
 286:	9b a5       	ldd	r25, Y+43	; 0x2b
 288:	ac a5       	ldd	r26, Y+44	; 0x2c
 28a:	bd a5       	ldd	r27, Y+45	; 0x2d
}
 28c:	bc 01       	movw	r22, r24
 28e:	cd 01       	movw	r24, r26
 290:	af 96       	adiw	r28, 0x2f	; 47
 292:	0f b6       	in	r0, 0x3f	; 63
 294:	f8 94       	cli
 296:	de bf       	out	0x3e, r29	; 62
 298:	0f be       	out	0x3f, r0	; 63
 29a:	cd bf       	out	0x3d, r28	; 61
 29c:	cf 91       	pop	r28
 29e:	df 91       	pop	r29
 2a0:	08 95       	ret

wiring_shift.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000142  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000176  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000176  2**0
                  ALLOC
  3 .stab         000005b8  00000000  00000000  00000178  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00000a9d  00000000  00000000  00000730  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <shiftIn>:
  $Id: wiring.c 248 2007-02-03 15:36:30Z mellis $
*/

#include "wiring_private.h"

uint8_t shiftIn(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder) {
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <shiftIn+0x6>
   6:	0f 92       	push	r0
   8:	0f 92       	push	r0
   a:	cd b7       	in	r28, 0x3d	; 61
   c:	de b7       	in	r29, 0x3e	; 62
   e:	8b 83       	std	Y+3, r24	; 0x03
  10:	6c 83       	std	Y+4, r22	; 0x04
  12:	4d 83       	std	Y+5, r20	; 0x05
	uint8_t value = 0;
  14:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t i;

	for (i = 0; i < 8; ++i) {
  16:	19 82       	std	Y+1, r1	; 0x01
  18:	00 c0       	rjmp	.+0      	; 0x1a <shiftIn+0x1a>
		digitalWrite(clockPin, HIGH);
  1a:	8c 81       	ldd	r24, Y+4	; 0x04
  1c:	61 e0       	ldi	r22, 0x01	; 1
  1e:	0e 94 00 00 	call	0	; 0x0 <shiftIn>
		if (bitOrder == LSBFIRST)
  22:	8d 81       	ldd	r24, Y+5	; 0x05
  24:	88 23       	and	r24, r24
  26:	01 f4       	brne	.+0      	; 0x28 <shiftIn+0x28>
			value |= digitalRead(dataPin) << i;
  28:	8b 81       	ldd	r24, Y+3	; 0x03
  2a:	0e 94 00 00 	call	0	; 0x0 <shiftIn>
  2e:	9c 01       	movw	r18, r24
  30:	89 81       	ldd	r24, Y+1	; 0x01
  32:	88 2f       	mov	r24, r24
  34:	90 e0       	ldi	r25, 0x00	; 0
  36:	a9 01       	movw	r20, r18
  38:	00 c0       	rjmp	.+0      	; 0x3a <shiftIn+0x3a>
  3a:	44 0f       	add	r20, r20
  3c:	55 1f       	adc	r21, r21
  3e:	8a 95       	dec	r24
  40:	02 f4       	brpl	.+0      	; 0x42 <shiftIn+0x42>
  42:	ca 01       	movw	r24, r20
  44:	98 2f       	mov	r25, r24
  46:	8a 81       	ldd	r24, Y+2	; 0x02
  48:	89 2b       	or	r24, r25
  4a:	8a 83       	std	Y+2, r24	; 0x02
  4c:	00 c0       	rjmp	.+0      	; 0x4e <shiftIn+0x4e>
		else
			value |= digitalRead(dataPin) << (7 - i);
  4e:	8b 81       	ldd	r24, Y+3	; 0x03
  50:	0e 94 00 00 	call	0	; 0x0 <shiftIn>
  54:	ac 01       	movw	r20, r24
  56:	89 81       	ldd	r24, Y+1	; 0x01
  58:	28 2f       	mov	r18, r24
  5a:	30 e0       	ldi	r19, 0x00	; 0
  5c:	87 e0       	ldi	r24, 0x07	; 7
  5e:	90 e0       	ldi	r25, 0x00	; 0
  60:	82 1b       	sub	r24, r18
  62:	93 0b       	sbc	r25, r19
  64:	9a 01       	movw	r18, r20
  66:	00 c0       	rjmp	.+0      	; 0x68 <shiftIn+0x68>
  68:	22 0f       	add	r18, r18
  6a:	33 1f       	adc	r19, r19
  6c:	8a 95       	dec	r24
  6e:	02 f4       	brpl	.+0      	; 0x70 <shiftIn+0x70>
  70:	c9 01       	movw	r24, r18
  72:	98 2f       	mov	r25, r24
  74:	8a 81       	ldd	r24, Y+2	; 0x02
  76:	89 2b       	or	r24, r25
  78:	8a 83       	std	Y+2, r24	; 0x02
		digitalWrite(clockPin, LOW);
  7a:	8c 81       	ldd	r24, Y+4	; 0x04
  7c:	60 e0       	ldi	r22, 0x00	; 0
  7e:	0e 94 00 00 	call	0	; 0x0 <shiftIn>

uint8_t shiftIn(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder) {
	uint8_t value = 0;
	uint8_t i;

	for (i = 0; i < 8; ++i) {
  82:	89 81       	ldd	r24, Y+1	; 0x01
  84:	8f 5f       	subi	r24, 0xFF	; 255
  86:	89 83       	std	Y+1, r24	; 0x01
  88:	89 81       	ldd	r24, Y+1	; 0x01
  8a:	88 30       	cpi	r24, 0x08	; 8
  8c:	00 f0       	brcs	.+0      	; 0x8e <shiftIn+0x8e>
			value |= digitalRead(dataPin) << i;
		else
			value |= digitalRead(dataPin) << (7 - i);
		digitalWrite(clockPin, LOW);
	}
	return value;
  8e:	8a 81       	ldd	r24, Y+2	; 0x02
}
  90:	0f 90       	pop	r0
  92:	0f 90       	pop	r0
  94:	0f 90       	pop	r0
  96:	0f 90       	pop	r0
  98:	0f 90       	pop	r0
  9a:	cf 91       	pop	r28
  9c:	df 91       	pop	r29
  9e:	08 95       	ret

000000a0 <shiftOut>:

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
  a0:	df 93       	push	r29
  a2:	cf 93       	push	r28
  a4:	00 d0       	rcall	.+0      	; 0xa6 <shiftOut+0x6>
  a6:	0f 92       	push	r0
  a8:	0f 92       	push	r0
  aa:	cd b7       	in	r28, 0x3d	; 61
  ac:	de b7       	in	r29, 0x3e	; 62
  ae:	8a 83       	std	Y+2, r24	; 0x02
  b0:	6b 83       	std	Y+3, r22	; 0x03
  b2:	4c 83       	std	Y+4, r20	; 0x04
  b4:	2d 83       	std	Y+5, r18	; 0x05
	uint8_t i;

	for (i = 0; i < 8; i++)  {
  b6:	19 82       	std	Y+1, r1	; 0x01
  b8:	00 c0       	rjmp	.+0      	; 0xba <shiftOut+0x1a>
		if (bitOrder == LSBFIRST)
  ba:	8c 81       	ldd	r24, Y+4	; 0x04
  bc:	88 23       	and	r24, r24
  be:	01 f4       	brne	.+0      	; 0xc0 <shiftOut+0x20>
			digitalWrite(dataPin, !!(val & (1 << i)));
  c0:	8d 81       	ldd	r24, Y+5	; 0x05
  c2:	28 2f       	mov	r18, r24
  c4:	30 e0       	ldi	r19, 0x00	; 0
  c6:	89 81       	ldd	r24, Y+1	; 0x01
  c8:	88 2f       	mov	r24, r24
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	a9 01       	movw	r20, r18
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <shiftOut+0x30>
  d0:	55 95       	asr	r21
  d2:	47 95       	ror	r20
  d4:	8a 95       	dec	r24
  d6:	02 f4       	brpl	.+0      	; 0xd8 <shiftOut+0x38>
  d8:	ca 01       	movw	r24, r20
  da:	98 2f       	mov	r25, r24
  dc:	91 70       	andi	r25, 0x01	; 1
  de:	8a 81       	ldd	r24, Y+2	; 0x02
  e0:	69 2f       	mov	r22, r25
  e2:	0e 94 00 00 	call	0	; 0x0 <shiftIn>
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <shiftOut+0x48>
		else	
			digitalWrite(dataPin, !!(val & (1 << (7 - i))));
  e8:	8d 81       	ldd	r24, Y+5	; 0x05
  ea:	48 2f       	mov	r20, r24
  ec:	50 e0       	ldi	r21, 0x00	; 0
  ee:	89 81       	ldd	r24, Y+1	; 0x01
  f0:	28 2f       	mov	r18, r24
  f2:	30 e0       	ldi	r19, 0x00	; 0
  f4:	87 e0       	ldi	r24, 0x07	; 7
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	82 1b       	sub	r24, r18
  fa:	93 0b       	sbc	r25, r19
  fc:	9a 01       	movw	r18, r20
  fe:	00 c0       	rjmp	.+0      	; 0x100 <shiftOut+0x60>
 100:	35 95       	asr	r19
 102:	27 95       	ror	r18
 104:	8a 95       	dec	r24
 106:	02 f4       	brpl	.+0      	; 0x108 <shiftOut+0x68>
 108:	c9 01       	movw	r24, r18
 10a:	98 2f       	mov	r25, r24
 10c:	91 70       	andi	r25, 0x01	; 1
 10e:	8a 81       	ldd	r24, Y+2	; 0x02
 110:	69 2f       	mov	r22, r25
 112:	0e 94 00 00 	call	0	; 0x0 <shiftIn>
			
		digitalWrite(clockPin, HIGH);
 116:	8b 81       	ldd	r24, Y+3	; 0x03
 118:	61 e0       	ldi	r22, 0x01	; 1
 11a:	0e 94 00 00 	call	0	; 0x0 <shiftIn>
		digitalWrite(clockPin, LOW);		
 11e:	8b 81       	ldd	r24, Y+3	; 0x03
 120:	60 e0       	ldi	r22, 0x00	; 0
 122:	0e 94 00 00 	call	0	; 0x0 <shiftIn>

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
	uint8_t i;

	for (i = 0; i < 8; i++)  {
 126:	89 81       	ldd	r24, Y+1	; 0x01
 128:	8f 5f       	subi	r24, 0xFF	; 255
 12a:	89 83       	std	Y+1, r24	; 0x01
 12c:	89 81       	ldd	r24, Y+1	; 0x01
 12e:	88 30       	cpi	r24, 0x08	; 8
 130:	00 f0       	brcs	.+0      	; 0x132 <shiftOut+0x92>
			digitalWrite(dataPin, !!(val & (1 << (7 - i))));
			
		digitalWrite(clockPin, HIGH);
		digitalWrite(clockPin, LOW);		
	}
}
 132:	0f 90       	pop	r0
 134:	0f 90       	pop	r0
 136:	0f 90       	pop	r0
 138:	0f 90       	pop	r0
 13a:	0f 90       	pop	r0
 13c:	cf 91       	pop	r28
 13e:	df 91       	pop	r29
 140:	08 95       	ret
